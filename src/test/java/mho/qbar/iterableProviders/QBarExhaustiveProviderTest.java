package mho.qbar.iterableProviders;

import mho.qbar.objects.Rational;
import org.jetbrains.annotations.NotNull;
import org.junit.Test;

import static mho.wheels.iterables.IterableUtils.take;
import static mho.wheels.testing.Testing.*;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class QBarExhaustiveProviderTest {
    private static final @NotNull QBarExhaustiveProvider P = QBarExhaustiveProvider.INSTANCE;
    private static final int TINY_LIMIT = 50;

    private static <T> void simpleProviderHelper(@NotNull Iterable<T> xs, @NotNull String output) {
        aeqitLimit(TINY_LIMIT, xs, output);
        testNoRemove(TINY_LIMIT, xs);
    }

    @Test
    public void testPositiveRationals() {
        simpleProviderHelper(P.positiveRationals(),
                "[1, 1/2, 2, 1/3, 1/4, 2/3, 3, 3/2, 4, 3/4, 4/3, 1/5, 1/6, 2/5, 1/7, 1/8, 2/7, 3/5, 4/5, 3/7, 3/8," +
                " 4/7, 5, 5/2, 6, 5/3, 5/4, 7, 7/2, 8, 7/3, 7/4, 8/3, 5/6, 6/5, 5/7, 5/8, 6/7, 7/5, 7/6, 8/5, 7/8," +
                " 8/7, 1/9, 1/10, 2/9, 1/11, 1/12, 2/11, 3/10, ...]");
    }

    @Test
    public void testNegativeRationals() {
        simpleProviderHelper(P.negativeRationals(),
                "[-1, -1/2, -2, -1/3, -1/4, -2/3, -3, -3/2, -4, -3/4, -4/3, -1/5, -1/6, -2/5, -1/7, -1/8, -2/7," +
                " -3/5, -4/5, -3/7, -3/8, -4/7, -5, -5/2, -6, -5/3, -5/4, -7, -7/2, -8, -7/3, -7/4, -8/3, -5/6," +
                " -6/5, -5/7, -5/8, -6/7, -7/5, -7/6, -8/5, -7/8, -8/7, -1/9, -1/10, -2/9, -1/11, -1/12, -2/11," +
                " -3/10, ...]");
    }

    @Test
    public void testNonzeroRationals() {
        simpleProviderHelper(P.nonzeroRationals(),
                "[1, 1/2, -1, -1/2, 1/3, 1/4, -1/3, -1/4, 2, -2, 2/3, -2/3, 1/5, 1/6, -1/5, -1/6, 1/7, 1/8, -1/7," +
                " -1/8, 2/5, -2/5, 2/7, -2/7, 3, 3/2, -3, -3/2, 3/4, -3/4, 4, -4, 4/3, -4/3, 3/5, -3/5, 3/7, 3/8," +
                " -3/7, -3/8, 4/5, -4/5, 4/7, -4/7, 1/9, 1/10, -1/9, -1/10, 1/11, 1/12, ...]");
    }

    @Test
    public void testRationals() {
        simpleProviderHelper(P.rationals(),
                "[0, 1, 1/2, 1/3, 1/4, -1, -1/2, 2, -1/3, -1/4, 2/3, 1/5, 1/6, 1/7, 1/8, -1/5, -1/6, 2/5, -1/7," +
                " -1/8, 2/7, -2, 3, 3/2, -2/3, 3/4, -3, -3/2, 4, -3/4, 4/3, -2/5, 3/5, -2/7, 3/7, 3/8, -3/5, 4/5," +
                " -3/7, -3/8, 4/7, 1/9, 1/10, 1/11, 1/12, -1/9, -1/10, 2/9, -1/11, -1/12, ...]");
    }

    @Test
    public void testNonNegativeRationalsLessThanOne() {
        simpleProviderHelper(P.nonNegativeRationalsLessThanOne(),
                "[0, 1/2, 1/3, 2/3, 1/4, 1/5, 2/5, 3/4, 3/5, 4/5, 3/7, 4/7, 1/6, 1/7, 2/7, 1/8, 1/9, 2/9, 3/8, 4/9," +
                " 3/10, 3/11, 4/11, 5/6, 5/7, 6/7, 5/8, 5/9, 7/8, 7/9, 8/9, 7/10, 7/11, 8/11, 5/11, 6/11, 5/12," +
                " 5/13, 6/13, 7/12, 7/13, 8/13, 7/15, 8/15, 1/10, 1/11, 2/11, 1/12, 1/13, 2/13, ...]");
    }

    private static void rangeUp_Rational_helper(@NotNull String a, @NotNull String output) {
        aeqitLimit(TINY_LIMIT, P.rangeUp(Rational.read(a).get()), output);
    }

    @Test
    public void testRangeUp_Rational() {
        rangeUp_Rational_helper("0",
                "[0, 1, 1/2, 2, 1/3, 1/4, 2/3, 3, 3/2, 4, 3/4, 4/3, 1/5, 1/6, 2/5, 1/7, 1/8, 2/7, 3/5, 4/5, 3/7," +
                " 3/8, 4/7, 5, 5/2, 6, 5/3, 5/4, 7, 7/2, 8, 7/3, 7/4, 8/3, 5/6, 6/5, 5/7, 5/8, 6/7, 7/5, 7/6, 8/5," +
                " 7/8, 8/7, 1/9, 1/10, 2/9, 1/11, 1/12, 2/11, ...]");
        rangeUp_Rational_helper("1",
                "[1, 2, 3/2, 3, 4/3, 5/4, 5/3, 4, 5/2, 5, 7/4, 7/3, 6/5, 7/6, 7/5, 8/7, 9/8, 9/7, 8/5, 9/5, 10/7," +
                " 11/8, 11/7, 6, 7/2, 7, 8/3, 9/4, 8, 9/2, 9, 10/3, 11/4, 11/3, 11/6, 11/5, 12/7, 13/8, 13/7, 12/5," +
                " 13/6, 13/5, 15/8, 15/7, 10/9, 11/10, 11/9, 12/11, 13/12, 13/11, ...]");
        rangeUp_Rational_helper("2",
                "[2, 3, 5/2, 4, 7/3, 9/4, 8/3, 5, 7/2, 6, 11/4, 10/3, 11/5, 13/6, 12/5, 15/7, 17/8, 16/7, 13/5," +
                " 14/5, 17/7, 19/8, 18/7, 7, 9/2, 8, 11/3, 13/4, 9, 11/2, 10, 13/3, 15/4, 14/3, 17/6, 16/5, 19/7," +
                " 21/8, 20/7, 17/5, 19/6, 18/5, 23/8, 22/7, 19/9, 21/10, 20/9, 23/11, 25/12, 24/11, ...]");
        rangeUp_Rational_helper("-2",
                "[-2, -1, -3/2, 0, -5/3, -7/4, -4/3, 1, -1/2, 2, -5/4, -2/3, -9/5, -11/6, -8/5, -13/7, -15/8, -12/7," +
                " -7/5, -6/5, -11/7, -13/8, -10/7, 3, 1/2, 4, -1/3, -3/4, 5, 3/2, 6, 1/3, -1/4, 2/3, -7/6, -4/5," +
                " -9/7, -11/8, -8/7, -3/5, -5/6, -2/5, -9/8, -6/7, -17/9, -19/10, -16/9, -21/11, -23/12, -20/11," +
                " ...]");
        rangeUp_Rational_helper("5/3",
                "[5/3, 8/3, 13/6, 11/3, 2, 23/12, 7/3, 14/3, 19/6, 17/3, 29/12, 3, 28/15, 11/6, 31/15, 38/21, 43/24," +
                " 41/21, 34/15, 37/15, 44/21, 49/24, 47/21, 20/3, 25/6, 23/3, 10/3, 35/12, 26/3, 31/6, 29/3, 4," +
                " 41/12, 13/3, 5/2, 43/15, 50/21, 55/24, 53/21, 46/15, 17/6, 49/15, 61/24, 59/21, 16/9, 53/30, 17/9," +
                " 58/33, 7/4, 61/33, ...]");
        rangeUp_Rational_helper("-5/3",
                "[-5/3, -2/3, -7/6, 1/3, -4/3, -17/12, -1, 4/3, -1/6, 7/3, -11/12, -1/3, -22/15, -3/2, -19/15," +
                " -32/21, -37/24, -29/21, -16/15, -13/15, -26/21, -31/24, -23/21, 10/3, 5/6, 13/3, 0, -5/12, 16/3," +
                " 11/6, 19/3, 2/3, 1/12, 1, -5/6, -7/15, -20/21, -25/24, -17/21, -4/15, -1/2, -1/15, -19/24, -11/21," +
                " -14/9, -47/30, -13/9, -52/33, -19/12, -49/33, ...]");
    }

    private static void rangeDown_Rational_helper(@NotNull String a, @NotNull String output) {
        aeqitLimit(TINY_LIMIT, P.rangeDown(Rational.read(a).get()), output);
    }

    @Test
    public void testRangeDown_Rational() {
        rangeDown_Rational_helper("0",
                "[0, -1, -1/2, -2, -1/3, -1/4, -2/3, -3, -3/2, -4, -3/4, -4/3, -1/5, -1/6, -2/5, -1/7, -1/8, -2/7," +
                " -3/5, -4/5, -3/7, -3/8, -4/7, -5, -5/2, -6, -5/3, -5/4, -7, -7/2, -8, -7/3, -7/4, -8/3, -5/6," +
                " -6/5, -5/7, -5/8, -6/7, -7/5, -7/6, -8/5, -7/8, -8/7, -1/9, -1/10, -2/9, -1/11, -1/12, -2/11, ...]");
        rangeDown_Rational_helper("1",
                "[1, 0, 1/2, -1, 2/3, 3/4, 1/3, -2, -1/2, -3, 1/4, -1/3, 4/5, 5/6, 3/5, 6/7, 7/8, 5/7, 2/5, 1/5," +
                " 4/7, 5/8, 3/7, -4, -3/2, -5, -2/3, -1/4, -6, -5/2, -7, -4/3, -3/4, -5/3, 1/6, -1/5, 2/7, 3/8, 1/7," +
                " -2/5, -1/6, -3/5, 1/8, -1/7, 8/9, 9/10, 7/9, 10/11, 11/12, 9/11, ...]");
        rangeDown_Rational_helper("2",
                "[2, 1, 3/2, 0, 5/3, 7/4, 4/3, -1, 1/2, -2, 5/4, 2/3, 9/5, 11/6, 8/5, 13/7, 15/8, 12/7, 7/5, 6/5," +
                " 11/7, 13/8, 10/7, -3, -1/2, -4, 1/3, 3/4, -5, -3/2, -6, -1/3, 1/4, -2/3, 7/6, 4/5, 9/7, 11/8, 8/7," +
                " 3/5, 5/6, 2/5, 9/8, 6/7, 17/9, 19/10, 16/9, 21/11, 23/12, 20/11, ...]");
        rangeDown_Rational_helper("-2",
                "[-2, -3, -5/2, -4, -7/3, -9/4, -8/3, -5, -7/2, -6, -11/4, -10/3, -11/5, -13/6, -12/5, -15/7, -17/8," +
                " -16/7, -13/5, -14/5, -17/7, -19/8, -18/7, -7, -9/2, -8, -11/3, -13/4, -9, -11/2, -10, -13/3," +
                " -15/4, -14/3, -17/6, -16/5, -19/7, -21/8, -20/7, -17/5, -19/6, -18/5, -23/8, -22/7, -19/9, -21/10," +
                " -20/9, -23/11, -25/12, -24/11, ...]");
        rangeDown_Rational_helper("5/3",
                "[5/3, 2/3, 7/6, -1/3, 4/3, 17/12, 1, -4/3, 1/6, -7/3, 11/12, 1/3, 22/15, 3/2, 19/15, 32/21, 37/24," +
                " 29/21, 16/15, 13/15, 26/21, 31/24, 23/21, -10/3, -5/6, -13/3, 0, 5/12, -16/3, -11/6, -19/3, -2/3," +
                " -1/12, -1, 5/6, 7/15, 20/21, 25/24, 17/21, 4/15, 1/2, 1/15, 19/24, 11/21, 14/9, 47/30, 13/9," +
                " 52/33, 19/12, 49/33, ...]");
        rangeDown_Rational_helper("-5/3",
                "[-5/3, -8/3, -13/6, -11/3, -2, -23/12, -7/3, -14/3, -19/6, -17/3, -29/12, -3, -28/15, -11/6," +
                " -31/15, -38/21, -43/24, -41/21, -34/15, -37/15, -44/21, -49/24, -47/21, -20/3, -25/6, -23/3," +
                " -10/3, -35/12, -26/3, -31/6, -29/3, -4, -41/12, -13/3, -5/2, -43/15, -50/21, -55/24, -53/21," +
                " -46/15, -17/6, -49/15, -61/24, -59/21, -16/9, -53/30, -17/9, -58/33, -7/4, -61/33, ...]");
    }

    private static void range_Rational_Rational_helper(@NotNull String a, @NotNull String b, @NotNull String output) {
        aeqitLimit(TINY_LIMIT, P.range(Rational.read(a).get(), Rational.read(b).get()), output);
    }

    @Test
    public void testRange_Rational_Rational() {
        range_Rational_Rational_helper("1", "0", "[]");
        range_Rational_Rational_helper("1/2", "1/3", "[]");
        range_Rational_Rational_helper("0", "0", "[0]");
        range_Rational_Rational_helper("5/3", "5/3", "[5/3]");
        range_Rational_Rational_helper("0", "1",
                "[0, 1, 1/2, 1/3, 2/3, 1/4, 1/5, 2/5, 3/4, 3/5, 4/5, 3/7, 4/7, 1/6, 1/7, 2/7, 1/8, 1/9, 2/9, 3/8," +
                " 4/9, 3/10, 3/11, 4/11, 5/6, 5/7, 6/7, 5/8, 5/9, 7/8, 7/9, 8/9, 7/10, 7/11, 8/11, 5/11, 6/11, 5/12," +
                " 5/13, 6/13, 7/12, 7/13, 8/13, 7/15, 8/15, 1/10, 1/11, 2/11, 1/12, 1/13, ...]");
        range_Rational_Rational_helper("-1", "0",
                "[-1, 0, -1/2, -2/3, -1/3, -3/4, -4/5, -3/5, -1/4, -2/5, -1/5, -4/7, -3/7, -5/6, -6/7, -5/7, -7/8," +
                " -8/9, -7/9, -5/8, -5/9, -7/10, -8/11, -7/11, -1/6, -2/7, -1/7, -3/8, -4/9, -1/8, -2/9, -1/9," +
                " -3/10, -4/11, -3/11, -6/11, -5/11, -7/12, -8/13, -7/13, -5/12, -6/13, -5/13, -8/15, -7/15, -9/10," +
                " -10/11, -9/11, -11/12, -12/13, ...]");
        range_Rational_Rational_helper("1/3", "1/2",
                "[1/3, 1/2, 5/12, 7/18, 4/9, 3/8, 11/30, 2/5, 11/24, 13/30, 7/15, 17/42, 3/7, 13/36, 5/14, 8/21," +
                " 17/48, 19/54, 10/27, 19/48, 11/27, 23/60, 25/66, 13/33, 17/36, 19/42, 10/21, 7/16, 23/54, 23/48," +
                " 25/54, 13/27, 9/20, 29/66, 5/11, 9/22, 14/33, 29/72, 31/78, 16/39, 31/72, 11/26, 17/39, 37/90," +
                " 19/45, 7/20, 23/66, 4/11, 25/72, 9/26, ...]");
        range_Rational_Rational_helper("-1", "5/3",
                "[-1, 5/3, 1/3, -1/9, 7/9, -1/3, -7/15, 1/15, 1, 3/5, 17/15, 1/7, 11/21, -5/9, -13/21, -5/21, -2/3," +
                " -19/27, -11/27, 0, 5/27, -1/5, -3/11, -1/33, 11/9, 19/21, 9/7, 2/3, 13/27, 4/3, 29/27, 37/27," +
                " 13/15, 23/33, 31/33, 7/33, 5/11, 1/9, 1/39, 3/13, 5/9, 17/39, 25/39, 11/45, 19/45, -11/15, -25/33," +
                " -17/33, -7/9, -31/39, ...]");
    }

    @Test
    public void testFinitelyBoundedIntervals() {
        aeqit(take(50, P.finitelyBoundedIntervals()),
                "[[0, 0], [0, 1], [1, 1], [0, 1/2], [0, 1/3], [1/2, 1], [1/3, 1], [1/2, 1/2], [1/3, 1/2]," +
                " [1/3, 1/3], [0, 1/4], [0, 2], [1, 2], [1/2, 2], [1/3, 2], [1/4, 1], [-1, 0], [-1, 1], [1/4, 1/2]," +
                " [1/4, 1/3], [-1, 1/2], [-1, 1/3], [-1/2, 0], [-1/2, 1], [-1/2, 1/2], [-1/2, 1/3], [1/4, 1/4]," +
                " [-1, 1/4], [-1, -1], [1/4, 2], [-1, -1/2], [-1, 2], [-1/2, 1/4], [-1/2, -1/2], [-1/2, 2], [2, 2]," +
                " [0, 2/3], [0, 1/5], [1/2, 2/3], [1/3, 2/3], [0, 1/6], [0, 1/7], [0, 1/8], [-1, -1/3], [-1, -1/4]," +
                " [1/4, 2/3], [-1, 2/3], [-1, 1/5], [-1/2, -1/3], [-1/2, -1/4]]");
    }

    @Test
    public void testIntervals() {
        aeqit(take(50, P.intervals()),
                "[(-Infinity, Infinity), (-Infinity, 0], [0, Infinity), [0, 0], (-Infinity, 1], (-Infinity, 1/2]," +
                " [0, 1], [0, 1/2], [1, Infinity), [1/2, Infinity), [1, 1], [1/2, 1], [1/2, 1/2], (-Infinity, 1/3]," +
                " (-Infinity, 1/4], [0, 1/3], [0, 1/4], (-Infinity, -1], (-Infinity, -1/2], [1/3, Infinity)," +
                " [1/4, Infinity), [1/3, 1], [1/3, 1/2], [1/4, 1], [1/4, 1/2], [-1, Infinity), [-1, 0]," +
                " [-1/2, Infinity), [-1/2, 0], [-1, 1], [-1, 1/2], [-1/2, 1], [-1/2, 1/2], [1/3, 1/3], [1/4, 1/3]," +
                " [1/4, 1/4], [-1, 1/3], [-1, 1/4], [-1/2, 1/3], [-1/2, 1/4], [-1, -1], [-1, -1/2], [-1/2, -1/2]," +
                " (-Infinity, 2], (-Infinity, -1/3], [0, 2], (-Infinity, -1/4], (-Infinity, 2/3], [0, 2/3], [1, 2]]");
    }

    @Test
    public void testRationalVectors_int() {
        aeqit(P.rationalVectors(0), "[[]]");
        aeqit(take(50, P.rationalVectors(1)),
                "[[0], [1], [1/2], [1/3], [1/4], [-1], [-1/2], [2], [-1/3], [-1/4], [2/3], [1/5], [1/6], [1/7]," +
                " [1/8], [-1/5], [-1/6], [2/5], [-1/7], [-1/8], [2/7], [-2], [3], [3/2], [-2/3], [3/4], [-3]," +
                " [-3/2], [4], [-3/4], [4/3], [-2/5], [3/5], [-2/7], [3/7], [3/8], [-3/5], [4/5], [-3/7], [-3/8]," +
                " [4/7], [1/9], [1/10], [1/11], [1/12], [-1/9], [-1/10], [2/9], [-1/11], [-1/12]]");
        aeqit(take(50, P.rationalVectors(2)),
                "[[0, 0], [0, 1], [1, 0], [1, 1], [0, 1/2], [0, 1/3], [1, 1/2], [1, 1/3], [1/2, 0], [1/2, 1]," +
                " [1/3, 0], [1/3, 1], [1/2, 1/2], [1/2, 1/3], [1/3, 1/2], [1/3, 1/3], [0, 1/4], [0, -1], [1, 1/4]," +
                " [1, -1], [0, -1/2], [0, 2], [1, -1/2], [1, 2], [1/2, 1/4], [1/2, -1], [1/3, 1/4], [1/3, -1]," +
                " [1/2, -1/2], [1/2, 2], [1/3, -1/2], [1/3, 2], [1/4, 0], [1/4, 1], [-1, 0], [-1, 1], [1/4, 1/2]," +
                " [1/4, 1/3], [-1, 1/2], [-1, 1/3], [-1/2, 0], [-1/2, 1], [2, 0], [2, 1], [-1/2, 1/2], [-1/2, 1/3]," +
                " [2, 1/2], [2, 1/3], [1/4, 1/4], [1/4, -1]]");
        aeqit(take(50, P.rationalVectors(3)),
                "[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]," +
                " [0, 0, 1/2], [0, 0, 1/3], [0, 1, 1/2], [0, 1, 1/3], [1, 0, 1/2], [1, 0, 1/3], [1, 1, 1/2]," +
                " [1, 1, 1/3], [0, 1/2, 0], [0, 1/2, 1], [0, 1/3, 0], [0, 1/3, 1], [1, 1/2, 0], [1, 1/2, 1]," +
                " [1, 1/3, 0], [1, 1/3, 1], [0, 1/2, 1/2], [0, 1/2, 1/3], [0, 1/3, 1/2], [0, 1/3, 1/3]," +
                " [1, 1/2, 1/2], [1, 1/2, 1/3], [1, 1/3, 1/2], [1, 1/3, 1/3], [1/2, 0, 0], [1/2, 0, 1], [1/2, 1, 0]," +
                " [1/2, 1, 1], [1/3, 0, 0], [1/3, 0, 1], [1/3, 1, 0], [1/3, 1, 1], [1/2, 0, 1/2], [1/2, 0, 1/3]," +
                " [1/2, 1, 1/2], [1/2, 1, 1/3], [1/3, 0, 1/2], [1/3, 0, 1/3], [1/3, 1, 1/2], [1/3, 1, 1/3]," +
                " [1/2, 1/2, 0], [1/2, 1/2, 1]]");
        aeqit(take(50, P.rationalVectors(10)),
                "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]," +
                " [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1]," +
                " [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0]," +
                " [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1]," +
                " [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0]," +
                " [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1]," +
                " [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1]]");
    }

    @Test
    public void testRationalVectorsAtLeast() {
        aeqit(take(50, P.rationalVectorsAtLeast(0)),
                "[[], [0], [0, 0], [1], [0, 0, 0], [1/2], [0, 1], [1/3], [0, 0, 0, 0], [1/4], [1, 0], [-1]," +
                " [0, 0, 1], [-1/2], [1, 1], [2], [0, 0, 0, 0, 0], [-1/3], [0, 1/2], [-1/4], [0, 1, 0], [2/3]," +
                " [0, 1/3], [1/5], [0, 0, 0, 1], [1/6], [1, 1/2], [1/7], [0, 1, 1], [1/8], [1, 1/3], [-1/5]," +
                " [0, 0, 0, 0, 0, 0], [-1/6], [1/2, 0], [2/5], [1, 0, 0], [-1/7], [1/2, 1], [-1/8], [0, 0, 1, 0]," +
                " [2/7], [1/3, 0], [-2], [1, 0, 1], [3], [1/3, 1], [3/2], [0, 0, 0, 0, 1], [-2/3]]");
        aeqit(take(50, P.rationalVectorsAtLeast(1)),
                "[[0], [0, 0], [1], [0, 0, 0], [1/2], [0, 1], [1/3], [0, 0, 0, 0], [1/4], [1, 0], [-1], [0, 0, 1]," +
                " [-1/2], [1, 1], [2], [0, 0, 0, 0, 0], [-1/3], [0, 1/2], [-1/4], [0, 1, 0], [2/3], [0, 1/3], [1/5]," +
                " [0, 0, 0, 1], [1/6], [1, 1/2], [1/7], [0, 1, 1], [1/8], [1, 1/3], [-1/5], [0, 0, 0, 0, 0, 0]," +
                " [-1/6], [1/2, 0], [2/5], [1, 0, 0], [-1/7], [1/2, 1], [-1/8], [0, 0, 1, 0], [2/7], [1/3, 0], [-2]," +
                " [1, 0, 1], [3], [1/3, 1], [3/2], [0, 0, 0, 0, 1], [-2/3], [1/2, 1/2]]");
        aeqit(take(50, P.rationalVectorsAtLeast(2)),
                "[[0, 0], [0, 0, 0], [0, 1], [0, 0, 0, 0], [1, 0], [0, 0, 1], [1, 1], [0, 0, 0, 0, 0], [0, 1/2]," +
                " [0, 1, 0], [0, 1/3], [0, 0, 0, 1], [1, 1/2], [0, 1, 1], [1, 1/3], [0, 0, 0, 0, 0, 0], [1/2, 0]," +
                " [1, 0, 0], [1/2, 1], [0, 0, 1, 0], [1/3, 0], [1, 0, 1], [1/3, 1], [0, 0, 0, 0, 1], [1/2, 1/2]," +
                " [1, 1, 0], [1/2, 1/3], [0, 0, 1, 1], [1/3, 1/2], [1, 1, 1], [1/3, 1/3], [0, 0, 0, 0, 0, 0, 0]," +
                " [0, 1/4], [0, 0, 1/2], [0, -1], [0, 1, 0, 0], [1, 1/4], [0, 0, 1/3], [1, -1], [0, 0, 0, 1, 0]," +
                " [0, -1/2], [0, 1, 1/2], [0, 2], [0, 1, 0, 1], [1, -1/2], [0, 1, 1/3], [1, 2], [0, 0, 0, 0, 0, 1]," +
                " [1/2, 1/4], [1, 0, 1/2]]");
        aeqit(take(50, P.rationalVectorsAtLeast(3)),
                "[[0, 0, 0], [0, 0, 0, 0], [0, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0], [0, 0, 0, 1], [0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0], [1, 0, 0], [0, 0, 1, 0], [1, 0, 1], [0, 0, 0, 0, 1], [1, 1, 0], [0, 0, 1, 1]," +
                " [1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1/2], [0, 1, 0, 0], [0, 0, 1/3], [0, 0, 0, 1, 0]," +
                " [0, 1, 1/2], [0, 1, 0, 1], [0, 1, 1/3], [0, 0, 0, 0, 0, 1], [1, 0, 1/2], [0, 1, 1, 0]," +
                " [1, 0, 1/3], [0, 0, 0, 1, 1], [1, 1, 1/2], [0, 1, 1, 1], [1, 1, 1/3], [0, 0, 0, 0, 0, 0, 0, 0]," +
                " [0, 1/2, 0], [1, 0, 0, 0], [0, 1/2, 1], [0, 0, 1, 0, 0], [0, 1/3, 0], [1, 0, 0, 1], [0, 1/3, 1]," +
                " [0, 0, 0, 0, 1, 0], [1, 1/2, 0], [1, 0, 1, 0], [1, 1/2, 1], [0, 0, 1, 0, 1], [1, 1/3, 0]," +
                " [1, 0, 1, 1], [1, 1/3, 1], [0, 0, 0, 0, 0, 0, 1], [0, 1/2, 1/2], [1, 1, 0, 0]]");
        aeqit(take(50, P.rationalVectorsAtLeast(10)),
                "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]]");
    }

    @Test
    public void testRationalVectors() {
        aeqit(take(50, P.rationalVectors()),
                "[[], [0], [0, 0], [1], [0, 0, 0], [1/2], [0, 1], [1/3], [0, 0, 0, 0], [1/4], [1, 0], [-1]," +
                " [0, 0, 1], [-1/2], [1, 1], [2], [0, 0, 0, 0, 0], [-1/3], [0, 1/2], [-1/4], [0, 1, 0], [2/3]," +
                " [0, 1/3], [1/5], [0, 0, 0, 1], [1/6], [1, 1/2], [1/7], [0, 1, 1], [1/8], [1, 1/3], [-1/5]," +
                " [0, 0, 0, 0, 0, 0], [-1/6], [1/2, 0], [2/5], [1, 0, 0], [-1/7], [1/2, 1], [-1/8], [0, 0, 1, 0]," +
                " [2/7], [1/3, 0], [-2], [1, 0, 1], [3], [1/3, 1], [3/2], [0, 0, 0, 0, 1], [-2/3]]");
    }

    @Test
    public void testReducedRationalVectors_int() {
        aeqit(P.reducedRationalVectors(0), "[[]]");
        aeqit(P.reducedRationalVectors(1), "[[0], [1]]");
        aeqit(take(50, P.reducedRationalVectors(2)),
                "[[0, 0], [0, 1], [1, 0], [1, 1], [1, -1], [1, 2], [1, 1/2], [1, -1/2], [1, -2], [1, 3], [1, -3]," +
                " [1, 4], [1, 3/2], [1, -3/2], [1, 1/3], [1, -1/3], [1, 2/3], [1, 1/4], [1, -1/4], [1, -2/3]," +
                " [1, 4/3], [1, 3/4], [1, -3/4], [1, -4], [1, 5], [1, -5], [1, 6], [1, 5/2], [1, -5/2], [1, -6]," +
                " [1, 7], [1, -7], [1, 8], [1, 7/2], [1, -7/2], [1, -4/3], [1, 5/3], [1, -5/3], [1, 5/4], [1, -5/4]," +
                " [1, 7/3], [1, -7/3], [1, 8/3], [1, 7/4], [1, -7/4], [1, 1/5], [1, -1/5], [1, 2/5], [1, 1/6]," +
                " [1, -1/6]]");
        aeqit(take(50, P.reducedRationalVectors(3)),
                "[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]," +
                " [0, 1, -1], [0, 1, 2], [1, 0, -1], [1, 0, 2], [1, 1, -1], [1, 1, 2], [0, 1, 1/2], [1, -1, 0]," +
                " [1, -1, 1], [1, 2, 0], [1, 2, 1], [0, 1, -1/2], [1, -1, -1], [1, -1, 2], [1, 2, -1], [1, 2, 2]," +
                " [1, 0, 1/2], [1, 1/2, 0], [1, 1/2, 1/2], [1, 0, -1/2], [1, 1/2, -1/2], [1, 1/2, 1], [1, -1/2, 0]," +
                " [1, -1/2, 1/2], [1, 1, 1/2], [1, -1/2, -1/2], [1, -1/2, 1], [1, 1, -1/2], [0, 1, -2], [0, 1, 3]," +
                " [1, 0, -2], [1, 0, 3], [1, 1, -2], [1, 1, 3], [0, 1, -3], [0, 1, 4], [1, 0, -3], [1, 0, 4]," +
                " [1, 1, -3], [1, 1, 4], [0, 1, 3/2], [1, -1, -2]]");
        aeqit(take(50, P.reducedRationalVectors(10)),
                "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]," +
                " [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1]," +
                " [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0]," +
                " [0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1]," +
                " [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0]," +
                " [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1]," +
                " [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1]]");
    }

    @Test
    public void testReducedRationalVectorsAtLeast() {
        aeqit(take(50, P.reducedRationalVectorsAtLeast(0)),
                "[[], [0], [0, 0], [1], [0, 0, 0], [0, 1], [0, 0, 0, 0], [1, 0], [0, 0, 1], [1, 1], [0, 0, 0, 0, 0]," +
                " [0, 1, 0], [0, 0, 0, 1], [1, -1], [0, 1, 1], [1, 2], [0, 0, 0, 0, 0, 0], [1, 0, 0], [0, 0, 1, 0]," +
                " [1, 0, 1], [1, 1/2], [0, 0, 0, 0, 1], [1, 1, 0], [0, 0, 1, 1], [1, -1/2], [1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0], [1, -2], [1, 3], [0, 0, 0, 1, 0], [0, 1, -1], [0, 1, 0, 1]," +
                " [1, -3], [0, 1, 2], [1, 4], [0, 0, 0, 0, 0, 1], [1, 0, -1], [0, 1, 1, 0], [1, 0, 2], [1, 3/2]," +
                " [0, 0, 0, 1, 1], [1, 1, -1], [0, 1, 1, 1], [1, -3/2], [1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0]," +
                " [1, 0, 0, 0], [1, 1/3], [0, 0, 1, 0, 0]]");
        aeqit(take(50, P.reducedRationalVectorsAtLeast(1)),
                "[[0], [0, 0], [1], [0, 0, 0], [0, 1], [0, 0, 0, 0], [1, 0], [0, 0, 1], [1, 1], [0, 0, 0, 0, 0]," +
                " [0, 1, 0], [0, 0, 0, 1], [1, -1], [0, 1, 1], [1, 2], [0, 0, 0, 0, 0, 0], [1, 0, 0], [0, 0, 1, 0]," +
                " [1, 0, 1], [1, 1/2], [0, 0, 0, 0, 1], [1, 1, 0], [0, 0, 1, 1], [1, -1/2], [1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0], [1, -2], [1, 3], [0, 0, 0, 1, 0], [0, 1, -1], [0, 1, 0, 1]," +
                " [1, -3], [0, 1, 2], [1, 4], [0, 0, 0, 0, 0, 1], [1, 0, -1], [0, 1, 1, 0], [1, 0, 2], [1, 3/2]," +
                " [0, 0, 0, 1, 1], [1, 1, -1], [0, 1, 1, 1], [1, -3/2], [1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0]," +
                " [1, 0, 0, 0], [1, 1/3], [0, 0, 1, 0, 0], [1, 0, 0, 1]]");
        aeqit(take(50, P.reducedRationalVectorsAtLeast(2)),
                "[[0, 0], [0, 0, 0], [0, 1], [0, 0, 0, 0], [1, 0], [0, 0, 1], [1, 1], [0, 0, 0, 0, 0], [0, 1, 0]," +
                " [0, 0, 0, 1], [1, -1], [0, 1, 1], [1, 2], [0, 0, 0, 0, 0, 0], [1, 0, 0], [0, 0, 1, 0], [1, 0, 1]," +
                " [1, 1/2], [0, 0, 0, 0, 1], [1, 1, 0], [0, 0, 1, 1], [1, -1/2], [1, 1, 1], [0, 0, 0, 0, 0, 0, 0]," +
                " [0, 1, 0, 0], [1, -2], [1, 3], [0, 0, 0, 1, 0], [0, 1, -1], [0, 1, 0, 1], [1, -3], [0, 1, 2]," +
                " [1, 4], [0, 0, 0, 0, 0, 1], [1, 0, -1], [0, 1, 1, 0], [1, 0, 2], [1, 3/2], [0, 0, 0, 1, 1]," +
                " [1, 1, -1], [0, 1, 1, 1], [1, -3/2], [1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0], [1, 1/3]," +
                " [0, 0, 1, 0, 0], [1, 0, 0, 1], [1, -1/3], [0, 1, 1/2]]");
        aeqit(take(50, P.reducedRationalVectorsAtLeast(3)),
                "[[0, 0, 0], [0, 0, 0, 0], [0, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0], [0, 0, 0, 1], [0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0], [1, 0, 0], [0, 0, 1, 0], [1, 0, 1], [0, 0, 0, 0, 1], [1, 1, 0], [0, 0, 1, 1]," +
                " [1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, -1], [0, 1, 0, 1]," +
                " [0, 1, 2], [0, 0, 0, 0, 0, 1], [1, 0, -1], [0, 1, 1, 0], [1, 0, 2], [0, 0, 0, 1, 1], [1, 1, -1]," +
                " [0, 1, 1, 1], [1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0, 0], [1, 0, 0, 1]," +
                " [0, 1, 1/2], [0, 0, 0, 0, 1, 0], [1, -1, 0], [1, 0, 1, 0], [1, -1, 1], [0, 0, 1, 0, 1], [1, 2, 0]," +
                " [1, 0, 1, 1], [1, 2, 1], [0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 1, -1/2]," +
                " [1, 1, 0, 1], [0, 0, 0, 0, 1, 1], [1, -1, -1], [1, 1, 1, 0]]");
        aeqit(take(50, P.reducedRationalVectorsAtLeast(10)),
                "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]," +
                " [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]]");
    }

    @Test
    public void testReducedRationalVectors() {
        aeqit(take(50, P.reducedRationalVectors()),
                "[[], [0], [0, 0], [1], [0, 0, 0], [0, 1], [0, 0, 0, 0], [1, 0], [0, 0, 1], [1, 1], [0, 0, 0, 0, 0]," +
                " [0, 1, 0], [0, 0, 0, 1], [1, -1], [0, 1, 1], [1, 2], [0, 0, 0, 0, 0, 0], [1, 0, 0], [0, 0, 1, 0]," +
                " [1, 0, 1], [1, 1/2], [0, 0, 0, 0, 1], [1, 1, 0], [0, 0, 1, 1], [1, -1/2], [1, 1, 1]," +
                " [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0], [1, -2], [1, 3], [0, 0, 0, 1, 0], [0, 1, -1], [0, 1, 0, 1]," +
                " [1, -3], [0, 1, 2], [1, 4], [0, 0, 0, 0, 0, 1], [1, 0, -1], [0, 1, 1, 0], [1, 0, 2], [1, 3/2]," +
                " [0, 0, 0, 1, 1], [1, 1, -1], [0, 1, 1, 1], [1, -3/2], [1, 1, 2], [0, 0, 0, 0, 0, 0, 0, 0]," +
                " [1, 0, 0, 0], [1, 1/3], [0, 0, 1, 0, 0]]");
    }

    @Test
    public void testRationalMatrices_int_int() {
        aeqit(P.rationalMatrices(0, 0), "[[]#0]");
        aeqit(P.rationalMatrices(0, 3), "[[]#3]");
        aeqit(P.rationalMatrices(3, 0), "[[[], [], []]]");
        aeqit(take(50, P.rationalMatrices(1, 1)),
                "[[[0]], [[1]], [[1/2]], [[1/3]], [[1/4]], [[-1]], [[-1/2]], [[2]], [[-1/3]], [[-1/4]], [[2/3]]," +
                " [[1/5]], [[1/6]], [[1/7]], [[1/8]], [[-1/5]], [[-1/6]], [[2/5]], [[-1/7]], [[-1/8]], [[2/7]]," +
                " [[-2]], [[3]], [[3/2]], [[-2/3]], [[3/4]], [[-3]], [[-3/2]], [[4]], [[-3/4]], [[4/3]], [[-2/5]]," +
                " [[3/5]], [[-2/7]], [[3/7]], [[3/8]], [[-3/5]], [[4/5]], [[-3/7]], [[-3/8]], [[4/7]], [[1/9]]," +
                " [[1/10]], [[1/11]], [[1/12]], [[-1/9]], [[-1/10]], [[2/9]], [[-1/11]], [[-1/12]]]");
        aeqit(take(50, P.rationalMatrices(2, 2)),
                "[[[0, 0], [0, 0]], [[0, 0], [0, 1]], [[0, 0], [1, 0]], [[0, 0], [1, 1]], [[0, 1], [0, 0]]," +
                " [[0, 1], [0, 1]], [[0, 1], [1, 0]], [[0, 1], [1, 1]], [[1, 0], [0, 0]], [[1, 0], [0, 1]]," +
                " [[1, 0], [1, 0]], [[1, 0], [1, 1]], [[1, 1], [0, 0]], [[1, 1], [0, 1]], [[1, 1], [1, 0]]," +
                " [[1, 1], [1, 1]], [[0, 0], [0, 1/2]], [[0, 0], [0, 1/3]], [[0, 0], [1, 1/2]], [[0, 0], [1, 1/3]]," +
                " [[0, 1], [0, 1/2]], [[0, 1], [0, 1/3]], [[0, 1], [1, 1/2]], [[0, 1], [1, 1/3]]," +
                " [[1, 0], [0, 1/2]], [[1, 0], [0, 1/3]], [[1, 0], [1, 1/2]], [[1, 0], [1, 1/3]]," +
                " [[1, 1], [0, 1/2]], [[1, 1], [0, 1/3]], [[1, 1], [1, 1/2]], [[1, 1], [1, 1/3]]," +
                " [[0, 0], [1/2, 0]], [[0, 0], [1/2, 1]], [[0, 0], [1/3, 0]], [[0, 0], [1/3, 1]]," +
                " [[0, 1], [1/2, 0]], [[0, 1], [1/2, 1]], [[0, 1], [1/3, 0]], [[0, 1], [1/3, 1]]," +
                " [[1, 0], [1/2, 0]], [[1, 0], [1/2, 1]], [[1, 0], [1/3, 0]], [[1, 0], [1/3, 1]]," +
                " [[1, 1], [1/2, 0]], [[1, 1], [1/2, 1]], [[1, 1], [1/3, 0]], [[1, 1], [1/3, 1]]," +
                " [[0, 0], [1/2, 1/2]], [[0, 0], [1/2, 1/3]]]");
        aeqit(take(50, P.rationalMatrices(3, 4)),
                "[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [1, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [1, 0, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 1, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 0, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 0, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0]], [[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 1]]," +
                " [[0, 0, 0, 0], [0, 0, 1, 1], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 1, 1], [0, 0, 0, 1]]]");
    }

//    @Test
//    public void testRationalMatrices() {
//        aeqit(take(50, P.rationalMatrices()),
//                "[[]#0, []#1, [[]], [[0]], [[1]], [[1/2]], [[1/3]], [[1/4]], [[-1]], [[-1/2]], [[2]], [[-1/3]]," +
//                " [[-1/4]], [[2/3]], [[1/5]], [[1/6]], [[1/7]], [[1/8]], [[-1/5]], []#2, []#3, [[0, 0]]," +
//                " [[0, 0, 0]], [[0, 1]], [[0, 0, 1]], [[1, 0]], [[0, 1, 0]], [[1, 1]], [[0, 1, 1]], [[0, 1/2]]," +
//                " [[1, 0, 0]], [[0, 1/3]], [[1, 0, 1]], [[1, 1/2]], [[1, 1, 0]], [[1, 1/3]], [[1, 1, 1]]," +
//                " [[1/2, 0]], [[0, 0, 1/2]], [[1/2, 1]], [[0, 0, 1/3]], [[1/3, 0]], [[0, 1, 1/2]], [[1/3, 1]]," +
//                " [[0, 1, 1/3]], [[1/2, 1/2]], [[1, 0, 1/2]], [[1/2, 1/3]], [[1, 0, 1/3]], [[1/3, 1/2]]]");
//    }

    @Test
    public void testPolynomials_int() {
        aeqit(P.polynomials(-1), "[0]");
        aeqit(take(50, P.polynomials(0)),
                "[1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 11, -11, 12, -12, 13, -13," +
                " 14, -14, 15, -15, 16, -16, 17, -17, 18, -18, 19, -19, 20, -20, 21, -21, 22, -22, 23, -23, 24, -24," +
                " 25, -25]");
        aeqit(take(50, P.polynomials(1)),
                "[x, x+1, -x, 2*x, -x+1, 2*x+1, x-1, x+2, -x-1, 2*x-1, -x+2, 2*x+2, -2*x, 3*x, -2*x+1, 3*x+1, -3*x," +
                " 4*x, -3*x+1, 4*x+1, -2*x-1, 3*x-1, -2*x+2, 3*x+2, -3*x-1, 4*x-1, -3*x+2, 4*x+2, x-2, x+3, -x-2," +
                " 2*x-2, -x+3, 2*x+3, x-3, x+4, -x-3, 2*x-3, -x+4, 2*x+4, -2*x-2, 3*x-2, -2*x+3, 3*x+3, -3*x-2," +
                " 4*x-2, -3*x+3, 4*x+3, -2*x-3, 3*x-3]");
        aeqit(take(50, P.polynomials(2)),
                "[x^2, x^2+x, x^2+1, x^2+x+1, -x^2, 2*x^2, -x^2+x, 2*x^2+x, -x^2+1, 2*x^2+1, -x^2+x+1, 2*x^2+x+1," +
                " x^2-x, x^2+2*x, x^2-x+1, x^2+2*x+1, -x^2-x, 2*x^2-x, -x^2+2*x, 2*x^2+2*x, -x^2-x+1, 2*x^2-x+1," +
                " -x^2+2*x+1, 2*x^2+2*x+1, x^2-1, x^2+x-1, x^2+2, x^2+x+2, -x^2-1, 2*x^2-1, -x^2+x-1, 2*x^2+x-1," +
                " -x^2+2, 2*x^2+2, -x^2+x+2, 2*x^2+x+2, x^2-x-1, x^2+2*x-1, x^2-x+2, x^2+2*x+2, -x^2-x-1, 2*x^2-x-1," +
                " -x^2+2*x-1, 2*x^2+2*x-1, -x^2-x+2, 2*x^2-x+2, -x^2+2*x+2, 2*x^2+2*x+2, -2*x^2, 3*x^2]");
        aeqit(take(50, P.polynomials(9)),
                "[x^9, x^9+x^8, x^9+x^7, x^9+x^8+x^7, x^9+x^6, x^9+x^8+x^6, x^9+x^7+x^6, x^9+x^8+x^7+x^6, x^9+x^5," +
                " x^9+x^8+x^5, x^9+x^7+x^5, x^9+x^8+x^7+x^5, x^9+x^6+x^5, x^9+x^8+x^6+x^5, x^9+x^7+x^6+x^5," +
                " x^9+x^8+x^7+x^6+x^5, x^9+x^4, x^9+x^8+x^4, x^9+x^7+x^4, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^9+x^8+x^6+x^4, x^9+x^7+x^6+x^4, x^9+x^8+x^7+x^6+x^4, x^9+x^5+x^4, x^9+x^8+x^5+x^4," +
                " x^9+x^7+x^5+x^4, x^9+x^8+x^7+x^5+x^4, x^9+x^6+x^5+x^4, x^9+x^8+x^6+x^5+x^4, x^9+x^7+x^6+x^5+x^4," +
                " x^9+x^8+x^7+x^6+x^5+x^4, x^9+x^3, x^9+x^8+x^3, x^9+x^7+x^3, x^9+x^8+x^7+x^3, x^9+x^6+x^3," +
                " x^9+x^8+x^6+x^3, x^9+x^7+x^6+x^3, x^9+x^8+x^7+x^6+x^3, x^9+x^5+x^3, x^9+x^8+x^5+x^3," +
                " x^9+x^7+x^5+x^3, x^9+x^8+x^7+x^5+x^3, x^9+x^6+x^5+x^3, x^9+x^8+x^6+x^5+x^3, x^9+x^7+x^6+x^5+x^3," +
                " x^9+x^8+x^7+x^6+x^5+x^3, x^9+x^4+x^3, x^9+x^8+x^4+x^3]");
    }

    @Test
    public void testPolynomialsAtLeast() {
        aeqit(take(50, P.polynomialsAtLeast(-1)),
                "[0, 1, -1, x, 2, -2, 3, x^2, -3, x+1, 4, -4, -x, 5, -5, 2*x, 6, x^3, -6, -x+1, 7, x^2+x, -7, 2*x+1," +
                " 8, -8, 9, -9, x-1, 10, -10, 11, x^2+1, -11, x+2, 12, x^4, -12, -x-1, 13, -13, 2*x-1, 14, x^3+x^2," +
                " -14, -x+2, 15, x^2+x+1, -15, 2*x+2]");
        aeqit(take(50, P.polynomialsAtLeast(0)),
                "[1, -1, x, 2, -2, 3, x^2, -3, x+1, 4, -4, -x, 5, -5, 2*x, 6, x^3, -6, -x+1, 7, x^2+x, -7, 2*x+1, 8," +
                " -8, 9, -9, x-1, 10, -10, 11, x^2+1, -11, x+2, 12, x^4, -12, -x-1, 13, -13, 2*x-1, 14, x^3+x^2," +
                " -14, -x+2, 15, x^2+x+1, -15, 2*x+2, 16]");
        aeqit(take(50, P.polynomialsAtLeast(1)),
                "[x, x^2, x+1, -x, 2*x, x^3, -x+1, x^2+x, 2*x+1, x-1, x^2+1, x+2, x^4, -x-1, 2*x-1, x^3+x^2, -x+2," +
                " x^2+x+1, 2*x+2, -2*x, -x^2, 3*x, -2*x+1, 2*x^2, 3*x+1, -3*x, -x^2+x, 4*x, x^3+x, -3*x+1, 2*x^2+x," +
                " 4*x+1, x^5, -2*x-1, -x^2+1, 3*x-1, -2*x+2, 2*x^2+1, 3*x+2, x^4+x^3, -3*x-1, -x^2+x+1, 4*x-1," +
                " x^3+x^2+x, -3*x+2, 2*x^2+x+1, 4*x+2, x-2, x^2-x, x+3]");
        aeqit(take(50, P.polynomialsAtLeast(2)),
                "[x^2, x^3, x^2+x, x^2+1, x^4, x^3+x^2, x^2+x+1, -x^2, 2*x^2, -x^2+x, x^3+x, 2*x^2+x, x^5, -x^2+1," +
                " 2*x^2+1, x^4+x^3, -x^2+x+1, x^3+x^2+x, 2*x^2+x+1, x^2-x, x^3+1, x^2+2*x, x^2-x+1, x^4+x^2," +
                " x^3+x^2+1, x^2+2*x+1, x^6, -x^2-x, 2*x^2-x, -x^2+2*x, x^3+x+1, 2*x^2+2*x, x^5+x^4, -x^2-x+1," +
                " 2*x^2-x+1, x^4+x^3+x^2, -x^2+2*x+1, x^3+x^2+x+1, 2*x^2+2*x+1, -x^3, x^2-1, 2*x^3, x^2+x-1," +
                " -x^3+x^2, x^2+2, x^4+x, 2*x^3+x^2, x^2+x+2, -x^2-1, -x^3+x]");
        aeqit(take(50, P.polynomialsAtLeast(9)),
                "[x^9, x^10, x^9+x^8, x^9+x^7, x^11, x^10+x^9, x^9+x^8+x^7, x^9+x^6, x^10+x^8, x^9+x^8+x^6, x^12," +
                " x^9+x^7+x^6, x^11+x^10, x^10+x^9+x^8, x^9+x^8+x^7+x^6, x^9+x^5, x^10+x^7, x^9+x^8+x^5," +
                " x^9+x^7+x^5, x^11+x^9, x^10+x^9+x^7, x^9+x^8+x^7+x^5, x^13, x^9+x^6+x^5, x^10+x^8+x^7," +
                " x^9+x^8+x^6+x^5, x^12+x^11, x^9+x^7+x^6+x^5, x^11+x^10+x^9, x^10+x^9+x^8+x^7, x^9+x^8+x^7+x^6+x^5," +
                " x^9+x^4, x^10+x^6, x^9+x^8+x^4, x^9+x^7+x^4, x^11+x^8, x^10+x^9+x^6, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^10+x^8+x^6, x^9+x^8+x^6+x^4, x^12+x^10, x^9+x^7+x^6+x^4, x^11+x^10+x^8, x^10+x^9+x^8+x^6," +
                " x^9+x^8+x^7+x^6+x^4, x^14, x^9+x^5+x^4, x^10+x^7+x^6, x^9+x^8+x^5+x^4]");
    }

    @Test
    public void testPolynomials() {
        aeqit(take(50, P.polynomials()),
                "[0, 1, -1, x, 2, -2, 3, x^2, -3, x+1, 4, -4, -x, 5, -5, 2*x, 6, x^3, -6, -x+1, 7, x^2+x, -7, 2*x+1," +
                " 8, -8, 9, -9, x-1, 10, -10, 11, x^2+1, -11, x+2, 12, x^4, -12, -x-1, 13, -13, 2*x-1, 14, x^3+x^2," +
                " -14, -x+2, 15, x^2+x+1, -15, 2*x+2]");
    }

    @Test
    public void testPrimitivePolynomials_int() {
        aeqit(P.primitivePolynomials(-1), "[]");
        aeqit(P.primitivePolynomials(0), "[1]");
        aeqit(take(50, P.primitivePolynomials(1)),
                "[x, x+1, 2*x+1, x-1, x+2, 2*x-1, 3*x+1, 4*x+1, 3*x-1, 3*x+2, 4*x-1, x-2, x+3, 2*x+3, x-3, x+4," +
                " 2*x-3, 3*x-2, 4*x+3, 3*x+4, 4*x-3, 5*x+1, 6*x+1, 5*x-1, 5*x+2, 6*x-1, 7*x+1, 8*x+1, 7*x-1, 7*x+2," +
                " 8*x-1, 5*x-2, 5*x+3, 5*x-3, 5*x+4, 7*x-2, 7*x+3, 8*x+3, 7*x-3, 7*x+4, 8*x-3, x-4, x+5, 2*x+5, x-5," +
                " x+6, 2*x-5, 3*x-4, 3*x+5, 4*x+5]");
        aeqit(take(50, P.primitivePolynomials(2)),
                "[x^2, x^2+x, x^2+1, x^2+x+1, 2*x^2+x, 2*x^2+1, 2*x^2+x+1, x^2-x, x^2+2*x, x^2-x+1, x^2+2*x+1," +
                " 2*x^2-x, 2*x^2-x+1, 2*x^2+2*x+1, x^2-1, x^2+x-1, x^2+2, x^2+x+2, 2*x^2-1, 2*x^2+x-1, 2*x^2+x+2," +
                " x^2-x-1, x^2+2*x-1, x^2-x+2, x^2+2*x+2, 2*x^2-x-1, 2*x^2+2*x-1, 2*x^2-x+2, 3*x^2+x, 3*x^2+1," +
                " 3*x^2+x+1, 4*x^2+x, 4*x^2+1, 4*x^2+x+1, 3*x^2-x, 3*x^2+2*x, 3*x^2-x+1, 3*x^2+2*x+1, 4*x^2-x," +
                " 4*x^2-x+1, 4*x^2+2*x+1, 3*x^2-1, 3*x^2+x-1, 3*x^2+2, 3*x^2+x+2, 4*x^2-1, 4*x^2+x-1, 4*x^2+x+2," +
                " 3*x^2-x-1, 3*x^2+2*x-1]");
        aeqit(take(50, P.primitivePolynomials(9)),
                "[x^9, x^9+x^8, x^9+x^7, x^9+x^8+x^7, x^9+x^6, x^9+x^8+x^6, x^9+x^7+x^6, x^9+x^8+x^7+x^6, x^9+x^5," +
                " x^9+x^8+x^5, x^9+x^7+x^5, x^9+x^8+x^7+x^5, x^9+x^6+x^5, x^9+x^8+x^6+x^5, x^9+x^7+x^6+x^5," +
                " x^9+x^8+x^7+x^6+x^5, x^9+x^4, x^9+x^8+x^4, x^9+x^7+x^4, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^9+x^8+x^6+x^4, x^9+x^7+x^6+x^4, x^9+x^8+x^7+x^6+x^4, x^9+x^5+x^4, x^9+x^8+x^5+x^4," +
                " x^9+x^7+x^5+x^4, x^9+x^8+x^7+x^5+x^4, x^9+x^6+x^5+x^4, x^9+x^8+x^6+x^5+x^4, x^9+x^7+x^6+x^5+x^4," +
                " x^9+x^8+x^7+x^6+x^5+x^4, x^9+x^3, x^9+x^8+x^3, x^9+x^7+x^3, x^9+x^8+x^7+x^3, x^9+x^6+x^3," +
                " x^9+x^8+x^6+x^3, x^9+x^7+x^6+x^3, x^9+x^8+x^7+x^6+x^3, x^9+x^5+x^3, x^9+x^8+x^5+x^3," +
                " x^9+x^7+x^5+x^3, x^9+x^8+x^7+x^5+x^3, x^9+x^6+x^5+x^3, x^9+x^8+x^6+x^5+x^3, x^9+x^7+x^6+x^5+x^3," +
                " x^9+x^8+x^7+x^6+x^5+x^3, x^9+x^4+x^3, x^9+x^8+x^4+x^3]");
    }

    @Test
    public void testPrimitivePolynomialsAtLeast() {
        aeqit(take(50, P.primitivePolynomialsAtLeast(-1)),
                "[1, x, x^2, x+1, x^3, x^2+x, 2*x+1, x-1, x^2+1, x+2, x^4, 2*x-1, x^3+x^2, x^2+x+1, 3*x+1, x^3+x," +
                " 2*x^2+x, 4*x+1, x^5, 3*x-1, 2*x^2+1, 3*x+2, x^4+x^3, 4*x-1, x^3+x^2+x, 2*x^2+x+1, x-2, x^2-x, x+3," +
                " x^3+1, x^2+2*x, 2*x+3, x-3, x^2-x+1, x+4, x^4+x^2, 2*x-3, x^3+x^2+1, x^2+2*x+1, x^6, 3*x-2," +
                " 2*x^2-x, x^3+x+1, 4*x+3, x^5+x^4, 2*x^2-x+1, 3*x+4, x^4+x^3+x^2, 4*x-3, x^3+x^2+x+1]");
        aeqit(take(50, P.primitivePolynomialsAtLeast(0)),
                "[1, x, x^2, x+1, x^3, x^2+x, 2*x+1, x-1, x^2+1, x+2, x^4, 2*x-1, x^3+x^2, x^2+x+1, 3*x+1, x^3+x," +
                " 2*x^2+x, 4*x+1, x^5, 3*x-1, 2*x^2+1, 3*x+2, x^4+x^3, 4*x-1, x^3+x^2+x, 2*x^2+x+1, x-2, x^2-x, x+3," +
                " x^3+1, x^2+2*x, 2*x+3, x-3, x^2-x+1, x+4, x^4+x^2, 2*x-3, x^3+x^2+1, x^2+2*x+1, x^6, 3*x-2," +
                " 2*x^2-x, x^3+x+1, 4*x+3, x^5+x^4, 2*x^2-x+1, 3*x+4, x^4+x^3+x^2, 4*x-3, x^3+x^2+x+1]");
        aeqit(take(50, P.primitivePolynomialsAtLeast(1)),
                "[x, x^2, x+1, x^3, x^2+x, 2*x+1, x-1, x^2+1, x+2, x^4, 2*x-1, x^3+x^2, x^2+x+1, 3*x+1, x^3+x," +
                " 2*x^2+x, 4*x+1, x^5, 3*x-1, 2*x^2+1, 3*x+2, x^4+x^3, 4*x-1, x^3+x^2+x, 2*x^2+x+1, x-2, x^2-x, x+3," +
                " x^3+1, x^2+2*x, 2*x+3, x-3, x^2-x+1, x+4, x^4+x^2, 2*x-3, x^3+x^2+1, x^2+2*x+1, x^6, 3*x-2," +
                " 2*x^2-x, x^3+x+1, 4*x+3, x^5+x^4, 2*x^2-x+1, 3*x+4, x^4+x^3+x^2, 4*x-3, x^3+x^2+x+1, 2*x^2+2*x+1]");
        aeqit(take(50, P.primitivePolynomialsAtLeast(2)),
                "[x^2, x^3, x^2+x, x^2+1, x^4, x^3+x^2, x^2+x+1, x^3+x, 2*x^2+x, x^5, 2*x^2+1, x^4+x^3, x^3+x^2+x," +
                " 2*x^2+x+1, x^2-x, x^3+1, x^2+2*x, x^2-x+1, x^4+x^2, x^3+x^2+1, x^2+2*x+1, x^6, 2*x^2-x, x^3+x+1," +
                " x^5+x^4, 2*x^2-x+1, x^4+x^3+x^2, x^3+x^2+x+1, 2*x^2+2*x+1, x^2-1, x^2+x-1, x^2+2, x^4+x," +
                " 2*x^3+x^2, x^2+x+2, 2*x^2-1, 2*x^3+x, 2*x^2+x-1, x^5+x^3, x^4+x^3+x, 2*x^3+x^2+x, 2*x^2+x+2, x^7," +
                " x^2-x-1, 2*x^3+1, x^2+2*x-1, x^2-x+2, x^4+x^2+x, 2*x^3+x^2+1, x^2+2*x+2]");
        aeqit(take(50, P.primitivePolynomialsAtLeast(9)),
                "[x^9, x^10, x^9+x^8, x^9+x^7, x^11, x^10+x^9, x^9+x^8+x^7, x^9+x^6, x^10+x^8, x^9+x^8+x^6, x^12," +
                " x^9+x^7+x^6, x^11+x^10, x^10+x^9+x^8, x^9+x^8+x^7+x^6, x^9+x^5, x^10+x^7, x^9+x^8+x^5," +
                " x^9+x^7+x^5, x^11+x^9, x^10+x^9+x^7, x^9+x^8+x^7+x^5, x^13, x^9+x^6+x^5, x^10+x^8+x^7," +
                " x^9+x^8+x^6+x^5, x^12+x^11, x^9+x^7+x^6+x^5, x^11+x^10+x^9, x^10+x^9+x^8+x^7, x^9+x^8+x^7+x^6+x^5," +
                " x^9+x^4, x^10+x^6, x^9+x^8+x^4, x^9+x^7+x^4, x^11+x^8, x^10+x^9+x^6, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^10+x^8+x^6, x^9+x^8+x^6+x^4, x^12+x^10, x^9+x^7+x^6+x^4, x^11+x^10+x^8, x^10+x^9+x^8+x^6," +
                " x^9+x^8+x^7+x^6+x^4, x^14, x^9+x^5+x^4, x^10+x^7+x^6, x^9+x^8+x^5+x^4]");
    }

    @Test
    public void testPrimitivePolynomials() {
        aeqit(take(50, P.primitivePolynomials()),
                "[1, x, x^2, x+1, x^3, x^2+x, 2*x+1, x-1, x^2+1, x+2, x^4, 2*x-1, x^3+x^2, x^2+x+1, 3*x+1, x^3+x," +
                " 2*x^2+x, 4*x+1, x^5, 3*x-1, 2*x^2+1, 3*x+2, x^4+x^3, 4*x-1, x^3+x^2+x, 2*x^2+x+1, x-2, x^2-x, x+3," +
                " x^3+1, x^2+2*x, 2*x+3, x-3, x^2-x+1, x+4, x^4+x^2, 2*x-3, x^3+x^2+1, x^2+2*x+1, x^6, 3*x-2," +
                " 2*x^2-x, x^3+x+1, 4*x+3, x^5+x^4, 2*x^2-x+1, 3*x+4, x^4+x^3+x^2, 4*x-3, x^3+x^2+x+1]");
    }

    @Test
    public void testRationalPolynomials_int() {
        aeqit(P.rationalPolynomials(-1), "[0]");
        aeqit(take(50, P.rationalPolynomials(0)),
                "[1, 1/2, 1/3, 1/4, -1, -1/2, 2, -1/3, -1/4, 2/3, 1/5, 1/6, 1/7, 1/8, -1/5, -1/6, 2/5, -1/7, -1/8," +
                " 2/7, -2, 3, 3/2, -2/3, 3/4, -3, -3/2, 4, -3/4, 4/3, -2/5, 3/5, -2/7, 3/7, 3/8, -3/5, 4/5, -3/7," +
                " -3/8, 4/7, 1/9, 1/10, 1/11, 1/12, -1/9, -1/10, 2/9, -1/11, -1/12, 2/11]");
        aeqit(take(50, P.rationalPolynomials(1)),
                "[x, x+1, 1/2*x, 1/3*x, 1/2*x+1, 1/3*x+1, x+1/2, x+1/3, 1/2*x+1/2, 1/3*x+1/2, 1/2*x+1/3, 1/3*x+1/3," +
                " 1/4*x, -x, 1/4*x+1, -x+1, -1/2*x, 2*x, -1/2*x+1, 2*x+1, 1/4*x+1/2, -x+1/2, 1/4*x+1/3, -x+1/3," +
                " -1/2*x+1/2, 2*x+1/2, -1/2*x+1/3, 2*x+1/3, x+1/4, x-1, 1/2*x+1/4, 1/3*x+1/4, 1/2*x-1, 1/3*x-1," +
                " x-1/2, x+2, 1/2*x-1/2, 1/3*x-1/2, 1/2*x+2, 1/3*x+2, 1/4*x+1/4, -x+1/4, 1/4*x-1, -x-1, -1/2*x+1/4," +
                " 2*x+1/4, -1/2*x-1, 2*x-1, 1/4*x-1/2, -x-1/2]");
        aeqit(take(50, P.rationalPolynomials(2)),
                "[x^2, x^2+x, x^2+1, x^2+x+1, 1/2*x^2, 1/3*x^2, 1/2*x^2+x, 1/3*x^2+x, 1/2*x^2+1, 1/3*x^2+1," +
                " 1/2*x^2+x+1, 1/3*x^2+x+1, x^2+1/2*x, x^2+1/3*x, x^2+1/2*x+1, x^2+1/3*x+1, 1/2*x^2+1/2*x," +
                " 1/3*x^2+1/2*x, 1/2*x^2+1/3*x, 1/3*x^2+1/3*x, 1/2*x^2+1/2*x+1, 1/3*x^2+1/2*x+1, 1/2*x^2+1/3*x+1," +
                " 1/3*x^2+1/3*x+1, x^2+1/2, x^2+x+1/2, x^2+1/3, x^2+x+1/3, 1/2*x^2+1/2, 1/3*x^2+1/2, 1/2*x^2+x+1/2," +
                " 1/3*x^2+x+1/2, 1/2*x^2+1/3, 1/3*x^2+1/3, 1/2*x^2+x+1/3, 1/3*x^2+x+1/3, x^2+1/2*x+1/2," +
                " x^2+1/3*x+1/2, x^2+1/2*x+1/3, x^2+1/3*x+1/3, 1/2*x^2+1/2*x+1/2, 1/3*x^2+1/2*x+1/2," +
                " 1/2*x^2+1/3*x+1/2, 1/3*x^2+1/3*x+1/2, 1/2*x^2+1/2*x+1/3, 1/3*x^2+1/2*x+1/3, 1/2*x^2+1/3*x+1/3," +
                " 1/3*x^2+1/3*x+1/3, 1/4*x^2, -x^2]");
        aeqit(take(50, P.rationalPolynomials(9)),
                "[x^9, x^9+x^8, x^9+x^7, x^9+x^8+x^7, x^9+x^6, x^9+x^8+x^6, x^9+x^7+x^6, x^9+x^8+x^7+x^6, x^9+x^5," +
                " x^9+x^8+x^5, x^9+x^7+x^5, x^9+x^8+x^7+x^5, x^9+x^6+x^5, x^9+x^8+x^6+x^5, x^9+x^7+x^6+x^5," +
                " x^9+x^8+x^7+x^6+x^5, x^9+x^4, x^9+x^8+x^4, x^9+x^7+x^4, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^9+x^8+x^6+x^4, x^9+x^7+x^6+x^4, x^9+x^8+x^7+x^6+x^4, x^9+x^5+x^4, x^9+x^8+x^5+x^4," +
                " x^9+x^7+x^5+x^4, x^9+x^8+x^7+x^5+x^4, x^9+x^6+x^5+x^4, x^9+x^8+x^6+x^5+x^4, x^9+x^7+x^6+x^5+x^4," +
                " x^9+x^8+x^7+x^6+x^5+x^4, x^9+x^3, x^9+x^8+x^3, x^9+x^7+x^3, x^9+x^8+x^7+x^3, x^9+x^6+x^3," +
                " x^9+x^8+x^6+x^3, x^9+x^7+x^6+x^3, x^9+x^8+x^7+x^6+x^3, x^9+x^5+x^3, x^9+x^8+x^5+x^3," +
                " x^9+x^7+x^5+x^3, x^9+x^8+x^7+x^5+x^3, x^9+x^6+x^5+x^3, x^9+x^8+x^6+x^5+x^3, x^9+x^7+x^6+x^5+x^3," +
                " x^9+x^8+x^7+x^6+x^5+x^3, x^9+x^4+x^3, x^9+x^8+x^4+x^3]");
    }

    @Test
    public void testRationalPolynomialsAtLeast() {
        aeqit(take(50, P.rationalPolynomialsAtLeast(-1)),
                "[0, 1, 1/2, x, 1/3, 1/4, -1, x^2, -1/2, x+1, 2, -1/3, 1/2*x, -1/4, 2/3, 1/3*x, 1/5, x^3, 1/6," +
                " 1/2*x+1, 1/7, x^2+x, 1/8, 1/3*x+1, -1/5, -1/6, 2/5, -1/7, x+1/2, -1/8, 2/7, -2, x^2+1, 3, x+1/3," +
                " 3/2, x^4, -2/3, 1/2*x+1/2, 3/4, -3, 1/3*x+1/2, -3/2, x^3+x^2, 4, 1/2*x+1/3, -3/4, x^2+x+1, 4/3," +
                " 1/3*x+1/3]");
        aeqit(take(50, P.rationalPolynomialsAtLeast(0)),
                "[1, 1/2, x, 1/3, 1/4, -1, x^2, -1/2, x+1, 2, -1/3, 1/2*x, -1/4, 2/3, 1/3*x, 1/5, x^3, 1/6, 1/2*x+1," +
                " 1/7, x^2+x, 1/8, 1/3*x+1, -1/5, -1/6, 2/5, -1/7, x+1/2, -1/8, 2/7, -2, x^2+1, 3, x+1/3, 3/2, x^4," +
                " -2/3, 1/2*x+1/2, 3/4, -3, 1/3*x+1/2, -3/2, x^3+x^2, 4, 1/2*x+1/3, -3/4, x^2+x+1, 4/3, 1/3*x+1/3," +
                " -2/5]");
        aeqit(take(50, P.rationalPolynomialsAtLeast(1)),
                "[x, x^2, x+1, 1/2*x, 1/3*x, x^3, 1/2*x+1, x^2+x, 1/3*x+1, x+1/2, x^2+1, x+1/3, x^4, 1/2*x+1/2," +
                " 1/3*x+1/2, x^3+x^2, 1/2*x+1/3, x^2+x+1, 1/3*x+1/3, 1/4*x, 1/2*x^2, -x, 1/4*x+1, 1/3*x^2, -x+1," +
                " -1/2*x, 1/2*x^2+x, 2*x, x^3+x, -1/2*x+1, 1/3*x^2+x, 2*x+1, x^5, 1/4*x+1/2, 1/2*x^2+1, -x+1/2," +
                " 1/4*x+1/3, 1/3*x^2+1, -x+1/3, x^4+x^3, -1/2*x+1/2, 1/2*x^2+x+1, 2*x+1/2, x^3+x^2+x, -1/2*x+1/3," +
                " 1/3*x^2+x+1, 2*x+1/3, x+1/4, x^2+1/2*x, x-1]");
        aeqit(take(50, P.rationalPolynomialsAtLeast(2)),
                "[x^2, x^3, x^2+x, x^2+1, x^4, x^3+x^2, x^2+x+1, 1/2*x^2, 1/3*x^2, 1/2*x^2+x, x^3+x, 1/3*x^2+x, x^5," +
                " 1/2*x^2+1, 1/3*x^2+1, x^4+x^3, 1/2*x^2+x+1, x^3+x^2+x, 1/3*x^2+x+1, x^2+1/2*x, x^3+1, x^2+1/3*x," +
                " x^2+1/2*x+1, x^4+x^2, x^3+x^2+1, x^2+1/3*x+1, x^6, 1/2*x^2+1/2*x, 1/3*x^2+1/2*x, 1/2*x^2+1/3*x," +
                " x^3+x+1, 1/3*x^2+1/3*x, x^5+x^4, 1/2*x^2+1/2*x+1, 1/3*x^2+1/2*x+1, x^4+x^3+x^2, 1/2*x^2+1/3*x+1," +
                " x^3+x^2+x+1, 1/3*x^2+1/3*x+1, 1/2*x^3, x^2+1/2, 1/3*x^3, x^2+x+1/2, 1/2*x^3+x^2, x^2+1/3, x^4+x," +
                " 1/3*x^3+x^2, x^2+x+1/3, 1/2*x^2+1/2, 1/2*x^3+x]");
        aeqit(take(50, P.rationalPolynomialsAtLeast(9)),
                "[x^9, x^10, x^9+x^8, x^9+x^7, x^11, x^10+x^9, x^9+x^8+x^7, x^9+x^6, x^10+x^8, x^9+x^8+x^6, x^12," +
                " x^9+x^7+x^6, x^11+x^10, x^10+x^9+x^8, x^9+x^8+x^7+x^6, x^9+x^5, x^10+x^7, x^9+x^8+x^5," +
                " x^9+x^7+x^5, x^11+x^9, x^10+x^9+x^7, x^9+x^8+x^7+x^5, x^13, x^9+x^6+x^5, x^10+x^8+x^7," +
                " x^9+x^8+x^6+x^5, x^12+x^11, x^9+x^7+x^6+x^5, x^11+x^10+x^9, x^10+x^9+x^8+x^7, x^9+x^8+x^7+x^6+x^5," +
                " x^9+x^4, x^10+x^6, x^9+x^8+x^4, x^9+x^7+x^4, x^11+x^8, x^10+x^9+x^6, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^10+x^8+x^6, x^9+x^8+x^6+x^4, x^12+x^10, x^9+x^7+x^6+x^4, x^11+x^10+x^8, x^10+x^9+x^8+x^6," +
                " x^9+x^8+x^7+x^6+x^4, x^14, x^9+x^5+x^4, x^10+x^7+x^6, x^9+x^8+x^5+x^4]");
    }

    @Test
    public void testRationalPolynomials() {
        aeqit(take(50, P.rationalPolynomials()),
                "[0, 1, 1/2, x, 1/3, 1/4, -1, x^2, -1/2, x+1, 2, -1/3, 1/2*x, -1/4, 2/3, 1/3*x, 1/5, x^3, 1/6," +
                " 1/2*x+1, 1/7, x^2+x, 1/8, 1/3*x+1, -1/5, -1/6, 2/5, -1/7, x+1/2, -1/8, 2/7, -2, x^2+1, 3, x+1/3," +
                " 3/2, x^4, -2/3, 1/2*x+1/2, 3/4, -3, 1/3*x+1/2, -3/2, x^3+x^2, 4, 1/2*x+1/3, -3/4, x^2+x+1, 4/3," +
                " 1/3*x+1/3]");
    }

    @Test
    public void testMonicRationalPolynomials_int() {
        aeqit(P.monicRationalPolynomials(-1), "[]");
        aeqit(P.monicRationalPolynomials(0), "[1]");
        aeqit(take(50, P.monicRationalPolynomials(1)),
                "[x, x+1, x+1/2, x-1, x+2, x-1/2, x+1/3, x+1/4, x-1/3, x+2/3, x-1/4, x-2, x+3, x+3/2, x-3, x+4," +
                " x-3/2, x-2/3, x+3/4, x+4/3, x-3/4, x+1/5, x+1/6, x-1/5, x+2/5, x-1/6, x+1/7, x+1/8, x-1/7, x+2/7," +
                " x-1/8, x-2/5, x+3/5, x-3/5, x+4/5, x-2/7, x+3/7, x+3/8, x-3/7, x+4/7, x-3/8, x-4, x+5, x+5/2, x-5," +
                " x+6, x-5/2, x-4/3, x+5/3, x+5/4]");
        aeqit(take(50, P.monicRationalPolynomials(2)),
                "[x^2, x^2+x, x^2+1, x^2+x+1, x^2+1/2*x, x^2+1/2, x^2+1/2*x+1/2, x^2-x, x^2+2*x, x^2-x+1, x^2+2*x+1," +
                " x^2-1/2*x, x^2-1/2*x+1/2, x^2+x+1/2, x^2-1, x^2+x-1, x^2+2, x^2+x+2, x^2-1/2, x^2+1/2*x-1/2," +
                " x^2+1/2*x+1, x^2-x-1, x^2+2*x-1, x^2-x+2, x^2+2*x+2, x^2-1/2*x-1/2, x^2+x-1/2, x^2-1/2*x+1," +
                " x^2+1/3*x, x^2+1/3, x^2+1/3*x+1/3, x^2+1/4*x, x^2+1/4, x^2+1/4*x+1/4, x^2-1/3*x, x^2+2/3*x," +
                " x^2-1/3*x+1/3, x^2+2/3*x+1/3, x^2-1/4*x, x^2-1/4*x+1/4, x^2+1/2*x+1/4, x^2-1/3, x^2+1/3*x-1/3," +
                " x^2+2/3, x^2+1/3*x+2/3, x^2-1/4, x^2+1/4*x-1/4, x^2+1/4*x+1/2, x^2-1/3*x-1/3, x^2+2/3*x-1/3]");
        aeqit(take(50, P.monicRationalPolynomials(9)),
                "[x^9, x^9+x^8, x^9+x^7, x^9+x^8+x^7, x^9+x^6, x^9+x^8+x^6, x^9+x^7+x^6, x^9+x^8+x^7+x^6, x^9+x^5," +
                " x^9+x^8+x^5, x^9+x^7+x^5, x^9+x^8+x^7+x^5, x^9+x^6+x^5, x^9+x^8+x^6+x^5, x^9+x^7+x^6+x^5," +
                " x^9+x^8+x^7+x^6+x^5, x^9+x^4, x^9+x^8+x^4, x^9+x^7+x^4, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^9+x^8+x^6+x^4, x^9+x^7+x^6+x^4, x^9+x^8+x^7+x^6+x^4, x^9+x^5+x^4, x^9+x^8+x^5+x^4," +
                " x^9+x^7+x^5+x^4, x^9+x^8+x^7+x^5+x^4, x^9+x^6+x^5+x^4, x^9+x^8+x^6+x^5+x^4, x^9+x^7+x^6+x^5+x^4," +
                " x^9+x^8+x^7+x^6+x^5+x^4, x^9+x^3, x^9+x^8+x^3, x^9+x^7+x^3, x^9+x^8+x^7+x^3, x^9+x^6+x^3," +
                " x^9+x^8+x^6+x^3, x^9+x^7+x^6+x^3, x^9+x^8+x^7+x^6+x^3, x^9+x^5+x^3, x^9+x^8+x^5+x^3," +
                " x^9+x^7+x^5+x^3, x^9+x^8+x^7+x^5+x^3, x^9+x^6+x^5+x^3, x^9+x^8+x^6+x^5+x^3, x^9+x^7+x^6+x^5+x^3," +
                " x^9+x^8+x^7+x^6+x^5+x^3, x^9+x^4+x^3, x^9+x^8+x^4+x^3]");
    }

    @Test
    public void testMonicRationalPolynomialsAtLeast() {
        aeqit(take(50, P.monicRationalPolynomialsAtLeast(-1)),
                "[1, x, x^2, x+1, x^3, x^2+x, x+1/2, x-1, x^2+1, x+2, x^4, x-1/2, x^3+x^2, x^2+x+1, x+1/3, x^3+x," +
                " x^2+1/2*x, x+1/4, x^5, x-1/3, x^2+1/2, x+2/3, x^4+x^3, x-1/4, x^3+x^2+x, x^2+1/2*x+1/2, x-2," +
                " x^2-x, x+3, x^3+1, x^2+2*x, x+3/2, x-3, x^2-x+1, x+4, x^4+x^2, x-3/2, x^3+x^2+1, x^2+2*x+1, x^6," +
                " x-2/3, x^2-1/2*x, x^3+x+1, x+3/4, x^5+x^4, x^2-1/2*x+1/2, x+4/3, x^4+x^3+x^2, x-3/4, x^3+x^2+x+1]");
        aeqit(take(50, P.monicRationalPolynomialsAtLeast(0)),
                "[1, x, x^2, x+1, x^3, x^2+x, x+1/2, x-1, x^2+1, x+2, x^4, x-1/2, x^3+x^2, x^2+x+1, x+1/3, x^3+x," +
                " x^2+1/2*x, x+1/4, x^5, x-1/3, x^2+1/2, x+2/3, x^4+x^3, x-1/4, x^3+x^2+x, x^2+1/2*x+1/2, x-2," +
                " x^2-x, x+3, x^3+1, x^2+2*x, x+3/2, x-3, x^2-x+1, x+4, x^4+x^2, x-3/2, x^3+x^2+1, x^2+2*x+1, x^6," +
                " x-2/3, x^2-1/2*x, x^3+x+1, x+3/4, x^5+x^4, x^2-1/2*x+1/2, x+4/3, x^4+x^3+x^2, x-3/4, x^3+x^2+x+1]");
        aeqit(take(50, P.monicRationalPolynomialsAtLeast(1)),
                "[x, x^2, x+1, x^3, x^2+x, x+1/2, x-1, x^2+1, x+2, x^4, x-1/2, x^3+x^2, x^2+x+1, x+1/3, x^3+x," +
                " x^2+1/2*x, x+1/4, x^5, x-1/3, x^2+1/2, x+2/3, x^4+x^3, x-1/4, x^3+x^2+x, x^2+1/2*x+1/2, x-2," +
                " x^2-x, x+3, x^3+1, x^2+2*x, x+3/2, x-3, x^2-x+1, x+4, x^4+x^2, x-3/2, x^3+x^2+1, x^2+2*x+1, x^6," +
                " x-2/3, x^2-1/2*x, x^3+x+1, x+3/4, x^5+x^4, x^2-1/2*x+1/2, x+4/3, x^4+x^3+x^2, x-3/4, x^3+x^2+x+1," +
                " x^2+x+1/2]");
        aeqit(take(50, P.monicRationalPolynomialsAtLeast(2)),
                "[x^2, x^3, x^2+x, x^2+1, x^4, x^3+x^2, x^2+x+1, x^3+x, x^2+1/2*x, x^5, x^2+1/2, x^4+x^3, x^3+x^2+x," +
                " x^2+1/2*x+1/2, x^2-x, x^3+1, x^2+2*x, x^2-x+1, x^4+x^2, x^3+x^2+1, x^2+2*x+1, x^6, x^2-1/2*x," +
                " x^3+x+1, x^5+x^4, x^2-1/2*x+1/2, x^4+x^3+x^2, x^3+x^2+x+1, x^2+x+1/2, x^2-1, x^2+x-1, x^2+2," +
                " x^4+x, x^3+1/2*x^2, x^2+x+2, x^2-1/2, x^3+1/2*x, x^2+1/2*x-1/2, x^5+x^3, x^4+x^3+x," +
                " x^3+1/2*x^2+1/2*x, x^2+1/2*x+1, x^7, x^2-x-1, x^3+1/2, x^2+2*x-1, x^2-x+2, x^4+x^2+x," +
                " x^3+1/2*x^2+1/2, x^2+2*x+2]");
        aeqit(take(50, P.monicRationalPolynomialsAtLeast(9)),
                "[x^9, x^10, x^9+x^8, x^9+x^7, x^11, x^10+x^9, x^9+x^8+x^7, x^9+x^6, x^10+x^8, x^9+x^8+x^6, x^12," +
                " x^9+x^7+x^6, x^11+x^10, x^10+x^9+x^8, x^9+x^8+x^7+x^6, x^9+x^5, x^10+x^7, x^9+x^8+x^5," +
                " x^9+x^7+x^5, x^11+x^9, x^10+x^9+x^7, x^9+x^8+x^7+x^5, x^13, x^9+x^6+x^5, x^10+x^8+x^7," +
                " x^9+x^8+x^6+x^5, x^12+x^11, x^9+x^7+x^6+x^5, x^11+x^10+x^9, x^10+x^9+x^8+x^7, x^9+x^8+x^7+x^6+x^5," +
                " x^9+x^4, x^10+x^6, x^9+x^8+x^4, x^9+x^7+x^4, x^11+x^8, x^10+x^9+x^6, x^9+x^8+x^7+x^4, x^9+x^6+x^4," +
                " x^10+x^8+x^6, x^9+x^8+x^6+x^4, x^12+x^10, x^9+x^7+x^6+x^4, x^11+x^10+x^8, x^10+x^9+x^8+x^6," +
                " x^9+x^8+x^7+x^6+x^4, x^14, x^9+x^5+x^4, x^10+x^7+x^6, x^9+x^8+x^5+x^4]");
    }

    @Test
    public void testMonicRationalPolynomials() {
        aeqit(take(50, P.monicRationalPolynomials()),
                "[1, x, x^2, x+1, x^3, x^2+x, x+1/2, x-1, x^2+1, x+2, x^4, x-1/2, x^3+x^2, x^2+x+1, x+1/3, x^3+x," +
                " x^2+1/2*x, x+1/4, x^5, x-1/3, x^2+1/2, x+2/3, x^4+x^3, x-1/4, x^3+x^2+x, x^2+1/2*x+1/2, x-2," +
                " x^2-x, x+3, x^3+1, x^2+2*x, x+3/2, x-3, x^2-x+1, x+4, x^4+x^2, x-3/2, x^3+x^2+1, x^2+2*x+1, x^6," +
                " x-2/3, x^2-1/2*x, x^3+x+1, x+3/4, x^5+x^4, x^2-1/2*x+1/2, x+4/3, x^4+x^3+x^2, x-3/4, x^3+x^2+x+1]");
    }

    @Test
    public void testEquals() {
        //noinspection EqualsWithItself
        assertTrue(P.equals(P));
        //noinspection ObjectEqualsNull
        assertFalse(P.equals(null));
        //noinspection EqualsBetweenInconvertibleTypes
        assertFalse(P.equals("hello"));
    }

    @Test
    public void testHashCode() {
        aeq(P.hashCode(), 0);
    }

    @Test
    public void testToString() {
        aeq(P, "QBarExhaustiveProvider");
    }
}
