package mho.qbar.iterableProviders;

import mho.qbar.objects.Interval;
import mho.qbar.objects.Rational;
import org.jetbrains.annotations.NotNull;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

import static mho.wheels.iterables.IterableUtils.*;
import static mho.wheels.iterables.IterableUtils.take;
import static mho.wheels.testing.Testing.*;
import static org.junit.Assert.fail;

public class QBarRandomProviderTest {
    private static QBarRandomProvider P;
    private static final int DEFAULT_SAMPLE_SIZE = 1000000;
    private static final int DEFAULT_TOP_COUNT = 10;
    private static final int TINY_LIMIT = 20;

    @Before
    public void initialize() {
        P = QBarRandomProvider.example();
    }

    private static void rationalHelper(
            @NotNull Iterable<Rational> xs,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        List<Rational> sample = toList(take(DEFAULT_SAMPLE_SIZE, xs));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfRationals(sample), sampleMean);
        aeq(meanOfIntegers(toList(map(Rational::bitLength, sample))), bitSizeMean);
    }

    private static void positiveRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).positiveRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void positiveRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).positiveRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testPositiveRationals() {
        positiveRationals_helper(
                4,
                "[13/3, 2/3, 4, 1, 1/3, 3/2, 1, 2, 1, 1, 1, 10, 1/4, 3/37, 5, 19/7, 1, 5, 2, 1, ...]",
                "{1=280202, 1/3=70044, 1/2=69897, 3=69577, 2=69553, 1/7=17626, 6=17571, 1/5=17503, 7=17495," +
                " 1/6=17466}",
                10.860889705920956,
                3.7748699999675455
        );
        positiveRationals_helper(
                16,
                "[101/477, 47968091191/7657, 2987/26823934, 1/3136, 1/3257, 1573, 155099/7851, 1/62, 50, 229/7," +
                " 29127/4, 43/49, 8/1123, 1/23, 3695/774847, 58603, 1/5, 11600056/37, 1/3694, 1/4746, ...]",
                "{1=22456, 1/2=9907, 3=9863, 1/3=9831, 2=9734, 2/3=4413, 7=4354, 5=4337, 4=4308, 6=4304}",
                1.5280779930028705E26,
                15.179776000001873
        );
        positiveRationals_helper(
                32,
                "[9899036265412338/152003, 7132138827349/97061240400, 7232, 46647/245, 229/7653406, 8040/23," +
                " 3695/1186506164475983568433185976, 8548/3, 339/1252, 1484539043/512405011, 1172461306, 3694," +
                " 24/11897, 283/276178219972100476, 161/3, 129705/254, 681426167316, 123689/93052542," +
                " 22617278052260/649827, 1191961124/48206182232889, ...]",
                "{1=6058, 1/3=2855, 2=2792, 3=2788, 1/2=2765, 1/6=1361, 1/7=1334, 3/2=1332, 6=1328, 2/3=1326}",
                9.896359254271288E54,
                30.97147700002087
        );
        positiveRationals_fail_helper(3);
        positiveRationals_fail_helper(0);
        positiveRationals_fail_helper(-1);
    }

    private static void negativeRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).negativeRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void negativeRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).negativeRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNegativeRationals() {
        negativeRationals_helper(
                4,
                "[-13/3, -2/3, -4, -1, -1/3, -3/2, -1, -2, -1, -1, -1, -10, -1/4, -3/37, -5, -19/7, -1, -5, -2, -1," +
                " ...]",
                "{-1=280202, -1/3=70044, -1/2=69897, -3=69577, -2=69553, -1/7=17626, -6=17571, -1/5=17503, -7=17495," +
                " -1/6=17466}",
                -10.860889705920956,
                3.076134999987636
        );
        negativeRationals_helper(
                16,
                "[-101/477, -47968091191/7657, -2987/26823934, -1/3136, -1/3257, -1573, -155099/7851, -1/62, -50," +
                " -229/7, -29127/4, -43/49, -8/1123, -1/23, -3695/774847, -58603, -1/5, -11600056/37, -1/3694," +
                " -1/4746, ...]",
                "{-1=22456, -1/2=9907, -3=9863, -1/3=9831, -2=9734, -2/3=4413, -7=4354, -5=4337, -4=4308, -6=4304}",
                -1.5280779930028705E26,
                14.921714999996217
        );
        negativeRationals_helper(
                32,
                "[-9899036265412338/152003, -7132138827349/97061240400, -7232, -46647/245, -229/7653406, -8040/23," +
                " -3695/1186506164475983568433185976, -8548/3, -339/1252, -1484539043/512405011, -1172461306, -3694," +
                " -24/11897, -283/276178219972100476, -161/3, -129705/254, -681426167316, -123689/93052542," +
                " -22617278052260/649827, -1191961124/48206182232889, ...]",
                "{-1=6058, -1/3=2855, -2=2792, -3=2788, -1/2=2765, -1/6=1361, -1/7=1334, -3/2=1332, -6=1328," +
                " -2/3=1326}",
                -9.896359254271288E54,
                30.830768000021912
        );
        negativeRationals_fail_helper(3);
        negativeRationals_fail_helper(0);
        negativeRationals_fail_helper(-1);
    }

    private static void nonzeroRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).nonzeroRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void nonzeroRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).nonzeroRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNonzeroRationals() {
        nonzeroRationals_helper(
                4,
                "[13, 477, 2, -4/7, 3, -4/3, 1, 3, -1, -1/2, -1, -1, 3/5, 4, 37/3, 1/11, -7/3, -5/4, -1, 1/2, ...]",
                "{1=140351, -1=139626, 3=35357, -1/3=35061, -1/2=35060, -3=35047, 1/3=35025, -2=34780, 1/2=34766," +
                " 2=34614}",
                0.39737016317796847,
                3.426249999979211
        );
        nonzeroRationals_helper(
                16,
                "[101/221, -47968091191/3561, -8, 6/41, -5488/1498961957, -2987/10046718, 1/1088, -1/1209," +
                " -1573/417243, -7851/94, -50, 30/13, 229/3, -29127/2, -43/17, 8/611, -1/15, -3695/512703," +
                " 5/29233410216, -58603, ...]",
                "{-1=11368, 1=11271, 2=5000, -2=4967, 3=4964, 1/3=4961, -1/3=4940, -1/2=4915, -3=4869, 1/2=4788}",
                -7.897237376910241E21,
                15.045427999999136
        );
        nonzeroRationals_helper(
                32,
                "[-9899036265412338/86467, 7132138827349/62701502032, 245/6, -21/94, -23/6, -3/211, -1252/67," +
                " 512405011/635590394, 1/1646, -1/49190556, 11897/155, 276178219972100476/13, 1096372481030472/83," +
                " 213/1696, 4022/64169, 1/58153, -649827/1020934, -2425/655090212, -48206182232889/594890818283," +
                " 23/87, ...]",
                "{-1=2976, 1=2934, 1/2=1490, -1/2=1445, 2=1431, 3=1428, -2=1407, 1/3=1395, -3=1392, -1/3=1376}",
                -3.8257920286392754E59,
                30.89843900002121
        );
        nonzeroRationals_fail_helper(3);
        nonzeroRationals_fail_helper(0);
        nonzeroRationals_fail_helper(-1);
    }

    private static void rationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).rationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void rationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).rationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationals() {
        rationals_helper(
                3,
                "[5, 221, 1, -2/7, 1, -2/3, 1, 0, -1/2, 0, 0, 5/6, 0, 2, -3/4, 0, 0, 1/6, -1/15, -1, ...]",
                "{0=359511, 1=89773, -1=89208, -1/3=22557, 1/2=22522, 1/3=22427, 2=22383, 3=22327, -1/2=22286," +
                " -3=22204}",
                -0.4022959305532067,
                2.556453999989655
        );
        rationals_helper(
                16,
                "[1663770364/7657, 41/3440, -243045529/1963, -409/7232, -122/89563, -3/94, 712/27, 5/4, -47/15, 1/2," +
                " -70/512703, 25056015375/8548, -1/211, -16/67, -4/9, -1/7790, -238/29, 78/155, 1/7, -1/712, ...]",
                "{0=22141, -1=9897, 1=9827, 2=4478, -3=4434, -2=4383, 3=4373, -1/3=4346, 1/3=4304, -1/2=4302}",
                1.6133070384934913E30,
                15.700139999991512
        );
        rationals_helper(
                32,
                "[6499102/152003, -5488/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211," +
                " 12/35, -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3," +
                " -1/122038962404, -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, ...]",
                "{0=6058, 1=2808, -1=2781, -2=1355, -3=1351, -1/2=1317, 1/3=1315, -1/3=1300, 3=1285, 1/2=1261}",
                -3.784942556617747E71,
                31.76238700002468
        );
        rationals_fail_helper(2);
        rationals_fail_helper(0);
        rationals_fail_helper(-1);
    }

    private static void nonNegativeRationalsLessThanOne_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(meanBitSize).nonNegativeRationalsLessThanOne(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void nonNegativeRationalsLessThanOne_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).nonNegativeRationalsLessThanOne();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNonNegativeRationalsLessThanOne() {
        nonNegativeRationalsLessThanOne_helper(
                4,
                "[8/13, 442/989, 0, 1/2, 0, 3/4, 2/3, 1/6, 0, 0, 0, 0, 2/3, 3/4, 0, 1/2, 0, 0, 0, 0, ...]",
                "{0=500028, 1/2=124628, 2/3=62572, 1/3=62482, 5/6=15761, 1/4=15674, 3/4=15561, 1/6=15561, 1/5=7903," +
                " 2/5=7900}",
                0.25006056333167953,
                3.025887000003045
        );
        nonNegativeRationalsLessThanOne_helper(
                16,
                "[35/101, 49/85, 11249606917/30788222007, 1066/1513, 3/4, 28/41, 341/368, 48080394/425220133, 9/22," +
                " 461/939, 1253959/4626764, 83/1088, 4628/7353, 86/549, 411058/417243, 71/1707, 27/94, 1/2, 1/4," +
                " 5/18, ...]",
                "{0=124174, 1/2=54456, 1/3=27699, 2/3=27325, 1/6=11968, 5/6=11913, 1/4=11899, 3/4=11887, 1/5=6086," +
                " 4/5=6018}",
                0.43779120952560585,
                14.830439999963309
        );
        nonNegativeRationalsLessThanOne_helper(
                32,
                "[737254238953015/9899036265412338, 35108/53699, 1607/6492, 6/13, 2145256597502/2734092316245," +
                " 10167173779/28341763664, 83/1088, 71842947/100875512, 4672789/246145874, 7676/46647, 87/88, 5/6," +
                " 3/4, 1/2, 6/13, 19/94, 3133471/3459102, 139/276, 811/8040, 2/3, ...]",
                "{0=62709, 1/2=29030, 2/3=14666, 1/3=14624, 1/4=6878, 5/6=6871, 3/4=6824, 1/6=6779, 2/5=3532," +
                " 3/5=3453}",
                0.4684325154820962,
                30.684408000047792
        );
        nonNegativeRationalsLessThanOne_fail_helper(3);
        nonNegativeRationalsLessThanOne_fail_helper(0);
        nonNegativeRationalsLessThanOne_fail_helper(-1);
    }

    private static void rangeUp_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rangeUp(Rational.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rangeUp_Rational_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rangeUp(Rational.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRangeUp_Rational() {
        rangeUp_Rational_helper(
                4,
                "0",
                "[2/3, 1, 0, 1/2, 1, 1/3, 4, 2, 1, 0, 0, 10, 4/3, 13/5, 19/7, 1/5, 2, 0, 1/2, 2/3, ...]",
                "{0=249425, 1=210197, 1/3=52787, 2=52379, 1/2=52243, 3=52158, 1/7=13246, 6=13230, 2/3=13226," +
                " 1/5=13202}",
                7.230916348852299,
                3.083149999986345
        );
        rangeUp_Rational_helper(
                32,
                "0",
                "[3143636824356594/152003, 7132138827349/97061240400, 1088, 46647/245, 229/7653406, 8040/23," +
                " 3695/1186506164475983568433185976, 2404/3, 1484539043/512405011, 367154938, 622, 24/11897," +
                " 113/276178219972100476, 5/1096372481030472, 129705/254, 148690709030, 18659/93052542," +
                " 5025092007844/649827, 496646/2425, 1694402446059/23, ...]",
                "{0=31320, 1=5903, 3=2709, 1/3=2639, 1/2=2625, 2=2623, 4=1312, 7=1311, 1/5=1275, 1/7=1271}",
                2.30035078376369E59,
                30.041032000029976
        );
        rangeUp_Rational_helper(
                4,
                "1",
                "[5/3, 2, 1, 3/2, 2, 4/3, 5, 3, 2, 1, 1, 11, 7/3, 18/5, 26/7, 6/5, 3, 1, 3/2, 5/3, ...]",
                "{1=249425, 2=210197, 4/3=52787, 3=52379, 3/2=52243, 4=52158, 8/7=13246, 7=13230, 5/3=13226," +
                " 6/5=13202}",
                8.230916348876454,
                4.258722999974617
        );
        rangeUp_Rational_helper(
                32,
                "1",
                "[3143636824508597/152003, 7229200067749/97061240400, 1089, 46892/245, 7653635/7653406, 8063/23," +
                " 1186506164475983568433189671/1186506164475983568433185976, 2407/3, 1996944054/512405011," +
                " 367154939, 623, 11921/11897, 276178219972100589/276178219972100476," +
                " 1096372481030477/1096372481030472, 129959/254, 148690709031, 93071201/93052542," +
                " 5025092657671/649827, 499071/2425, 1694402446082/23, ...]",
                "{1=31320, 2=5903, 4=2709, 4/3=2639, 3/2=2625, 3=2623, 5=1312, 8=1311, 6/5=1275, 8/7=1271}",
                2.30035078376369E59,
                37.66929400000752
        );
        rangeUp_Rational_helper(
                4,
                "2",
                "[8/3, 3, 2, 5/2, 3, 7/3, 6, 4, 3, 2, 2, 12, 10/3, 23/5, 33/7, 11/5, 4, 2, 5/2, 8/3, ...]",
                "{2=249425, 3=210197, 7/3=52787, 4=52379, 5/2=52243, 5=52158, 15/7=13246, 8=13230, 8/3=13226," +
                " 11/5=13202}",
                9.23091634887471,
                4.784373000006757
        );
        rangeUp_Rational_helper(
                32,
                "2",
                "[3143636824660600/152003, 7326261308149/97061240400, 1090, 47137/245, 15307041/7653406, 8086/23," +
                " 2373012328951967136866375647/1186506164475983568433185976, 2410/3, 2509349065/512405011," +
                " 367154940, 624, 23818/11897, 552356439944201065/276178219972100476," +
                " 2192744962060949/1096372481030472, 130213/254, 148690709032, 186123743/93052542," +
                " 5025093307498/649827, 501496/2425, 1694402446105/23, ...]",
                "{2=31320, 3=5903, 5=2709, 7/3=2639, 5/2=2625, 4=2623, 6=1312, 9=1311, 11/5=1275, 15/7=1271}",
                2.30035078376369E59,
                38.19239900001273
        );
        rangeUp_Rational_helper(
                4,
                "-2",
                "[-4/3, -1, -2, -3/2, -1, -5/3, 2, 0, -1, -2, -2, 8, -2/3, 3/5, 5/7, -9/5, 0, -2, -3/2, -4/3, ...]",
                "{-2=249425, -1=210197, -5/3=52787, 0=52379, -3/2=52243, 1=52158, -13/7=13246, 4=13230, -4/3=13226," +
                " -9/5=13202}",
                5.230916348808398,
                3.5134459999869696
        );
        rangeUp_Rational_helper(
                32,
                "-2",
                "[3143636824052588/152003, 6938016346549/97061240400, 1086, 46157/245, -15306583/7653406, 7994/23," +
                " -2373012328951967136866368257/1186506164475983568433185976, 2398/3, 459729021/512405011," +
                " 367154936, 620, -23770/11897, -552356439944200839/276178219972100476," +
                " -2192744962060939/1096372481030472, 129197/254, 148690709028, -186086425/93052542," +
                " 5025090708190/649827, 491796/2425, 1694402446013/23, ...]",
                "{-2=31320, -1=5903, 1=2709, -5/3=2639, -3/2=2625, 0=2623, 2=1312, 5=1311, -9/5=1275, -13/7=1271}",
                2.30035078376369E59,
                37.884783000012376
        );
        rangeUp_Rational_helper(
                4,
                "5/3",
                "[7/3, 8/3, 5/3, 13/6, 8/3, 2, 17/3, 11/3, 8/3, 5/3, 5/3, 35/3, 3, 64/15, 92/21, 28/15, 11/3, 5/3," +
                " 13/6, 7/3, ...]",
                "{5/3=249425, 8/3=210197, 2=52787, 11/3=52379, 13/6=52243, 14/3=52158, 38/21=13246, 23/3=13230," +
                " 7/3=13226, 28/15=13202}",
                8.89758301551532,
                6.751185999974823
        );
        rangeUp_Rational_helper(
                32,
                "5/3",
                "[9430910473829797/456009, 7293907561349/97061240400, 3269/3, 141166/735, 38267717/22960218," +
                " 24235/69, 5932530822379917842165940965/3559518493427950705299557928, 803, 7015642184/1537215033," +
                " 1101464819/3, 1871/3, 59557/35691, 1380891099860502719/828534659916301428," +
                " 1827287468384125/1096372481030472, 390385/762, 446072127095/3, 155106229/93052542," +
                " 5025093090889/649827, 1502063/7275, 5083207338292/69, ...]",
                "{5/3=31320, 8/3=5903, 14/3=2709, 2=2639, 13/6=2625, 11/3=2623, 17/3=1312, 26/3=1311, 28/15=1275," +
                " 38/21=1271}",
                2.30035078376369E59,
                40.232672000039464
        );
        rangeUp_Rational_helper(
                4,
                "-5/3",
                "[-1, -2/3, -5/3, -7/6, -2/3, -4/3, 7/3, 1/3, -2/3, -5/3, -5/3, 25/3, -1/3, 14/15, 22/21, -22/15," +
                " 1/3, -5/3, -7/6, -1, ...]",
                "{-5/3=249425, -2/3=210197, -4/3=52787, 1/3=52379, -7/6=52243, 4/3=52158, -32/21=13246, 13/3=13230," +
                " -1=13226, -22/15=13202}",
                5.564249682144554,
                5.546619999987452
        );
        rangeUp_Rational_helper(
                32,
                "-5/3",
                "[9430910472309767/456009, 2323456697783/32353746800, 3259/3, 138716/735, -38266343/22960218," +
                " 24005/69, -5932530822379917842165918795/3559518493427950705299557928, 2399/3," +
                " 1891592074/1537215033, 1101464809/3, 1861/3, -59413/35691," +
                " -1380891099860502041/828534659916301428, -609095822794705/365457493676824, 387845/762," +
                " 446072127085/3, -51689637/31017514, 5025090924799/649827, 1477813/7275, 5083207338062/69, ...]",
                "{-5/3=31320, -2/3=5903, 4/3=2709, -4/3=2639, -7/6=2625, 1/3=2623, 7/3=1312, 16/3=1311, -22/15=1275," +
                " -32/21=1271}",
                2.30035078376369E59,
                39.95053100004396
        );
        rangeUp_Rational_fail_helper(3, "0");
        rangeUp_Rational_fail_helper(-1, "0");
    }

    private static void rangeDown_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rangeDown(Rational.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rangeDown_Rational_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rangeDown(Rational.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRangeDown_Rational() {
        rangeDown_Rational_helper(
                4,
                "0",
                "[-2/3, -1, 0, -1/2, -1, -1/3, -4, -2, -1, 0, 0, -10, -4/3, -13/5, -19/7, -1/5, -2, 0, -1/2, -2/3," +
                " ...]",
                "{0=249425, -1=210197, -1/3=52787, -2=52379, -1/2=52243, -3=52158, -1/7=13246, -6=13230, -2/3=13226," +
                " -1/5=13202}",
                -7.230916348852299,
                2.558149999990092
        );
        rangeDown_Rational_helper(
                32,
                "0",
                "[-3143636824356594/152003, -7132138827349/97061240400, -1088, -46647/245, -229/7653406, -8040/23," +
                " -3695/1186506164475983568433185976, -2404/3, -1484539043/512405011, -367154938, -622, -24/11897," +
                " -113/276178219972100476, -5/1096372481030472, -129705/254, -148690709030, -18659/93052542," +
                " -5025092007844/649827, -496646/2425, -1694402446059/23, ...]",
                "{0=31320, -1=5903, -3=2709, -1/3=2639, -1/2=2625, -2=2623, -4=1312, -7=1311, -1/5=1275, -1/7=1271}",
                -2.30035078376369E59,
                29.905172000029964
        );
        rangeDown_Rational_helper(
                4,
                "1",
                "[1/3, 0, 1, 1/2, 0, 2/3, -3, -1, 0, 1, 1, -9, -1/3, -8/5, -12/7, 4/5, -1, 1, 1/2, 1/3, ...]",
                "{1=249425, 0=210197, 2/3=52787, -1=52379, 1/2=52243, -2=52158, 6/7=13246, -5=13230, 1/3=13226," +
                " 4/5=13202}",
                -6.230916348820594,
                3.242670999983001
        );
        rangeDown_Rational_helper(
                32,
                "1",
                "[-3143636824204591/152003, -7035077586949/97061240400, -1087, -46402/245, 7653177/7653406," +
                " -8017/23, 1186506164475983568433182281/1186506164475983568433185976, -2401/3," +
                " -972134032/512405011, -367154937, -621, 11873/11897, 276178219972100363/276178219972100476," +
                " 1096372481030467/1096372481030472, -129451/254, -148690709029, 93033883/93052542," +
                " -5025091358017/649827, -494221/2425, -1694402446036/23, ...]",
                "{1=31320, 0=5903, -2=2709, 2/3=2639, 1/2=2625, -1=2623, -3=1312, -6=1311, 4/5=1275, 6/7=1271}",
                -2.30035078376369E59,
                37.394290000005086
        );
        rangeDown_Rational_helper(
                4,
                "2",
                "[4/3, 1, 2, 3/2, 1, 5/3, -2, 0, 1, 2, 2, -8, 2/3, -3/5, -5/7, 9/5, 0, 2, 3/2, 4/3, ...]",
                "{2=249425, 1=210197, 5/3=52787, 0=52379, 3/2=52243, -1=52158, 13/7=13246, -4=13230, 4/3=13226," +
                " 9/5=13202}",
                -5.230916348808398,
                3.9209559999779886
        );
        rangeDown_Rational_helper(
                32,
                "2",
                "[-3143636824052588/152003, -6938016346549/97061240400, -1086, -46157/245, 15306583/7653406," +
                " -7994/23, 2373012328951967136866368257/1186506164475983568433185976, -2398/3," +
                " -459729021/512405011, -367154936, -620, 23770/11897, 552356439944200839/276178219972100476," +
                " 2192744962060939/1096372481030472, -129197/254, -148690709028, 186086425/93052542," +
                " -5025090708190/649827, -491796/2425, -1694402446013/23, ...]",
                "{2=31320, 1=5903, -1=2709, 5/3=2639, 3/2=2625, 0=2623, -2=1312, -5=1311, 9/5=1275, 13/7=1271}",
                -2.30035078376369E59,
                37.91937900000891
        );
        rangeDown_Rational_helper(
                4,
                "-2",
                "[-8/3, -3, -2, -5/2, -3, -7/3, -6, -4, -3, -2, -2, -12, -10/3, -23/5, -33/7, -11/5, -4, -2, -5/2," +
                " -8/3, ...]",
                "{-2=249425, -3=210197, -7/3=52787, -4=52379, -5/2=52243, -5=52158, -15/7=13246, -8=13230," +
                " -8/3=13226, -11/5=13202}",
                -9.23091634887471,
                4.444851999983567
        );
        rangeDown_Rational_helper(
                32,
                "-2",
                "[-3143636824660600/152003, -7326261308149/97061240400, -1090, -47137/245, -15307041/7653406," +
                " -8086/23, -2373012328951967136866375647/1186506164475983568433185976, -2410/3," +
                " -2509349065/512405011, -367154940, -624, -23818/11897, -552356439944201065/276178219972100476," +
                " -2192744962060949/1096372481030472, -130213/254, -148690709032, -186123743/93052542," +
                " -5025093307498/649827, -501496/2425, -1694402446105/23, ...]",
                "{-2=31320, -3=5903, -5=2709, -7/3=2639, -5/2=2625, -4=2623, -6=1312, -9=1311, -11/5=1275," +
                " -15/7=1271}",
                -2.30035078376369E59,
                38.15192300001582
        );
        rangeDown_Rational_helper(
                4,
                "5/3",
                "[1, 2/3, 5/3, 7/6, 2/3, 4/3, -7/3, -1/3, 2/3, 5/3, 5/3, -25/3, 1/3, -14/15, -22/21, 22/15, -1/3," +
                " 5/3, 7/6, 1, ...]",
                "{5/3=249425, 2/3=210197, 4/3=52787, -1/3=52379, 7/6=52243, -4/3=52158, 32/21=13246, -13/3=13230," +
                " 1=13226, 22/15=13202}",
                -5.564249682144554,
                5.7353909999435455
        );
        rangeDown_Rational_helper(
                32,
                "5/3",
                "[-9430910472309767/456009, -2323456697783/32353746800, -3259/3, -138716/735, 38266343/22960218," +
                " -24005/69, 5932530822379917842165918795/3559518493427950705299557928, -2399/3," +
                " -1891592074/1537215033, -1101464809/3, -1861/3, 59413/35691," +
                " 1380891099860502041/828534659916301428, 609095822794705/365457493676824, -387845/762," +
                " -446072127085/3, 51689637/31017514, -5025090924799/649827, -1477813/7275, -5083207338062/69, ...]",
                "{5/3=31320, 2/3=5903, -4/3=2709, 4/3=2639, 7/6=2625, -1/3=2623, -7/3=1312, -16/3=1311, 22/15=1275," +
                " 32/21=1271}",
                -2.30035078376369E59,
                39.956361000044275
        );
        rangeDown_Rational_helper(
                4,
                "-5/3",
                "[-7/3, -8/3, -5/3, -13/6, -8/3, -2, -17/3, -11/3, -8/3, -5/3, -5/3, -35/3, -3, -64/15, -92/21," +
                " -28/15, -11/3, -5/3, -13/6, -7/3, ...]",
                "{-5/3=249425, -8/3=210197, -2=52787, -11/3=52379, -13/6=52243, -14/3=52158, -38/21=13246," +
                " -23/3=13230, -7/3=13226, -28/15=13202}",
                -8.89758301551532,
                6.474602999953898
        );
        rangeDown_Rational_helper(
                32,
                "-5/3",
                "[-9430910473829797/456009, -7293907561349/97061240400, -3269/3, -141166/735, -38267717/22960218," +
                " -24235/69, -5932530822379917842165940965/3559518493427950705299557928, -803," +
                " -7015642184/1537215033, -1101464819/3, -1871/3, -59557/35691," +
                " -1380891099860502719/828534659916301428, -1827287468384125/1096372481030472, -390385/762," +
                " -446072127095/3, -155106229/93052542, -5025093090889/649827, -1502063/7275, -5083207338292/69, ...]",
                "{-5/3=31320, -8/3=5903, -14/3=2709, -2=2639, -13/6=2625, -11/3=2623, -17/3=1312, -26/3=1311," +
                " -28/15=1275, -38/21=1271}",
                -2.30035078376369E59,
                40.22005300004766
        );
        rangeDown_Rational_fail_helper(3, "0");
        rangeDown_Rational_fail_helper(-1, "0");
    }

    private static void range_Rational_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String b,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).range(Rational.read(a).get(), Rational.read(b).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void range_Rational_Rational_fail_helper(int scale, @NotNull String a, @NotNull String b) {
        try {
            P.withScale(scale).range(Rational.read(a).get(), Rational.read(b).get());
            fail();
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRange_Rational_Rational() {
        range_Rational_Rational_helper(
                4,
                "0",
                "0",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        range_Rational_Rational_helper(
                32,
                "0",
                "0",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        range_Rational_Rational_helper(
                4,
                "5/3",
                "5/3",
                "[5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3," +
                " 5/3, ...]",
                "{5/3=1000000}",
                1.6666666666766063,
                4.999999999895295
        );
        range_Rational_Rational_helper(
                32,
                "5/3",
                "5/3",
                "[5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3," +
                " 5/3, ...]",
                "{5/3=1000000}",
                1.6666666666766063,
                4.999999999895295
        );
        range_Rational_Rational_helper(
                4,
                "0",
                "1",
                "[1/3, 49/85, 1/2, 3/4, 1, 0, 0, 1, 2/3, 0, 3/4, 1/2, 0, 0, 1, 1/3, 9/10, 1, 11/69, 0, ...]",
                "{0=374651, 1=249663, 1/2=94086, 1/3=47193, 2/3=46703, 5/6=11928, 3/4=11697, 1/6=11650, 1/4=11621," +
                " 1/5=5962}",
                0.43764761498431315,
                2.771136999989421
        );
        range_Rational_Rational_helper(
                32,
                "0",
                "1",
                "[737254238953015/3143636824356594, 6793/10321, 59/1372, 2145256597502/2734092316245," +
                " 1577239187/6866927184, 83/320, 4734083/16989432, 4672789/44819282, 6429/13366, 23/24, 0, 1/2, 1," +
                " 6/13, 19/30, 550563/837662, 1/17, 811/8040, 5/18, 13/70, ...]",
                "{0=60249, 1=31400, 1/2=28169, 1/3=14195, 2/3=14135, 1/6=6697, 1/4=6685, 3/4=6615, 5/6=6604," +
                " 2/5=3437}",
                0.4855748611217715,
                29.795897000025235
        );
        range_Rational_Rational_helper(
                4,
                "-1",
                "0",
                "[-2/3, -36/85, -1/2, -1/4, 0, -1, -1, 0, -1/3, -1, -1/4, -1/2, -1, -1, 0, -2/3, -1/10, 0, -58/69," +
                " -1, ...]",
                "{-1=374651, 0=249663, -1/2=94086, -2/3=47193, -1/3=46703, -1/6=11928, -1/4=11697, -5/6=11650," +
                " -3/4=11621, -4/5=5962}",
                -0.562352385009498,
                2.2563019999857112
        );
        range_Rational_Rational_helper(
                32,
                "-1",
                "0",
                "[-2406382585403579/3143636824356594, -3528/10321, -1313/1372, -588835718743/2734092316245," +
                " -5289687997/6866927184, -237/320, -12255349/16989432, -40146493/44819282, -6937/13366, -1/24, -1," +
                " -1/2, 0, -7/13, -11/30, -287099/837662, -16/17, -7229/8040, -13/18, -57/70, ...]",
                "{-1=60249, 0=31400, -1/2=28169, -2/3=14195, -1/3=14135, -5/6=6697, -3/4=6685, -1/4=6615, -1/6=6604," +
                " -3/5=3437}",
                -0.5144251388771651,
                29.641497000022515
        );
        range_Rational_Rational_helper(
                4,
                "1/3",
                "1/2",
                "[7/18, 73/170, 5/12, 11/24, 1/2, 1/3, 1/3, 1/2, 4/9, 1/3, 11/24, 5/12, 1/3, 1/3, 1/2, 7/18, 29/60," +
                " 1/2, 149/414, 1/3, ...]",
                "{1/3=374651, 1/2=249663, 5/12=94086, 7/18=47193, 4/9=46703, 17/36=11928, 11/24=11697, 13/36=11650," +
                " 3/8=11621, 11/30=5962}",
                0.40627460249656705,
                5.237116000060525
        );
        range_Rational_Rational_helper(
                32,
                "1/3",
                "1/2",
                "[7024527887666203/18861820946139564, 9145/20642, 2803/8232, 3806720614996/8202276948735," +
                " 15311093555/41201563104, 241/640, 38712947/101936592, 94311353/268915692, 33161/80196, 71/144," +
                " 1/3, 5/12, 1/2, 16/39, 79/180, 2225887/5025972, 35/102, 16891/48240, 41/108, 51/140, ...]",
                "{1/3=60249, 1/2=31400, 5/12=28169, 7/18=14195, 4/9=14135, 13/36=6697, 3/8=6685, 11/24=6615," +
                " 17/36=6604, 2/5=3437}",
                0.41426247685353923,
                33.696076999997224
        );
        range_Rational_Rational_helper(
                4,
                "-1",
                "5/3",
                "[-1/9, 137/255, 1/3, 1, 5/3, -1, -1, 5/3, 7/9, -1, 1, 1/3, -1, -1, 5/3, -1/9, 7/5, 5/3, -119/207," +
                " -1, ...]",
                "{-1=374651, 5/3=249663, 1/3=94086, -1/9=47193, 7/9=46703, 11/9=11928, 1=11697, -5/9=11650," +
                " -1/3=11621, -7/15=5962}",
                0.1670603066320713,
                3.909987999996781
        );
        range_Rational_Rational_helper(
                32,
                "-1",
                "5/3",
                "[-1766438280722831/4715455236534891, 23381/30963, -911/1029, 8959775831281/8202276948735," +
                " -997858507/2575097694, -37/120, -1636954/6371037, -48537767/67228923, 1889/6683, 14/9, -1, 1/3," +
                " 5/3, 3/13, 31/45, 315253/418831, -43/51, -2204/3015, -7/27, -53/105, ...]",
                "{-1=60249, 5/3=31400, 1/3=28169, -1/9=14195, 7/9=14135, -5/9=6697, -1/3=6685, 1=6615, 11/9=6604," +
                " 1/15=3437}",
                0.29486629632591527,
                30.979623000057572
        );
        range_Rational_Rational_fail_helper(3, "0", "1");
        range_Rational_Rational_fail_helper(-1, "0", "1");
        range_Rational_Rational_fail_helper(4, "1", "0");
        range_Rational_Rational_fail_helper(4, "1/2", "1/3");
    }

    private static void intervalHelper(
            @NotNull Iterable<Interval> xs,
            @NotNull String output,
            @NotNull String topSampleCount,
            double bitSizeMean
    ) {
        List<Interval> sample = toList(take(DEFAULT_SAMPLE_SIZE, xs));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfIntegers(toList(map(Interval::bitLength, sample))), bitSizeMean);
    }

    private static void finitelyBoundedIntervals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double bitSizeMean
    ) {
        intervalHelper(P.withScale(meanBitSize).finitelyBoundedIntervals(), output, topSampleCount, bitSizeMean);
        P.reset();
    }

    private static void finitelyBoundedIntervals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).finitelyBoundedIntervals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testFinitelyBoundedIntervals() {
        finitelyBoundedIntervals_helper(
                6,
                "[[5, 221], [-1/2, 0], [0, 5/6], [0, 2], [-3/4, 0], [0, 1/6], [-14/3, 0], [-6, 0], [-1, 0]," +
                " [-16, -1/4], [0, 0], [0, 167/17], [0, 1], [0, 0], [0, 1/3], [-1, 1], [0, 10], [0, 0], [-5, 4/21]," +
                " [-1, 0], ...]",
                "{[0, 0]=224347, [0, 1]=55754, [-1, 0]=55558, [-1, 1]=14214, [0, 1/2]=14146, [1, 1]=14140," +
                " [-1/2, 0]=14088, [0, 3]=14072, [-3, 0]=14048, [-1, -1]=14002}",
                4.734174999983291
        );
        finitelyBoundedIntervals_helper(
                16,
                "[[-5/4, -1], [0, 1/2], [-1, 0], [-59/3, 1493/24932], [0, 3], [-6/1201, 5/19], [-24, -7/29], [0, 1]," +
                " [31/7787, 3/5], [1/21, 1/10], [-49/8, -2/937], [-3453, -10], [-739/31, 1/7], [-1/9, 3217/7]," +
                " [-5/11, 3/2], [-3, -2/13], [-14/3, 1/3], [-15, 1/87], [-42, 2/9], [-46/177, 11969], ...]",
                "{[0, 0]=11462, [-1, 0]=4695, [0, 1]=4595, [1, 1]=1879, [-1, -1]=1857, [0, 2]=1830, [-3, 0]=1828," +
                " [-2, 0]=1823, [-1, 1]=1805, [0, 1/2]=1791}",
                15.223063999997281
        );
        finitelyBoundedIntervals_helper(
                32,
                "[[-243045529/1963, -409/7232], [-47/15, 1/2], [-70/512703, 25056015375/8548], [-4/9, -1/7790]," +
                " [-238/29, 78/155], [-72/31, 1419/29086], [68578/49, 514016/3], [-2591362/23, 23]," +
                " [-1/122, 4266773419/17], [-455, -3656/177], [449/6, 3346], [0, 856/475357657], [-3, 3133/841]," +
                " [733/37, 2144/21], [-53/27, -15/53], [-2719/26, 5929/34], [3/332735, 26/5]," +
                " [-277/11, -1373/46121], [-3/19, 56820544/123], [-192790039594/15, 17/54], ...]",
                "{[0, 0]=1021, [-1, 0]=438, [0, 1]=419, [0, 2]=209, [0, 1/3]=208, [0, 1/2]=206, [-1/2, 0]=201," +
                " [-1, -1]=197, [0, 3]=195, [-1, 1]=190}",
                31.390569000011563
        );
        finitelyBoundedIntervals_fail_helper(5);
        finitelyBoundedIntervals_fail_helper(0);
        finitelyBoundedIntervals_fail_helper(-1);
    }

    private static void intervals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double bitSizeMean
    ) {
        intervalHelper(P.withScale(meanBitSize).intervals(), output, topSampleCount, bitSizeMean);
        P.reset();
    }

    private static void intervals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).intervals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testIntervals() {
        intervals_helper(
                6,
                "[[1, 13], [0, 0], (-Infinity, 0], (-Infinity, Infinity), [-1/2, 0], (-Infinity, Infinity)," +
                " [-3/4, 0], [1/6, Infinity), [0, Infinity), (-Infinity, 1], (-Infinity, -1], [-1, 0]," +
                " (-Infinity, 0], [0, 6], (-Infinity, Infinity), [0, Infinity), (-Infinity, -2], (-Infinity, 0]," +
                " (-Infinity, 0], (-Infinity, Infinity), ...]",
                "{(-Infinity, Infinity)=136618, (-Infinity, 0]=98468, [0, Infinity)=97756, [0, 0]=70368," +
                " (-Infinity, -1]=24761, (-Infinity, 1]=24665, [-1, Infinity)=24632, [1, Infinity)=24487," +
                " [0, 1]=17600, [-1, 0]=17450}",
                3.7168489999587586
        );
        intervals_helper(
                16,
                "[(-Infinity, 1/41], [-2/533, Infinity), [-221/3755, 1/18], (-Infinity, 2/13], [-1, Infinity)," +
                " [1493/24932, Infinity), (-Infinity, 1], [-1/6, 0], [0, 3], [-1/89, -1/1201], [3/19, 30/13]," +
                " [-1/29, 5/146], [-26/3, 0], (-Infinity, 1], [7/7787, 14/11], [3/5, 1], (-Infinity, 26]," +
                " [-49/8, 0], [31, Infinity), (-Infinity, -2/9], ...]",
                "{(-Infinity, Infinity)=25200, [0, Infinity)=13341, (-Infinity, 0]=13229, [0, 0]=7053," +
                " (-Infinity, -1]=5441, [-1, Infinity)=5387, (-Infinity, 1]=5376, [1, Infinity)=5369, [-1, 0]=2931," +
                " [0, 1]=2918}",
                12.581164000012107
        );
        intervals_helper(
                32,
                "[[-3/94, 5/4], [-31/15, 1/2], [-38/512703, 25056015375/8548], (-Infinity, -2/67], [-1/9, -1/7790]," +
                " [-15086/29, 410411/24], [1/7, 15017244/161], (-Infinity, -3/458722], [-10397738, -40/31]," +
                " [395/29086, 3217/571], [35810/49, 251872/3], [-1018498/23, 7], [-1/122, 4266773419/17]," +
                " [-584/177, 3346], (-Infinity, 23/475357657], [-3, -1/3], [573/841, 477/37], [-53/27, -3/53]," +
                " [-10/3, 3/25], [-1695/26, 3881/34], ...]",
                "{(-Infinity, Infinity)=6930, (-Infinity, 0]=2390, [0, Infinity)=2350, [1, Infinity)=1025," +
                " (-Infinity, -1]=1022, (-Infinity, 1]=1018, [-1, Infinity)=1006, [0, 0]=764, (-Infinity, 1/2]=496," +
                " (-Infinity, 2]=494}",
                28.125747000009007
        );
        intervals_fail_helper(5);
        intervals_fail_helper(0);
        intervals_fail_helper(-1);
    }

    private static void rationalsIn_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rationalsIn(Interval.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rationalsIn_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rationalsIn(Interval.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalsIn() {
        rationalsIn_helper(
                4,
                "[0, 0]",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        rationalsIn_helper(
                32,
                "[0, 0]",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        rationalsIn_helper(
                4,
                "[1, 1]",
                "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...]",
                "{1=1000000}",
                1.000000000007918,
                2.000000000015836
        );
        rationalsIn_helper(
                32,
                "[1, 1]",
                "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...]",
                "{1=1000000}",
                1.000000000007918,
                2.000000000015836
        );
        rationalsIn_helper(
                4,
                "(-Infinity, Infinity)",
                "[3, -1/5, 1, -5, 0, 0, 5/6, -53/69, 3/11, -89/4, 0, 0, -19/15, 0, 0, -1, -1/3, -1, -22, 0, ...]",
                "{0=224431, 1=75632, -1=74893, -3=25026, 3=24951, -2=24833, 2=24829, 1/2=18804, -1/2=18754," +
                " 1/3=18690}",
                4459.875622663981,
                3.6641639999936904
        );
        rationalsIn_helper(
                32,
                "(-Infinity, Infinity)",
                "[6499102/152003, -5488/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211," +
                " 12/35, -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3," +
                " -1/122038962404, -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, ...]",
                "{0=6058, 1=2808, -1=2781, -2=1355, -3=1351, -1/2=1317, 1/3=1315, -1/3=1300, 3=1285, 1/2=1261}",
                -3.784942556617747E71,
                31.76238700002468
        );
        rationalsIn_helper(
                4,
                "[1, 4]",
                "[2, 232/85, 5/2, 13/4, 4, 1, 1, 4, 3, 1, 13/4, 5/2, 1, 1, 4, 2, 37/10, 4, 34/23, 1, ...]",
                "{1=374651, 4=249663, 5/2=94086, 2=47193, 3=46703, 7/2=11928, 13/4=11697, 3/2=11650, 7/4=11621," +
                " 8/5=5962}",
                2.3129428449434144,
                4.068563999969932
        );
        rationalsIn_helper(
                32,
                "[1, 4]",
                "[1785133180405213/1047878941452198, 30700/10321, 1549/1372, 3056620702917/911364105415," +
                " 3866214915/2288975728, 569/320, 10397227/5663144, 58837649/44819282, 32653/13366, 31/8, 1, 5/2, 4," +
                " 31/13, 29/10, 2489351/837662, 20/17, 3491/2680, 11/6, 109/70, ...]",
                "{1=60249, 4=31400, 5/2=28169, 2=14195, 3=14135, 3/2=6697, 7/4=6685, 13/4=6615, 7/2=6604, 11/5=3437}",
                2.456724583363463,
                31.33094400000747
        );
        rationalsIn_helper(
                4,
                "(-Infinity, 1/2]",
                "[-1/6, -1/2, 1/2, 0, -1/2, 1/6, -7/2, -3/2, -1/2, 1/2, 1/2, -19/2, -5/6, -21/10, -31/14, 3/10," +
                " -3/2, 1/2, 0, -1/6, ...]",
                "{1/2=249425, -1/2=210197, 1/6=52787, -3/2=52379, 0=52243, -5/2=52158, 5/14=13246, -11/2=13230," +
                " -1/6=13226, 3/10=13202}",
                -6.7309163488312524,
                4.094009999979451
        );
        rationalsIn_helper(
                32,
                "(-Infinity, 1/2]",
                "[-6287273648561185/304006, -7083608207149/97061240400, -2175/2, -93049/490, 1913237/3826703," +
                " -16057/46, 593253082237991784216589293/1186506164475983568433185976, -4805/6," +
                " -2456673075/1024810022, -734309875/2, -1243/2, 11849/23794, 138089109986050125/276178219972100476," +
                " 548186240515231/1096372481030472, -64789/127, -297381418059/2, 23253806/46526271," +
                " -10050183365861/1299654, -990867/4850, -3388804892095/46, ...]",
                "{1/2=31320, -1/2=5903, -5/2=2709, 1/6=2639, 0=2625, -3/2=2623, -7/2=1312, -13/2=1311, 3/10=1275," +
                " 5/14=1271}",
                -2.30035078376369E59,
                37.9445340000085
        );
        rationalsIn_helper(
                4,
                "[1/2, Infinity)",
                "[7/6, 3/2, 1/2, 1, 3/2, 5/6, 9/2, 5/2, 3/2, 1/2, 1/2, 21/2, 11/6, 31/10, 45/14, 7/10, 5/2, 1/2, 1," +
                " 7/6, ...]",
                "{1/2=249425, 3/2=210197, 5/6=52787, 5/2=52379, 1=52243, 7/2=52158, 9/14=13246, 13/2=13230," +
                " 7/6=13226, 7/10=13202}",
                7.73091634876883,
                5.011827999992238
        );
        rationalsIn_helper(
                32,
                "[1/2, Infinity)",
                "[6287273648865191/304006, 7180669447549/97061240400, 2177/2, 93539/490, 1913466/3826703, 16103/46," +
                " 593253082237991784216596683/1186506164475983568433185976, 4811/6, 3481483097/1024810022," +
                " 734309877/2, 1245/2, 11945/23794, 138089109986050351/276178219972100476," +
                " 548186240515241/1096372481030472, 64916/127, 297381418061/2, 23272465/46526271," +
                " 10050184665515/1299654, 995717/4850, 3388804892141/46, ...]",
                "{1/2=31320, 3/2=5903, 7/2=2709, 5/6=2639, 1=2625, 5/2=2623, 9/2=1312, 15/2=1311, 7/10=1275," +
                " 9/14=1271}",
                2.30035078376369E59,
                38.21444000001194
        );
        rationalsIn_fail_helper(3, "[0, 0]");
        rationalsIn_fail_helper(-1, "[0, 0]");
    }

    private static double meanOfIntegers(@NotNull List<Integer> xs) {
        return sumDouble(map(i -> (double) i / DEFAULT_SAMPLE_SIZE, xs));
    }

    private static double meanOfRationals(@NotNull List<Rational> xs) {
        return sumDouble(map(r -> r.doubleValue() / DEFAULT_SAMPLE_SIZE, xs));
    }
}