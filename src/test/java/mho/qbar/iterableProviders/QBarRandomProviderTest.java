package mho.qbar.iterableProviders;

import mho.qbar.objects.Rational;
import org.jetbrains.annotations.NotNull;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

import static mho.wheels.iterables.IterableUtils.*;
import static mho.wheels.iterables.IterableUtils.take;
import static mho.wheels.testing.Testing.*;
import static org.junit.Assert.fail;

public class QBarRandomProviderTest {
    private static QBarRandomProvider P;
    private static final int DEFAULT_SAMPLE_SIZE = 1000000;
    private static final int DEFAULT_TOP_COUNT = 10;
    private static final int TINY_LIMIT = 20;

    @Before
    public void initialize() {
        P = QBarRandomProvider.example();
    }

    private static void rationalHelper(
            @NotNull Iterable<Rational> xs,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        List<Rational> sample = toList(take(DEFAULT_SAMPLE_SIZE, xs));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfRationals(sample), sampleMean);
        aeq(
                meanOfIntegers(
                        toList(map(r -> r.getNumerator().bitLength() + r.getDenominator().bitLength(), sample))
                ),
                bitSizeMean
        );
    }

    private static void positiveRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).positiveRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void positiveRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).positiveRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testPositiveRationals() {
        positiveRationals_helper(
                4,
                "[13/3, 2/3, 4, 1, 1/3, 3/2, 1, 2, 1, 1, 1, 10, 1/4, 3/37, 5, 19/7, 1, 5, 2, 1, ...]",
                "{1=280202, 1/3=70044, 1/2=69897, 3=69577, 2=69553, 1/7=17626, 6=17571, 1/5=17503, 7=17495," +
                " 1/6=17466}",
                10.860889705920956,
                3.7748699999675455
        );
        positiveRationals_helper(
                16,
                "[101/477, 47968091191/7657, 2987/26823934, 1/3136, 1/3257, 1573, 155099/7851, 1/62, 50, 229/7," +
                " 29127/4, 43/49, 8/1123, 1/23, 3695/774847, 58603, 1/5, 11600056/37, 1/3694, 1/4746, ...]",
                "{1=22456, 1/2=9907, 3=9863, 1/3=9831, 2=9734, 2/3=4413, 7=4354, 5=4337, 4=4308, 6=4304}",
                1.5280779930028705E26,
                15.179776000001873
        );
        positiveRationals_helper(
                32,
                "[9899036265412338/152003, 7132138827349/97061240400, 7232, 46647/245, 229/7653406, 8040/23," +
                " 3695/1186506164475983568433185976, 8548/3, 339/1252, 1484539043/512405011, 1172461306, 3694," +
                " 24/11897, 283/276178219972100476, 161/3, 129705/254, 681426167316, 123689/93052542," +
                " 22617278052260/649827, 1191961124/48206182232889, ...]",
                "{1=6058, 1/3=2855, 2=2792, 3=2788, 1/2=2765, 1/6=1361, 1/7=1334, 3/2=1332, 6=1328, 2/3=1326}",
                9.896359254271288E54,
                30.97147700002087
        );
        positiveRationals_fail_helper(3);
        positiveRationals_fail_helper(0);
        positiveRationals_fail_helper(-1);
    }

    private static void negativeRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).negativeRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void negativeRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).negativeRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNegativeRationals() {
        negativeRationals_helper(
                4,
                "[-13/3, -2/3, -4, -1, -1/3, -3/2, -1, -2, -1, -1, -1, -10, -1/4, -3/37, -5, -19/7, -1, -5, -2, -1," +
                " ...]",
                "{-1=280202, -1/3=70044, -1/2=69897, -3=69577, -2=69553, -1/7=17626, -6=17571, -1/5=17503, -7=17495," +
                " -1/6=17466}",
                -10.860889705920956,
                3.076134999987636
        );
        negativeRationals_helper(
                16,
                "[-101/477, -47968091191/7657, -2987/26823934, -1/3136, -1/3257, -1573, -155099/7851, -1/62, -50," +
                " -229/7, -29127/4, -43/49, -8/1123, -1/23, -3695/774847, -58603, -1/5, -11600056/37, -1/3694," +
                " -1/4746, ...]",
                "{-1=22456, -1/2=9907, -3=9863, -1/3=9831, -2=9734, -2/3=4413, -7=4354, -5=4337, -4=4308, -6=4304}",
                -1.5280779930028705E26,
                14.921714999996217
        );
        negativeRationals_helper(
                32,
                "[-9899036265412338/152003, -7132138827349/97061240400, -7232, -46647/245, -229/7653406, -8040/23," +
                " -3695/1186506164475983568433185976, -8548/3, -339/1252, -1484539043/512405011, -1172461306, -3694," +
                " -24/11897, -283/276178219972100476, -161/3, -129705/254, -681426167316, -123689/93052542," +
                " -22617278052260/649827, -1191961124/48206182232889, ...]",
                "{-1=6058, -1/3=2855, -2=2792, -3=2788, -1/2=2765, -1/6=1361, -1/7=1334, -3/2=1332, -6=1328," +
                " -2/3=1326}",
                -9.896359254271288E54,
                30.830768000021912
        );
        negativeRationals_fail_helper(3);
        negativeRationals_fail_helper(0);
        negativeRationals_fail_helper(-1);
    }

    private static void nonzeroRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).nonzeroRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void nonzeroRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).nonzeroRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNonzeroRationals() {
        nonzeroRationals_helper(
                4,
                "[13, 477, 2, -4/7, 3, -4/3, 1, 3, -1, -1/2, -1, -1, 3/5, 4, 37/3, 1/11, -7/3, -5/4, -1, 1/2, ...]",
                "{1=140351, -1=139626, 3=35357, -1/3=35061, -1/2=35060, -3=35047, 1/3=35025, -2=34780, 1/2=34766," +
                " 2=34614}",
                0.39737016317796847,
                3.426249999979211
        );
        nonzeroRationals_helper(
                16,
                "[101/221, -47968091191/3561, -8, 6/41, -5488/1498961957, -2987/10046718, 1/1088, -1/1209," +
                " -1573/417243, -7851/94, -50, 30/13, 229/3, -29127/2, -43/17, 8/611, -1/15, -3695/512703," +
                " 5/29233410216, -58603, ...]",
                "{-1=11368, 1=11271, 2=5000, -2=4967, 3=4964, 1/3=4961, -1/3=4940, -1/2=4915, -3=4869, 1/2=4788}",
                -7.897237376910241E21,
                15.045427999999136
        );
        nonzeroRationals_helper(
                32,
                "[-9899036265412338/86467, 7132138827349/62701502032, 245/6, -21/94, -23/6, -3/211, -1252/67," +
                " 512405011/635590394, 1/1646, -1/49190556, 11897/155, 276178219972100476/13, 1096372481030472/83," +
                " 213/1696, 4022/64169, 1/58153, -649827/1020934, -2425/655090212, -48206182232889/594890818283," +
                " 23/87, ...]",
                "{-1=2976, 1=2934, 1/2=1490, -1/2=1445, 2=1431, 3=1428, -2=1407, 1/3=1395, -3=1392, -1/3=1376}",
                -3.8257920286392754E59,
                30.89843900002121
        );
        nonzeroRationals_fail_helper(3);
        nonzeroRationals_fail_helper(0);
        nonzeroRationals_fail_helper(-1);
    }

    private static void rationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).rationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void rationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).rationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationals() {
        rationals_helper(
                3,
                "[5, 221, 1, -2/7, 1, -2/3, 1, 0, -1/2, 0, 0, 5/6, 0, 2, -3/4, 0, 0, 1/6, -1/15, -1, ...]",
                "{0=359511, 1=89773, -1=89208, -1/3=22557, 1/2=22522, 1/3=22427, 2=22383, 3=22327, -1/2=22286," +
                " -3=22204}",
                -0.4022959305532067,
                2.556453999989655
        );
        rationals_helper(
                16,
                "[1663770364/7657, 41/3440, -243045529/1963, -409/7232, -122/89563, -3/94, 712/27, 5/4, -47/15, 1/2," +
                " -70/512703, 25056015375/8548, -1/211, -16/67, -4/9, -1/7790, -238/29, 78/155, 1/7, -1/712, ...]",
                "{0=22141, -1=9897, 1=9827, 2=4478, -3=4434, -2=4383, 3=4373, -1/3=4346, 1/3=4304, -1/2=4302}",
                1.6133070384934913E30,
                15.700139999991512
        );
        rationals_helper(
                32,
                "[6499102/152003, -5488/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211," +
                " 12/35, -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3," +
                " -1/122038962404, -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, ...]",
                "{0=6058, 1=2808, -1=2781, -2=1355, -3=1351, -1/2=1317, 1/3=1315, -1/3=1300, 3=1285, 1/2=1261}",
                -3.784942556617747E71,
                31.76238700002468
        );
        rationals_fail_helper(2);
        rationals_fail_helper(0);
        rationals_fail_helper(-1);
    }

    private static void nonNegativeRationalsLessThanOne_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(meanBitSize).nonNegativeRationalsLessThanOne(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void nonNegativeRationalsLessThanOne_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).nonNegativeRationalsLessThanOne();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNonNegativeRationalsLessThanOne() {
        nonNegativeRationalsLessThanOne_helper(
                4,
                "[2/3, 1/3, 1/4, 3/37, 1/2, 1/7, 1/14, 1/12, 1/2, 1/6, 2/3, 1/2, 3/32, 1/2, 1/2, 1/2, 1/2, 1/2, 2/3," +
                " 1/2, ...]",
                "{1/3=194139, 1/2=193659, 2/3=48670, 1/4=48615, 1/5=48563, 1/7=48516, 1/6=48417, 3/5=12285," +
                " 1/12=12264, 1/14=12250}",
                0.30963938187623574,
                4.464897999990121
        );
        nonNegativeRationalsLessThanOne_helper(
                16,
                "[101/477, 2987/26823934, 1/3136, 1/3257, 1/62, 43/49, 8/1123, 1/23, 3695/774847, 1/5, 1/3694," +
                " 1/4746, 1/13, 73/693452, 1/3, 1/456, 14/833279, 48/853, 3/123689, 1/501, ...]",
                "{1/3=20235, 1/2=20128, 2/3=8948, 1/4=8821, 1/7=8786, 1/5=8770, 1/6=8679, 1/13=3946, 2/5=3930," +
                " 3/7=3913}",
                0.1334765276311148,
                15.47944899999833
        );
        nonNegativeRationalsLessThanOne_helper(
                32,
                "[229/7653406, 3695/1186506164475983568433185976, 339/1252, 24/11897, 283/276178219972100476," +
                " 123689/93052542, 1191961124/48206182232889, 1/503930143511978979, 9/1820582, 1/5130439," +
                " 1012228569/3455147332, 2/127, 2/9, 7/81230, 53/1528, 43/63, 69203/1761393, 117/685312367141," +
                " 26/207261, 457/438390191, ...]",
                "{1/3=5676, 1/2=5609, 1/6=2689, 1/7=2652, 2/3=2619, 1/5=2602, 1/4=2579, 2/7=1265, 1/10=1260," +
                " 1/14=1251}",
                0.07632562417457071,
                31.163842000025618
        );
        nonNegativeRationalsLessThanOne_fail_helper(3);
        nonNegativeRationalsLessThanOne_fail_helper(0);
        nonNegativeRationalsLessThanOne_fail_helper(-1);
    }

    private static void rangeUp_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rangeUp(Rational.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rangeUp_Rational_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rangeUp(Rational.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRangeUp_Rational() {
        rangeUp_Rational_helper(
                4,
                "0",
                "[2/3, 1, 0, 1/2, 1, 1/3, 4, 2, 1, 0, 0, 10, 4/3, 13/5, 19/7, 1/5, 2, 0, 1/2, 2/3, ...]",
                "{0=249425, 1=210197, 1/3=52787, 2=52379, 1/2=52243, 3=52158, 1/7=13246, 6=13230, 2/3=13226," +
                " 1/5=13202}",
                7.230916348852299,
                3.083149999986345
        );
        rangeUp_Rational_helper(
                32,
                "0",
                "[3143636824356594/152003, 7132138827349/97061240400, 1088, 46647/245, 229/7653406, 8040/23," +
                " 3695/1186506164475983568433185976, 2404/3, 1484539043/512405011, 367154938, 622, 24/11897," +
                " 113/276178219972100476, 5/1096372481030472, 129705/254, 148690709030, 18659/93052542," +
                " 5025092007844/649827, 496646/2425, 1694402446059/23, ...]",
                "{0=31320, 1=5903, 3=2709, 1/3=2639, 1/2=2625, 2=2623, 4=1312, 7=1311, 1/5=1275, 1/7=1271}",
                2.30035078376369E59,
                30.041032000029976
        );
        rangeUp_Rational_helper(
                4,
                "1",
                "[5/3, 2, 1, 3/2, 2, 4/3, 5, 3, 2, 1, 1, 11, 7/3, 18/5, 26/7, 6/5, 3, 1, 3/2, 5/3, ...]",
                "{1=249425, 2=210197, 4/3=52787, 3=52379, 3/2=52243, 4=52158, 8/7=13246, 7=13230, 5/3=13226," +
                " 6/5=13202}",
                8.230916348876454,
                4.258722999974617
        );
        rangeUp_Rational_helper(
                32,
                "1",
                "[3143636824508597/152003, 7229200067749/97061240400, 1089, 46892/245, 7653635/7653406, 8063/23," +
                " 1186506164475983568433189671/1186506164475983568433185976, 2407/3, 1996944054/512405011," +
                " 367154939, 623, 11921/11897, 276178219972100589/276178219972100476," +
                " 1096372481030477/1096372481030472, 129959/254, 148690709031, 93071201/93052542," +
                " 5025092657671/649827, 499071/2425, 1694402446082/23, ...]",
                "{1=31320, 2=5903, 4=2709, 4/3=2639, 3/2=2625, 3=2623, 5=1312, 8=1311, 6/5=1275, 8/7=1271}",
                2.30035078376369E59,
                37.66929400000752
        );
        rangeUp_Rational_helper(
                4,
                "2",
                "[8/3, 3, 2, 5/2, 3, 7/3, 6, 4, 3, 2, 2, 12, 10/3, 23/5, 33/7, 11/5, 4, 2, 5/2, 8/3, ...]",
                "{2=249425, 3=210197, 7/3=52787, 4=52379, 5/2=52243, 5=52158, 15/7=13246, 8=13230, 8/3=13226," +
                " 11/5=13202}",
                9.23091634887471,
                4.784373000006757
        );
        rangeUp_Rational_helper(
                32,
                "2",
                "[3143636824660600/152003, 7326261308149/97061240400, 1090, 47137/245, 15307041/7653406, 8086/23," +
                " 2373012328951967136866375647/1186506164475983568433185976, 2410/3, 2509349065/512405011," +
                " 367154940, 624, 23818/11897, 552356439944201065/276178219972100476," +
                " 2192744962060949/1096372481030472, 130213/254, 148690709032, 186123743/93052542," +
                " 5025093307498/649827, 501496/2425, 1694402446105/23, ...]",
                "{2=31320, 3=5903, 5=2709, 7/3=2639, 5/2=2625, 4=2623, 6=1312, 9=1311, 11/5=1275, 15/7=1271}",
                2.30035078376369E59,
                38.19239900001273
        );
        rangeUp_Rational_helper(
                4,
                "-2",
                "[-4/3, -1, -2, -3/2, -1, -5/3, 2, 0, -1, -2, -2, 8, -2/3, 3/5, 5/7, -9/5, 0, -2, -3/2, -4/3, ...]",
                "{-2=249425, -1=210197, -5/3=52787, 0=52379, -3/2=52243, 1=52158, -13/7=13246, 4=13230, -4/3=13226," +
                " -9/5=13202}",
                5.230916348808398,
                3.5134459999869696
        );
        rangeUp_Rational_helper(
                32,
                "-2",
                "[3143636824052588/152003, 6938016346549/97061240400, 1086, 46157/245, -15306583/7653406, 7994/23," +
                " -2373012328951967136866368257/1186506164475983568433185976, 2398/3, 459729021/512405011," +
                " 367154936, 620, -23770/11897, -552356439944200839/276178219972100476," +
                " -2192744962060939/1096372481030472, 129197/254, 148690709028, -186086425/93052542," +
                " 5025090708190/649827, 491796/2425, 1694402446013/23, ...]",
                "{-2=31320, -1=5903, 1=2709, -5/3=2639, -3/2=2625, 0=2623, 2=1312, 5=1311, -9/5=1275, -13/7=1271}",
                2.30035078376369E59,
                37.884783000012376
        );
        rangeUp_Rational_helper(
                4,
                "5/3",
                "[7/3, 8/3, 5/3, 13/6, 8/3, 2, 17/3, 11/3, 8/3, 5/3, 5/3, 35/3, 3, 64/15, 92/21, 28/15, 11/3, 5/3," +
                " 13/6, 7/3, ...]",
                "{5/3=249425, 8/3=210197, 2=52787, 11/3=52379, 13/6=52243, 14/3=52158, 38/21=13246, 23/3=13230," +
                " 7/3=13226, 28/15=13202}",
                8.89758301551532,
                6.751185999974823
        );
        rangeUp_Rational_helper(
                32,
                "5/3",
                "[9430910473829797/456009, 7293907561349/97061240400, 3269/3, 141166/735, 38267717/22960218," +
                " 24235/69, 5932530822379917842165940965/3559518493427950705299557928, 803, 7015642184/1537215033," +
                " 1101464819/3, 1871/3, 59557/35691, 1380891099860502719/828534659916301428," +
                " 1827287468384125/1096372481030472, 390385/762, 446072127095/3, 155106229/93052542," +
                " 5025093090889/649827, 1502063/7275, 5083207338292/69, ...]",
                "{5/3=31320, 8/3=5903, 14/3=2709, 2=2639, 13/6=2625, 11/3=2623, 17/3=1312, 26/3=1311, 28/15=1275," +
                " 38/21=1271}",
                2.30035078376369E59,
                40.232672000039464
        );
        rangeUp_Rational_helper(
                4,
                "-5/3",
                "[-1, -2/3, -5/3, -7/6, -2/3, -4/3, 7/3, 1/3, -2/3, -5/3, -5/3, 25/3, -1/3, 14/15, 22/21, -22/15," +
                " 1/3, -5/3, -7/6, -1, ...]",
                "{-5/3=249425, -2/3=210197, -4/3=52787, 1/3=52379, -7/6=52243, 4/3=52158, -32/21=13246, 13/3=13230," +
                " -1=13226, -22/15=13202}",
                5.564249682144554,
                5.546619999987452
        );
        rangeUp_Rational_helper(
                32,
                "-5/3",
                "[9430910472309767/456009, 2323456697783/32353746800, 3259/3, 138716/735, -38266343/22960218," +
                " 24005/69, -5932530822379917842165918795/3559518493427950705299557928, 2399/3," +
                " 1891592074/1537215033, 1101464809/3, 1861/3, -59413/35691," +
                " -1380891099860502041/828534659916301428, -609095822794705/365457493676824, 387845/762," +
                " 446072127085/3, -51689637/31017514, 5025090924799/649827, 1477813/7275, 5083207338062/69, ...]",
                "{-5/3=31320, -2/3=5903, 4/3=2709, -4/3=2639, -7/6=2625, 1/3=2623, 7/3=1312, 16/3=1311, -22/15=1275," +
                " -32/21=1271}",
                2.30035078376369E59,
                39.95053100004396
        );
        rangeUp_Rational_fail_helper(3, "0");
        rangeUp_Rational_fail_helper(-1, "0");
    }

    private static void rangeDown_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rangeDown(Rational.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rangeDown_Rational_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rangeDown(Rational.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRangeDown_Rational() {
        rangeDown_Rational_helper(
                4,
                "0",
                "[-2/3, -1, 0, -1/2, -1, -1/3, -4, -2, -1, 0, 0, -10, -4/3, -13/5, -19/7, -1/5, -2, 0, -1/2, -2/3" +
                ", ...]",
                "{0=249425, -1=210197, -1/3=52787, -2=52379, -1/2=52243, -3=52158, -1/7=13246, -6=13230, -2/3=13226," +
                " -1/5=13202}",
                -7.230916348852299,
                2.558149999990092
        );
        rangeDown_Rational_helper(
                32,
                "0",
                "[-3143636824356594/152003, -7132138827349/97061240400, -1088, -46647/245, -229/7653406, -8040/23," +
                " -3695/1186506164475983568433185976, -2404/3, -1484539043/512405011, -367154938, -622, -24/11897," +
                " -113/276178219972100476, -5/1096372481030472, -129705/254, -148690709030, -18659/93052542," +
                " -5025092007844/649827, -496646/2425, -1694402446059/23, ...]",
                "{0=31320, -1=5903, -3=2709, -1/3=2639, -1/2=2625, -2=2623, -4=1312, -7=1311, -1/5=1275, -1/7=1271}",
                -2.30035078376369E59,
                29.905172000029964
        );
        rangeDown_Rational_helper(
                4,
                "1",
                "[1/3, 0, 1, 1/2, 0, 2/3, -3, -1, 0, 1, 1, -9, -1/3, -8/5, -12/7, 4/5, -1, 1, 1/2, 1/3, ...]",
                "{1=249425, 0=210197, 2/3=52787, -1=52379, 1/2=52243, -2=52158, 6/7=13246, -5=13230, 1/3=13226," +
                " 4/5=13202}",
                -6.230916348820594,
                3.242670999983001
        );
        rangeDown_Rational_helper(
                32,
                "1",
                "[-3143636824204591/152003, -7035077586949/97061240400, -1087, -46402/245, 7653177/7653406," +
                " -8017/23, 1186506164475983568433182281/1186506164475983568433185976, -2401/3," +
                " -972134032/512405011, -367154937, -621, 11873/11897, 276178219972100363/276178219972100476," +
                " 1096372481030467/1096372481030472, -129451/254, -148690709029, 93033883/93052542," +
                " -5025091358017/649827, -494221/2425, -1694402446036/23, ...]",
                "{1=31320, 0=5903, -2=2709, 2/3=2639, 1/2=2625, -1=2623, -3=1312, -6=1311, 4/5=1275, 6/7=1271}",
                -2.30035078376369E59,
                37.394290000005086
        );
        rangeDown_Rational_helper(
                4,
                "2",
                "[4/3, 1, 2, 3/2, 1, 5/3, -2, 0, 1, 2, 2, -8, 2/3, -3/5, -5/7, 9/5, 0, 2, 3/2, 4/3, ...]",
                "{2=249425, 1=210197, 5/3=52787, 0=52379, 3/2=52243, -1=52158, 13/7=13246, -4=13230, 4/3=13226," +
                " 9/5=13202}",
                -5.230916348808398,
                3.9209559999779886
        );
        rangeDown_Rational_helper(
                32,
                "2",
                "[-3143636824052588/152003, -6938016346549/97061240400, -1086, -46157/245, 15306583/7653406," +
                " -7994/23, 2373012328951967136866368257/1186506164475983568433185976, -2398/3," +
                " -459729021/512405011, -367154936, -620, 23770/11897, 552356439944200839/276178219972100476," +
                " 2192744962060939/1096372481030472, -129197/254, -148690709028, 186086425/93052542," +
                " -5025090708190/649827, -491796/2425, -1694402446013/23, ...]",
                "{2=31320, 1=5903, -1=2709, 5/3=2639, 3/2=2625, 0=2623, -2=1312, -5=1311, 9/5=1275, 13/7=1271}",
                -2.30035078376369E59,
                37.91937900000891
        );
        rangeDown_Rational_helper(
                4,
                "-2",
                "[-8/3, -3, -2, -5/2, -3, -7/3, -6, -4, -3, -2, -2, -12, -10/3, -23/5, -33/7, -11/5, -4, -2, -5/2," +
                " -8/3, ...]",
                "{-2=249425, -3=210197, -7/3=52787, -4=52379, -5/2=52243, -5=52158, -15/7=13246, -8=13230," +
                " -8/3=13226, -11/5=13202}",
                -9.23091634887471,
                4.444851999983567
        );
        rangeDown_Rational_helper(
                32,
                "-2",
                "[-3143636824660600/152003, -7326261308149/97061240400, -1090, -47137/245, -15307041/7653406," +
                " -8086/23, -2373012328951967136866375647/1186506164475983568433185976, -2410/3," +
                " -2509349065/512405011, -367154940, -624, -23818/11897, -552356439944201065/276178219972100476," +
                " -2192744962060949/1096372481030472, -130213/254, -148690709032, -186123743/93052542," +
                " -5025093307498/649827, -501496/2425, -1694402446105/23, ...]",
                "{-2=31320, -3=5903, -5=2709, -7/3=2639, -5/2=2625, -4=2623, -6=1312, -9=1311, -11/5=1275," +
                " -15/7=1271}",
                -2.30035078376369E59,
                38.15192300001582
        );
        rangeDown_Rational_helper(
                4,
                "5/3",
                "[1, 2/3, 5/3, 7/6, 2/3, 4/3, -7/3, -1/3, 2/3, 5/3, 5/3, -25/3, 1/3, -14/15, -22/21, 22/15, -1/3," +
                " 5/3, 7/6, 1, ...]",
                "{5/3=249425, 2/3=210197, 4/3=52787, -1/3=52379, 7/6=52243, -4/3=52158, 32/21=13246, -13/3=13230," +
                " 1=13226, 22/15=13202}",
                -5.564249682144554,
                5.7353909999435455
        );
        rangeDown_Rational_helper(
                32,
                "5/3",
                "[-9430910472309767/456009, -2323456697783/32353746800, -3259/3, -138716/735, 38266343/22960218," +
                " -24005/69, 5932530822379917842165918795/3559518493427950705299557928, -2399/3," +
                " -1891592074/1537215033, -1101464809/3, -1861/3, 59413/35691," +
                " 1380891099860502041/828534659916301428, 609095822794705/365457493676824, -387845/762," +
                " -446072127085/3, 51689637/31017514, -5025090924799/649827, -1477813/7275, -5083207338062/69, ...]",
                "{5/3=31320, 2/3=5903, -4/3=2709, 4/3=2639, 7/6=2625, -1/3=2623, -7/3=1312, -16/3=1311, 22/15=1275," +
                " 32/21=1271}",
                -2.30035078376369E59,
                39.956361000044275
        );
        rangeDown_Rational_helper(
                4,
                "-5/3",
                "[-7/3, -8/3, -5/3, -13/6, -8/3, -2, -17/3, -11/3, -8/3, -5/3, -5/3, -35/3, -3, -64/15, -92/21," +
                " -28/15, -11/3, -5/3, -13/6, -7/3, ...]",
                "{-5/3=249425, -8/3=210197, -2=52787, -11/3=52379, -13/6=52243, -14/3=52158, -38/21=13246," +
                " -23/3=13230, -7/3=13226, -28/15=13202}",
                -8.89758301551532,
                6.474602999953898
        );
        rangeDown_Rational_helper(
                32,
                "-5/3",
                "[-9430910473829797/456009, -7293907561349/97061240400, -3269/3, -141166/735, -38267717/22960218," +
                " -24235/69, -5932530822379917842165940965/3559518493427950705299557928, -803," +
                " -7015642184/1537215033, -1101464819/3, -1871/3, -59557/35691," +
                " -1380891099860502719/828534659916301428, -1827287468384125/1096372481030472, -390385/762," +
                " -446072127095/3, -155106229/93052542, -5025093090889/649827, -1502063/7275, -5083207338292/69, ...]",
                "{-5/3=31320, -8/3=5903, -14/3=2709, -2=2639, -13/6=2625, -11/3=2623, -17/3=1312, -26/3=1311," +
                " -28/15=1275, -38/21=1271}",
                -2.30035078376369E59,
                40.22005300004766
        );
        rangeDown_Rational_fail_helper(3, "0");
        rangeDown_Rational_fail_helper(-1, "0");
    }

    private static void range_Rational_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String b,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).range(Rational.read(a).get(), Rational.read(b).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void range_Rational_Rational_fail_helper(int scale, @NotNull String a, @NotNull String b) {
        try {
            P.withScale(scale).range(Rational.read(a).get(), Rational.read(b).get());
            fail();
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRange_Rational_Rational() {
        range_Rational_Rational_helper(
                4,
                "0",
                "0",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        range_Rational_Rational_helper(
                32,
                "0",
                "0",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        range_Rational_Rational_helper(
                4,
                "5/3",
                "5/3",
                "[5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3," +
                " 5/3, ...]",
                "{5/3=1000000}",
                1.6666666666766063,
                4.999999999895295
        );
        range_Rational_Rational_helper(
                32,
                "5/3",
                "5/3",
                "[5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3," +
                " 5/3, ...]",
                "{5/3=1000000}",
                1.6666666666766063,
                4.999999999895295
        );
        range_Rational_Rational_helper(
                4,
                "0",
                "1",
                "[2/3, 1/3, 1/2, 1/4, 1/19, 1/5, 1/2, 2/3, 1/2, 1, 1/3, 1, 1/2, 2/3, 1/3, 1/2, 1/2, 7/10, 1, 1, ...]",
                "{1=249739, 1/3=145695, 1/2=145469, 2/3=36514, 1/5=36445, 1/7=36437, 1/6=36322, 1/4=36018," +
                " 1/13=9235, 1/12=9219}",
                0.48186282469215375,
                3.85044499996861
        );
        range_Rational_Rational_helper(
                32,
                "0",
                "1",
                "[229/7653406, 3695/1186506164475983568433185976, 339/1252, 24/11897, 113/276178219972100476," +
                " 5/1096372481030472, 123689/93052542, 1191961124/48206182232889, 1/503930143511978979, 9/1820582," +
                " 5130439/784415066, 219178/1012228569, 994963805/3123294466234264, 63/69203, 1/117, 1/28670," +
                " 3/136261825641862119937, 11/63945999251366134, 7/204, 13/539, ...]",
                "{1=31488, 1/2=5461, 1/3=5375, 1/7=2641, 1/6=2625, 2/3=2608, 1/5=2565, 1/4=2528, 1/8=1239, 2/7=1237}",
                0.10555003839156923,
                30.236908000004778
        );
        range_Rational_Rational_helper(
                4,
                "-1",
                "0",
                "[-1/3, -2/3, -1/2, -3/4, -18/19, -4/5, -1/2, -1/3, -1/2, 0, -2/3, 0, -1/2, -1/3, -2/3, -1/2, -1/2," +
                " -3/10, 0, 0, ...]",
                "{0=249739, -2/3=145695, -1/2=145469, -1/3=36514, -4/5=36445, -6/7=36437, -5/6=36322, -3/4=36018," +
                " -12/13=9235, -11/12=9219}",
                -0.5181371753040898,
                4.25386399998937
        );
        range_Rational_Rational_helper(
                32,
                "-1",
                "0",
                "[-7653177/7653406, -1186506164475983568433182281/1186506164475983568433185976, -913/1252," +
                " -11873/11897, -276178219972100363/276178219972100476, -1096372481030467/1096372481030472," +
                " -92928853/93052542, -48204990271765/48206182232889, -503930143511978978/503930143511978979," +
                " -1820573/1820582, -779284627/784415066, -1012009391/1012228569," +
                " -3123293471270459/3123294466234264, -69140/69203, -116/117, -28669/28670," +
                " -136261825641862119934/136261825641862119937, -63945999251366123/63945999251366134, -197/204," +
                " -526/539, ...]",
                "{0=31488, -1/2=5461, -2/3=5375, -6/7=2641, -5/6=2625, -1/3=2608, -4/5=2565, -3/4=2528, -7/8=1239," +
                " -5/7=1237}",
                -0.8944499616090117,
                45.12045700000977
        );
        range_Rational_Rational_helper(
                4,
                "1/3",
                "1/2",
                "[4/9, 7/18, 5/12, 3/8, 13/38, 11/30, 5/12, 4/9, 5/12, 1/2, 7/18, 1/2, 5/12, 4/9, 7/18, 5/12, 5/12," +
                " 9/20, 1/2, 1/2, ...]",
                "{1/2=249739, 7/18=145695, 5/12=145469, 4/9=36514, 11/30=36445, 5/14=36437, 13/36=36322, 3/8=36018," +
                " 9/26=9235, 25/72=9219}",
                0.41364380411576934,
                7.637719000068554
        );
        range_Rational_Rational_helper(
                32,
                "1/3",
                "1/2",
                "[5102347/15306812, 2373012328951967136866375647/7119036986855901410599115856, 2843/7512," +
                " 11909/35691, 552356439944201065/1657069319832602856, 2192744962060949/6578234886182832," +
                " 186228773/558315252, 48206778213451/144618546698667, 1007860287023957959/3023580861071873874," +
                " 3641173/10923492, 1573960571/4706490396, 1012338158/3036685707," +
                " 6246589927432333/18739766797405584, 138469/415218, 235/702, 57341/172020," +
                " 272523651283724239877/817570953851172719622, 127891998502732279/383675995508196804, 415/1224," +
                " 1091/3234, ...]",
                "{1/2=31488, 5/12=5461, 7/18=5375, 5/14=2641, 13/36=2625, 4/9=2608, 11/30=2565, 3/8=2528," +
                " 17/48=1239, 8/21=1237}",
                0.35092500639801716,
                47.6313739999992
        );
        range_Rational_Rational_helper(
                4,
                "-1",
                "5/3",
                "[7/9, -1/9, 1/3, -1/3, -49/57, -7/15, 1/3, 7/9, 1/3, 5/3, -1/9, 5/3, 1/3, 7/9, -1/9, 1/3, 1/3," +
                " 13/15, 5/3, 5/3, ...]",
                "{5/3=249739, -1/9=145695, 1/3=145469, 7/9=36514, -7/15=36445, -13/21=36437, -5/9=36322, -1/3=36018," +
                " -31/39=9235, -7/9=9219}",
                0.28496753252192103,
                6.138904999983708
        );
        range_Rational_Rational_helper(
                32,
                "-1",
                "5/3",
                "[-11479193/11480109, -444939811678493838162441046/444939811678493838162444741, -87/313," +
                " -11833/11897, -207133664979075131/207133664979075357, -411139680386422/411139680386427," +
                " -139084057/139578813, -144609011009675/144618546698667, -1511790430535936929/1511790430535936937," +
                " -910279/910291, -1156100843/1176622599, -3034932283/3036685707," +
                " -1171234429874044/1171235424837849, -69035/69203, -343/351, -43001/43005," +
                " -136261825641862119929/136261825641862119937, -95918998877049157/95918998877049201, -139/153," +
                " -1513/1617, ...]",
                "{5/3=31488, 1/3=5461, -1/9=5375, -13/21=2641, -5/9=2625, 7/9=2608, -7/15=2565, -1/3=2528," +
                " -2/3=1239, -5/21=1237}",
                -0.7185332309554711,
                46.453506000040505
        );
        range_Rational_Rational_fail_helper(3, "0", "1");
        range_Rational_Rational_fail_helper(-1, "0", "1");
        range_Rational_Rational_fail_helper(4, "1", "0");
        range_Rational_Rational_fail_helper(4, "1/2", "1/3");
    }

    @Test
    @Ignore
    public void testFinitelyBoundedIntervals() {
        aeq(take(20, P.withScale(12).finitelyBoundedIntervals()),
                "[[0, 0], [-1/3, 12], [-1/7, 0], [-1/9, -1/21], [-1, -1], [-1, -1/4], [-1/9, 0], [-3, -1]," +
                " [-1/3, 0], [-1/20, 1], [-1, 0], [0, 1], [-1, 0], [-1/10, -1/11], [-1, -1], [-1/5, -1/228]," +
                " [-1/77, 0], [-3, 0], [-2/29, 0], [-7, 1]]");
        aeq(take(20, P.withScale(16).finitelyBoundedIntervals()),
                "[[-1/9, 0], [-1/3, 4], [0, 2], [-2/9, 3/4], [1/41, 94/3], [-1/3, 2/3], [-1/6, 2], [-3, -1/4]," +
                " [-1, -1/3], [1/2, 1/2], [1/2, 2/3], [-2, 0], [-101, -1], [-5, 0], [0, 1/3], [-1, -1/3]," +
                " [-2, -1/7], [-2, 0], [-5/2, 2], [-1/5, 1/182]]");
        aeq(take(20, P.withScale(20).finitelyBoundedIntervals()),
                "[[-1/3, -5/97], [-1, 7/3], [-26958, -1/3], [-2/39, 0], [-1/6, -1/432], [-1/7, 0], [-1/6, 5/3]," +
                " [-1, 1], [-16/5, 21], [-2/15, -22/455], [-5/4, -1/3], [-16/287, 1/26], [-2/7, 1/70], [4, 661]," +
                " [3/76, 1/10], [-1/7, 1/2], [2/123, 91], [-14/3, -3], [-4/13, 0], [-2/9, 77/103]]");
        aeq(take(20, P.withScale(40).finitelyBoundedIntervals()),
                "[[-4/131, 219189/2], [-1/13, 1/5], [-4/53, -1/33216], [-17/3, -1/110], [-1/17, 4]," +
                " [-330424, 1632123/64], [-1/10, 59/26], [-13918733/216, -11/26], [55/2, 632803/54]," +
                " [67201/3, 15974091158/7], [-13/140, 1/82], [-627/7, 1/10], [-11/2875, 25/75636], [-1, -1/2]," +
                " [-5544/25, 13/80], [-395/234155341, 27706/1633], [3/11, 215/13], [-1308013/12, -15/29846]," +
                " [-9/40540, 27/1490842], [-67040/259, 674/973991]]");
        aeq(take(20, P.withScale(400).finitelyBoundedIntervals()),
                "[[-926215/16431664650073854891536325743737743, 1269647057469196732113434901261539491465837215270833" +
                "853659409114076315223036062528482350010495831261832116227541734767/16715446852915054025415698125679" +
                "35]," +
                " [-1713410954839215216832662/32983305156931084282922857, 450922190824550/548684970873893370404581]," +
                " [-7012122517468781523685275997701955768893268633041034029875904175247699/11, -21/50379189155788936" +
                "0622325672089418745715242458855989133256762426347497689371690767]," +
                " [-1269567486975079976761629/27004, 42647142203833783933572399651345349284162791860/203453185951]," +
                " [-74752697976827501440079226119/5, -55311456963964128908796638983/24254048764965161476340366301990" +
                "440237601059], [-3791935756459/266417405135653229412748, -179528851/11512487496030678815831036154]," +
                " [-16330825198033798338982981280647075364198503357919003068774700292484173149, 26328607871277882947" +
                "89606321361160228641128435306747693593996250/27226871397984831564871313502089497571]," +
                " [-481424211657729561591944132891816380486089791189/2388710719507763381948550998526849, -7558301750" +
                "3943004561256/1665298797711051551302415618548681462814474315676592006250735551524577152544073781716" +
                "62864064539107272373573054375302870875839]," +
                " [373/1374395997993679780901802800772330528966943360728316832, 381380281848029921057656926427251677" +
                "5750318228317501/7706404660]," +
                " [-38573784139236100759/7745341538573462523, 121792234028108979127507378191346066744348348797432250" +
                "87289/1920231756866729098961547460570]," +
                " [124363388241677/19147629618630610392, 168519553615478507799978066582489053764/113]," +
                " [-23172342127181231148389108579552452307/3335753110, 457668200335972914339390738993391114474200327" +
                "26778504639106220202096389685644694123604455156956345358005267295065302349333849/328360141765885919" +
                "985110067101283196192]," +
                " [-488763065363/396583121, -12656821598982751281369964825084832797516923/18686975852117084310539533" +
                "917987182715290961199322497531917292687526750016103365343036289425284381587947187]," +
                " [-4472046529598644010/86223046907, 8800997073218/109500169029]," +
                " [-138194430279171278814537918102047032802076520155372447576121336004649712765985/50747418179679877" +
                "1492128520049689727022593575420384446, -4094153812563045999624328887069418835162613706953454762750/" +
                "741673084451901547780227091207954696350677311518135840236970673836070934945991637]," +
                " [-11941126889968055396824206247135114681862601502584486668534887486419243984225053674262451/818336" +
                "16212460240653, 54038702192283630043621577197/46740293007322683431565217198097245]," +
                " [-291678547718360127173021/6547, -2/19997641879220583488015798030341016404403964000566876389048941" +
                "197]," +
                " [-216481482409361269119465681830415358854574958343646275783565201007508633114318174736280907941071" +
                "083591563951117/8, -26329301931781/13]," +
                " [-10459079250757188425618579918272044405689712944/59390854069, -3087873860208388074855143839208628" +
                "26/5], [-3071566/125081370382930696447279, 25/126314299223530276037472719461577496440437473573]]");
        try {
            P.withScale(11).finitelyBoundedIntervals();
            fail();
        } catch (IllegalArgumentException ignored) {}
        try {
            P.withScale(0).finitelyBoundedIntervals();
            fail();
        } catch (IllegalArgumentException ignored) {}
        try {
            P.withScale(-4).finitelyBoundedIntervals();
            fail();
        } catch (IllegalArgumentException ignored) {}
    }

    @Test
    @Ignore
    public void testIntervals() {
        aeq(take(20, P.withScale(12).intervals()),
                "[[0, 1], [-1/3, -1/3], [0, 0], [-1, -2/3], [0, 0], [0, 3], [-1, -1/2], [-1, 0], [1, 23/3], [0, 1]," +
                " [-2, 0], [-1, 0], [-1/4, 3/17], [-3/2, -1/3], [0, 3/13], [-1/10, 0], [-1/25, 0], [-1/7, 0]," +
                " [-1/23, 1], [-7, 106]]");
        aeq(take(20, P.withScale(16).intervals()),
                "[[-1, -1], [-2, 2/3], [-1/2, -2/9], (-Infinity, -2/13], (-Infinity, -2/7], [-2, -1/21], [-2, 0]," +
                " [-1/42, -1/101], [-1/2, -1/4], [-22, -1/138], [-2, -2/3], [0, 3/5], [-1, 1], [1, 29/3]," +
                " (-Infinity, -1/2], [1/2, 1/2], [1/3, 124/59], [-1, -13/89], [-2, 1/18], [13/1357, Infinity)]");
        aeq(take(20, P.withScale(20).intervals()),
                "[[-1/3, -1/3], [-1/4, 5/498], [-1/30, 1/3], [-1, -1], (-Infinity, -2/993], [-73/12783, 0]," +
                " [-3, 2/71], [-1, 1/88654], [-8/3, -1/152199], [-1, -1/59], [-5/2404, 1], [-1/28, 1/33], [-1, 0]," +
                " [-1/10, -1/55], (-Infinity, -57/31], [-3, 3/7], [25/2, 1157/2], [-1/12, 1/1172], [-1, -1]," +
                " [-3, -1]]");
        aeq(take(20, P.withScale(40).intervals()),
                "[[-1/9215, 936077171636/103], [3/336217, 264], [-83/10, -1/146640], [-13918733/216, 1/16248]," +
                " [-2027/26, -26], [-1, 1694/7093], [-1/4, -2/9775], [-1/161, 1/61], [-1/216564772, 84374/7]," +
                " [2/229, 1/82], [25/75636, 1/7], [-5/6, 7069], [-254884793/3, -1], [-1/27727, 2206/9]," +
                " [-2/13857749, 45/1169], [-1797992175/29, -395/234155341], [-1/229, 3906/11], [-1/251272, 8]," +
                " [-30553462/61, -51/14474], [-1/46, -9/40540]]");
        aeq(take(20, P.withScale(400).intervals()),
                "[[-2932300622767992843722981339082551986476444745085930464/2658384113574453715843608302278670216568" +
                "049, 3694/477901135205056207263719374685047]," +
                " [39715934792773646/6384149652812409395183654221803368013262677, 5772199270980022726104656973113175" +
                "23635743235943/1807117226803081091255]," +
                " [41239731918267379660129135028/203453185951, 58133145853958315969796220202453451461571612/11658170" +
                "920345034542417], [-1134453948586457409, 1263680632507/4592747511577969521646]," +
                " [-4/122702611930022446695427608637802311756213285458120581678547053528717722178952447813548627, 24" +
                "667994125/15427796930458401831517660213494193]," +
                " [-111463527513/183982528883456020025454407762961699052314867040255056605463221, 3589629911797325/7" +
                "8], [-104656597814683134323497605337674102933729152434939987146616257452604090968222434373556939863" +
                "96981198695303968/264311687, 736353882810710572558340/3261191648023201354415497]," +
                " [14901/3199045212885382290510473051695006949675970611168534638849095664905036431834577878594585901" +
                "4689837354838739771920394702514178035137, 37413208329]," +
                " [-7188689105331884/3, -67215049970869454/1859051912206364843246409736216426214046893927]," +
                " [-128180915019741852230939121746453149192136881205294811341470641200471646007138201/217, 605706092" +
                "22559647870481875928214598477/11235098626702884014496194172720416144472006935]," +
                " [125905591/134986414920203678283696874370647669999843334627921819879642505841998444512097261705623" +
                ", 38885932433951997214299046691820204850705603/2270091556160585497150744207789926935731020378658123" +
                "557851677102522786914724054353561745955990478156435004918642340]," +
                " [-1313947671804572357439878089/4224, 309995181129017020395446087404108720093879/80584925]," +
                " [-353883577985348173837699629810090/103278735377, 10/16765568111]," +
                " [-69613881158462261539349355255679/617507627487, -30720262517752671/449703904822]," +
                " [-33873088625616782749920040910673005697076285332259/182607513273987527895875555329543446243402238" +
                "0728646963066004179668081230117, 233067017603786278/147505444980269244967207]," +
                " [2510111740134478095443484037613/46740293007322683431565217198097245, 4990160020534885057898123459" +
                "0/1081373]," +
                " [-5158113169760065405039/1352290807605056128, 606741144138380536571858000456022994436/118071]," +
                " [-8/149550458375738514680261979, 1958295030203427/56906390240]," +
                " [1709/424289276379738268497613661428514, 255758238983893665426384567093480949791313766845545905189" +
                "338865527214404161314331306816571297498773/3632638456768172]," +
                " [-30507538/589984077663450662457305, 252629269838496/3654927805]]");
        try {
            P.withScale(11).intervals();
            fail();
        } catch (IllegalArgumentException ignored) {}
        try {
            P.withScale(0).intervals();
            fail();
        } catch (IllegalArgumentException ignored) {}
        try {
            P.withScale(-4).intervals();
            fail();
        } catch (IllegalArgumentException ignored) {}
    }

    private static double meanOfIntegers(@NotNull List<Integer> xs) {
        return sumDouble(map(i -> (double) i / DEFAULT_SAMPLE_SIZE, xs));
    }

    private static double meanOfRationals(@NotNull List<Rational> xs) {
        return sumDouble(map(r -> r.doubleValue() / DEFAULT_SAMPLE_SIZE, xs));
    }
}