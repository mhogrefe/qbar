package mho.qbar.iterableProviders;

import mho.qbar.objects.*;
import org.jetbrains.annotations.NotNull;
import org.junit.Before;
import org.junit.Test;

import java.math.BigInteger;
import java.util.List;

import static mho.wheels.iterables.IterableUtils.*;
import static mho.wheels.testing.Testing.*;
import static org.junit.Assert.fail;

public class QBarRandomProviderTest {
    private static QBarRandomProvider P;

    @Before
    public void initialize() {
        P = QBarRandomProvider.example();
    }

    private static void rationalHelper(
            @NotNull Iterable<Rational> xs,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        List<Rational> sample = toList(take(DEFAULT_SAMPLE_SIZE, xs));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfRationals(sample), sampleMean);
        aeq(meanOfIntegers(toList(map(Rational::bitLength, sample))), bitSizeMean);
    }

    private static void positiveRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).positiveRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void positiveRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).positiveRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testPositiveRationals() {
        positiveRationals_helper(
                4,
                "[13/3, 2/3, 4, 1, 1/3, 3/2, 1, 2, 1, 1, 1, 10, 1/4, 3/37, 5, 19/7, 1, 5, 2, 1, ...]",
                "{1=280202, 1/3=70044, 1/2=69897, 3=69577, 2=69553, 1/7=17626, 6=17571, 1/5=17503, 7=17495," +
                " 1/6=17466}",
                10.860889705920956,
                3.7748699999675455
        );
        positiveRationals_helper(
                16,
                "[101/477, 47968091191/7657, 2987/26823934, 1/3136, 1/3257, 1573, 155099/7851, 1/62, 50, 229/7," +
                " 29127/4, 43/49, 8/1123, 1/23, 3695/774847, 58603, 1/5, 11600056/37, 1/3694, 1/4746, ...]",
                "{1=22456, 1/2=9907, 3=9863, 1/3=9831, 2=9734, 2/3=4413, 7=4354, 5=4337, 4=4308, 6=4304}",
                1.5280779930028705E26,
                15.179776000001873
        );
        positiveRationals_helper(
                32,
                "[9899036265412338/152003, 7132138827349/97061240400, 7232, 46647/245, 229/7653406, 8040/23," +
                " 3695/1186506164475983568433185976, 8548/3, 339/1252, 1484539043/512405011, 1172461306, 3694," +
                " 24/11897, 283/276178219972100476, 161/3, 129705/254, 681426167316, 123689/93052542," +
                " 22617278052260/649827, 1191961124/48206182232889, ...]",
                "{1=6058, 1/3=2855, 2=2792, 3=2788, 1/2=2765, 1/6=1361, 1/7=1334, 3/2=1332, 6=1328, 2/3=1326}",
                9.896359254271288E54,
                30.97147700002087
        );
        positiveRationals_fail_helper(3);
        positiveRationals_fail_helper(0);
        positiveRationals_fail_helper(-1);
    }

    private static void negativeRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).negativeRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void negativeRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).negativeRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNegativeRationals() {
        negativeRationals_helper(
                4,
                "[-13/3, -2/3, -4, -1, -1/3, -3/2, -1, -2, -1, -1, -1, -10, -1/4, -3/37, -5, -19/7, -1, -5, -2, -1," +
                " ...]",
                "{-1=280202, -1/3=70044, -1/2=69897, -3=69577, -2=69553, -1/7=17626, -6=17571, -1/5=17503, -7=17495," +
                " -1/6=17466}",
                -10.860889705920956,
                3.7748699999675455
        );
        negativeRationals_helper(
                16,
                "[-101/477, -47968091191/7657, -2987/26823934, -1/3136, -1/3257, -1573, -155099/7851, -1/62, -50," +
                " -229/7, -29127/4, -43/49, -8/1123, -1/23, -3695/774847, -58603, -1/5, -11600056/37, -1/3694," +
                " -1/4746, ...]",
                "{-1=22456, -1/2=9907, -3=9863, -1/3=9831, -2=9734, -2/3=4413, -7=4354, -5=4337, -4=4308, -6=4304}",
                -1.5280779930028705E26,
                15.179776000001873
        );
        negativeRationals_helper(
                32,
                "[-9899036265412338/152003, -7132138827349/97061240400, -7232, -46647/245, -229/7653406, -8040/23," +
                " -3695/1186506164475983568433185976, -8548/3, -339/1252, -1484539043/512405011, -1172461306, -3694," +
                " -24/11897, -283/276178219972100476, -161/3, -129705/254, -681426167316, -123689/93052542," +
                " -22617278052260/649827, -1191961124/48206182232889, ...]",
                "{-1=6058, -1/3=2855, -2=2792, -3=2788, -1/2=2765, -1/6=1361, -1/7=1334, -3/2=1332, -6=1328," +
                " -2/3=1326}",
                -9.896359254271288E54,
                30.97147700002087
        );
        negativeRationals_fail_helper(3);
        negativeRationals_fail_helper(0);
        negativeRationals_fail_helper(-1);
    }

    private static void nonzeroRationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).nonzeroRationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void nonzeroRationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).nonzeroRationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNonzeroRationals() {
        nonzeroRationals_helper(
                4,
                "[13, 477, 2, -4/7, 3, -4/3, 1, 3, -1, -1/2, -1, -1, 3/5, 4, 37/3, 1/11, -7/3, -5/4, -1, 1/2, ...]",
                "{1=140351, -1=139626, 3=35357, -1/3=35061, -1/2=35060, -3=35047, 1/3=35025, -2=34780, 1/2=34766," +
                " 2=34614}",
                0.39737016317796847,
                3.775415999967471
        );
        nonzeroRationals_helper(
                16,
                "[101/221, -47968091191/3561, -8, 6/41, -5488/1498961957, -2987/10046718, 1/1088, -1/1209," +
                " -1573/417243, -7851/94, -50, 30/13, 229/3, -29127/2, -43/17, 8/611, -1/15, -3695/512703," +
                " 5/29233410216, -58603, ...]",
                "{-1=11368, 1=11271, 2=5000, -2=4967, 3=4964, 1/3=4961, -1/3=4940, -1/2=4915, -3=4869, 1/2=4788}",
                -7.897237376910241E21,
                15.175030000002636
        );
        nonzeroRationals_helper(
                32,
                "[-9899036265412338/86467, 7132138827349/62701502032, 245/6, -21/94, -23/6, -3/211, -1252/67," +
                " 512405011/635590394, 1/1646, -1/49190556, 11897/155, 276178219972100476/13, 1096372481030472/83," +
                " 213/1696, 4022/64169, 1/58153, -649827/1020934, -2425/655090212, -48206182232889/594890818283," +
                " 23/87, ...]",
                "{-1=2976, 1=2934, 1/2=1490, -1/2=1445, 2=1431, 3=1428, -2=1407, 1/3=1395, -3=1392, -1/3=1376}",
                -3.8257920286392754E59,
                30.96837000002125
        );
        nonzeroRationals_fail_helper(3);
        nonzeroRationals_fail_helper(0);
        nonzeroRationals_fail_helper(-1);
    }

    private static void rationals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(P.withScale(meanBitSize).rationals(), output, topSampleCount, sampleMean, bitSizeMean);
        P.reset();
    }

    private static void rationals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).rationals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationals() {
        rationals_helper(
                3,
                "[5, 221, 1, -2/7, 1, -2/3, 1, 0, -1/2, 0, 0, 5/6, 0, 2, -3/4, 0, 0, 1/6, -1/15, -1, ...]",
                "{0=359511, 1=89773, -1=89208, -1/3=22557, 1/2=22522, 1/3=22427, 2=22383, 3=22327, -1/2=22286," +
                " -3=22204}",
                -0.4022959305532067,
                2.779838999989692
        );
        rationals_helper(
                16,
                "[1663770364/7657, 41/3440, -243045529/1963, -409/7232, -122/89563, -3/94, 712/27, 5/4, -47/15, 1/2," +
                " -70/512703, 25056015375/8548, -1/211, -16/67, -4/9, -1/7790, -238/29, 78/155, 1/7, -1/712, ...]",
                "{0=22141, -1=9897, 1=9827, 2=4478, -3=4434, -2=4383, 3=4373, -1/3=4346, 1/3=4304, -1/2=4302}",
                1.6133070384934913E30,
                15.814283999994494
        );
        rationals_helper(
                32,
                "[6499102/152003, -5488/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211," +
                " 12/35, -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3," +
                " -1/122038962404, -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, ...]",
                "{0=6058, 1=2808, -1=2781, -2=1355, -3=1351, -1/2=1317, 1/3=1315, -1/3=1300, 3=1285, 1/2=1261}",
                -3.784942556617747E71,
                31.82849000002398
        );
        rationals_fail_helper(2);
        rationals_fail_helper(0);
        rationals_fail_helper(-1);
    }

    private static void nonNegativeRationalsLessThanOne_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(meanBitSize).nonNegativeRationalsLessThanOne(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void nonNegativeRationalsLessThanOne_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).nonNegativeRationalsLessThanOne();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testNonNegativeRationalsLessThanOne() {
        nonNegativeRationalsLessThanOne_helper(
                4,
                "[8/13, 442/989, 0, 1/2, 0, 3/4, 2/3, 1/6, 0, 0, 0, 0, 2/3, 3/4, 0, 1/2, 0, 0, 0, 0, ...]",
                "{0=500028, 1/2=124628, 2/3=62572, 1/3=62482, 5/6=15761, 1/4=15674, 3/4=15561, 1/6=15561, 1/5=7903," +
                " 2/5=7900}",
                0.25006056333167953,
                3.025887000003045
        );
        nonNegativeRationalsLessThanOne_helper(
                16,
                "[35/101, 49/85, 11249606917/30788222007, 1066/1513, 3/4, 28/41, 341/368, 48080394/425220133, 9/22," +
                " 461/939, 1253959/4626764, 83/1088, 4628/7353, 86/549, 411058/417243, 71/1707, 27/94, 1/2, 1/4," +
                " 5/18, ...]",
                "{0=124174, 1/2=54456, 1/3=27699, 2/3=27325, 1/6=11968, 5/6=11913, 1/4=11899, 3/4=11887, 1/5=6086," +
                " 4/5=6018}",
                0.43779120952560585,
                14.830439999963309
        );
        nonNegativeRationalsLessThanOne_helper(
                32,
                "[737254238953015/9899036265412338, 35108/53699, 1607/6492, 6/13, 2145256597502/2734092316245," +
                " 10167173779/28341763664, 83/1088, 71842947/100875512, 4672789/246145874, 7676/46647, 87/88, 5/6," +
                " 3/4, 1/2, 6/13, 19/94, 3133471/3459102, 139/276, 811/8040, 2/3, ...]",
                "{0=62709, 1/2=29030, 2/3=14666, 1/3=14624, 1/4=6878, 5/6=6871, 3/4=6824, 1/6=6779, 2/5=3532," +
                " 3/5=3453}",
                0.4684325154820962,
                30.684408000047792
        );
        nonNegativeRationalsLessThanOne_fail_helper(3);
        nonNegativeRationalsLessThanOne_fail_helper(0);
        nonNegativeRationalsLessThanOne_fail_helper(-1);
    }

    private static void rangeUp_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rangeUp(Rational.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rangeUp_Rational_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rangeUp(Rational.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRangeUp_Rational() {
        rangeUp_Rational_helper(
                4,
                "0",
                "[2/3, 1, 0, 1/2, 1, 1/3, 4, 2, 1, 0, 0, 10, 4/3, 13/5, 19/7, 1/5, 2, 0, 1/2, 2/3, ...]",
                "{0=249425, 1=210197, 1/3=52787, 2=52379, 1/2=52243, 3=52158, 1/7=13246, 6=13230, 2/3=13226," +
                " 1/5=13202}",
                7.230916348852299,
                3.083149999986345
        );
        rangeUp_Rational_helper(
                32,
                "0",
                "[3143636824356594/152003, 7132138827349/97061240400, 1088, 46647/245, 229/7653406, 8040/23," +
                " 3695/1186506164475983568433185976, 2404/3, 1484539043/512405011, 367154938, 622, 24/11897," +
                " 113/276178219972100476, 5/1096372481030472, 129705/254, 148690709030, 18659/93052542," +
                " 5025092007844/649827, 496646/2425, 1694402446059/23, ...]",
                "{0=31320, 1=5903, 3=2709, 1/3=2639, 1/2=2625, 2=2623, 4=1312, 7=1311, 1/5=1275, 1/7=1271}",
                2.30035078376369E59,
                30.041032000029976
        );
        rangeUp_Rational_helper(
                4,
                "1",
                "[5/3, 2, 1, 3/2, 2, 4/3, 5, 3, 2, 1, 1, 11, 7/3, 18/5, 26/7, 6/5, 3, 1, 3/2, 5/3, ...]",
                "{1=249425, 2=210197, 4/3=52787, 3=52379, 3/2=52243, 4=52158, 8/7=13246, 7=13230, 5/3=13226," +
                " 6/5=13202}",
                8.230916348876454,
                4.258722999974617
        );
        rangeUp_Rational_helper(
                32,
                "1",
                "[3143636824508597/152003, 7229200067749/97061240400, 1089, 46892/245, 7653635/7653406, 8063/23," +
                " 1186506164475983568433189671/1186506164475983568433185976, 2407/3, 1996944054/512405011," +
                " 367154939, 623, 11921/11897, 276178219972100589/276178219972100476," +
                " 1096372481030477/1096372481030472, 129959/254, 148690709031, 93071201/93052542," +
                " 5025092657671/649827, 499071/2425, 1694402446082/23, ...]",
                "{1=31320, 2=5903, 4=2709, 4/3=2639, 3/2=2625, 3=2623, 5=1312, 8=1311, 6/5=1275, 8/7=1271}",
                2.30035078376369E59,
                37.66929400000752
        );
        rangeUp_Rational_helper(
                4,
                "2",
                "[8/3, 3, 2, 5/2, 3, 7/3, 6, 4, 3, 2, 2, 12, 10/3, 23/5, 33/7, 11/5, 4, 2, 5/2, 8/3, ...]",
                "{2=249425, 3=210197, 7/3=52787, 4=52379, 5/2=52243, 5=52158, 15/7=13246, 8=13230, 8/3=13226," +
                " 11/5=13202}",
                9.23091634887471,
                4.784373000006757
        );
        rangeUp_Rational_helper(
                32,
                "2",
                "[3143636824660600/152003, 7326261308149/97061240400, 1090, 47137/245, 15307041/7653406, 8086/23," +
                " 2373012328951967136866375647/1186506164475983568433185976, 2410/3, 2509349065/512405011," +
                " 367154940, 624, 23818/11897, 552356439944201065/276178219972100476," +
                " 2192744962060949/1096372481030472, 130213/254, 148690709032, 186123743/93052542," +
                " 5025093307498/649827, 501496/2425, 1694402446105/23, ...]",
                "{2=31320, 3=5903, 5=2709, 7/3=2639, 5/2=2625, 4=2623, 6=1312, 9=1311, 11/5=1275, 15/7=1271}",
                2.30035078376369E59,
                38.19239900001273
        );
        rangeUp_Rational_helper(
                4,
                "-2",
                "[-4/3, -1, -2, -3/2, -1, -5/3, 2, 0, -1, -2, -2, 8, -2/3, 3/5, 5/7, -9/5, 0, -2, -3/2, -4/3, ...]",
                "{-2=249425, -1=210197, -5/3=52787, 0=52379, -3/2=52243, 1=52158, -13/7=13246, 4=13230, -4/3=13226," +
                " -9/5=13202}",
                5.230916348808398,
                4.015000999973354
        );
        rangeUp_Rational_helper(
                32,
                "-2",
                "[3143636824052588/152003, 6938016346549/97061240400, 1086, 46157/245, -15306583/7653406, 7994/23," +
                " -2373012328951967136866368257/1186506164475983568433185976, 2398/3, 459729021/512405011," +
                " 367154936, 620, -23770/11897, -552356439944200839/276178219972100476," +
                " -2192744962060939/1096372481030472, 129197/254, 148690709028, -186086425/93052542," +
                " 5025090708190/649827, 491796/2425, 1694402446013/23, ...]",
                "{-2=31320, -1=5903, 1=2709, -5/3=2639, -3/2=2625, 0=2623, 2=1312, 5=1311, -9/5=1275, -13/7=1271}",
                2.30035078376369E59,
                37.930548000008635
        );
        rangeUp_Rational_helper(
                4,
                "5/3",
                "[7/3, 8/3, 5/3, 13/6, 8/3, 2, 17/3, 11/3, 8/3, 5/3, 5/3, 35/3, 3, 64/15, 92/21, 28/15, 11/3, 5/3," +
                " 13/6, 7/3, ...]",
                "{5/3=249425, 8/3=210197, 2=52787, 11/3=52379, 13/6=52243, 14/3=52158, 38/21=13246, 23/3=13230," +
                " 7/3=13226, 28/15=13202}",
                8.89758301551532,
                6.751185999974823
        );
        rangeUp_Rational_helper(
                32,
                "5/3",
                "[9430910473829797/456009, 7293907561349/97061240400, 3269/3, 141166/735, 38267717/22960218," +
                " 24235/69, 5932530822379917842165940965/3559518493427950705299557928, 803, 7015642184/1537215033," +
                " 1101464819/3, 1871/3, 59557/35691, 1380891099860502719/828534659916301428," +
                " 1827287468384125/1096372481030472, 390385/762, 446072127095/3, 155106229/93052542," +
                " 5025093090889/649827, 1502063/7275, 5083207338292/69, ...]",
                "{5/3=31320, 8/3=5903, 14/3=2709, 2=2639, 13/6=2625, 11/3=2623, 17/3=1312, 26/3=1311, 28/15=1275," +
                " 38/21=1271}",
                2.30035078376369E59,
                40.232672000039464
        );
        rangeUp_Rational_helper(
                4,
                "-5/3",
                "[-1, -2/3, -5/3, -7/6, -2/3, -4/3, 7/3, 1/3, -2/3, -5/3, -5/3, 25/3, -1/3, 14/15, 22/21, -22/15," +
                " 1/3, -5/3, -7/6, -1, ...]",
                "{-5/3=249425, -2/3=210197, -4/3=52787, 1/3=52379, -7/6=52243, 4/3=52158, -32/21=13246, 13/3=13230," +
                " -1=13226, -22/15=13202}",
                5.564249682144554,
                5.86250299994541
        );
        rangeUp_Rational_helper(
                32,
                "-5/3",
                "[9430910472309767/456009, 2323456697783/32353746800, 3259/3, 138716/735, -38266343/22960218," +
                " 24005/69, -5932530822379917842165918795/3559518493427950705299557928, 2399/3," +
                " 1891592074/1537215033, 1101464809/3, 1861/3, -59413/35691," +
                " -1380891099860502041/828534659916301428, -609095822794705/365457493676824, 387845/762," +
                " 446072127085/3, -51689637/31017514, 5025090924799/649827, 1477813/7275, 5083207338062/69, ...]",
                "{-5/3=31320, -2/3=5903, 4/3=2709, -4/3=2639, -7/6=2625, 1/3=2623, 7/3=1312, 16/3=1311, -22/15=1275," +
                " -32/21=1271}",
                2.30035078376369E59,
                39.967830000046504
        );
        rangeUp_Rational_fail_helper(3, "0");
        rangeUp_Rational_fail_helper(-1, "0");
    }

    private static void rangeDown_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rangeDown(Rational.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rangeDown_Rational_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rangeDown(Rational.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRangeDown_Rational() {
        rangeDown_Rational_helper(
                4,
                "0",
                "[-2/3, -1, 0, -1/2, -1, -1/3, -4, -2, -1, 0, 0, -10, -4/3, -13/5, -19/7, -1/5, -2, 0, -1/2, -2/3," +
                " ...]",
                "{0=249425, -1=210197, -1/3=52787, -2=52379, -1/2=52243, -3=52158, -1/7=13246, -6=13230, -2/3=13226," +
                " -1/5=13202}",
                -7.230916348852299,
                3.083149999986345
        );
        rangeDown_Rational_helper(
                32,
                "0",
                "[-3143636824356594/152003, -7132138827349/97061240400, -1088, -46647/245, -229/7653406, -8040/23," +
                " -3695/1186506164475983568433185976, -2404/3, -1484539043/512405011, -367154938, -622, -24/11897," +
                " -113/276178219972100476, -5/1096372481030472, -129705/254, -148690709030, -18659/93052542," +
                " -5025092007844/649827, -496646/2425, -1694402446059/23, ...]",
                "{0=31320, -1=5903, -3=2709, -1/3=2639, -1/2=2625, -2=2623, -4=1312, -7=1311, -1/5=1275, -1/7=1271}",
                -2.30035078376369E59,
                30.041032000029976
        );
        rangeDown_Rational_helper(
                4,
                "1",
                "[1/3, 0, 1, 1/2, 0, 2/3, -3, -1, 0, 1, 1, -9, -1/3, -8/5, -12/7, 4/5, -1, 1, 1/2, 1/3, ...]",
                "{1=249425, 0=210197, 2/3=52787, -1=52379, 1/2=52243, -2=52158, 6/7=13246, -5=13230, 1/3=13226," +
                " 4/5=13202}",
                -6.230916348820594,
                3.3941509999804
        );
        rangeDown_Rational_helper(
                32,
                "1",
                "[-3143636824204591/152003, -7035077586949/97061240400, -1087, -46402/245, 7653177/7653406," +
                " -8017/23, 1186506164475983568433182281/1186506164475983568433185976, -2401/3," +
                " -972134032/512405011, -367154937, -621, 11873/11897, 276178219972100363/276178219972100476," +
                " 1096372481030467/1096372481030472, -129451/254, -148690709029, 93033883/93052542," +
                " -5025091358017/649827, -494221/2425, -1694402446036/23, ...]",
                "{1=31320, 0=5903, -2=2709, 2/3=2639, 1/2=2625, -1=2623, -3=1312, -6=1311, 4/5=1275, 6/7=1271}",
                -2.30035078376369E59,
                37.41008700000551
        );
        rangeDown_Rational_helper(
                4,
                "2",
                "[4/3, 1, 2, 3/2, 1, 5/3, -2, 0, 1, 2, 2, -8, 2/3, -3/5, -5/7, 9/5, 0, 2, 3/2, 4/3, ...]",
                "{2=249425, 1=210197, 5/3=52787, 0=52379, 3/2=52243, -1=52158, 13/7=13246, -4=13230, 4/3=13226," +
                " 9/5=13202}",
                -5.230916348808398,
                4.015000999973354
        );
        rangeDown_Rational_helper(
                32,
                "2",
                "[-3143636824052588/152003, -6938016346549/97061240400, -1086, -46157/245, 15306583/7653406," +
                " -7994/23, 2373012328951967136866368257/1186506164475983568433185976, -2398/3," +
                " -459729021/512405011, -367154936, -620, 23770/11897, 552356439944200839/276178219972100476," +
                " 2192744962060939/1096372481030472, -129197/254, -148690709028, 186086425/93052542," +
                " -5025090708190/649827, -491796/2425, -1694402446013/23, ...]",
                "{2=31320, 1=5903, -1=2709, 5/3=2639, 3/2=2625, 0=2623, -2=1312, -5=1311, 9/5=1275, 13/7=1271}",
                -2.30035078376369E59,
                37.930548000008635
        );
        rangeDown_Rational_helper(
                4,
                "-2",
                "[-8/3, -3, -2, -5/2, -3, -7/3, -6, -4, -3, -2, -2, -12, -10/3, -23/5, -33/7, -11/5, -4, -2, -5/2," +
                " -8/3, ...]",
                "{-2=249425, -3=210197, -7/3=52787, -4=52379, -5/2=52243, -5=52158, -15/7=13246, -8=13230," +
                " -8/3=13226, -11/5=13202}",
                -9.23091634887471,
                4.784373000006757
        );
        rangeDown_Rational_helper(
                32,
                "-2",
                "[-3143636824660600/152003, -7326261308149/97061240400, -1090, -47137/245, -15307041/7653406," +
                " -8086/23, -2373012328951967136866375647/1186506164475983568433185976, -2410/3," +
                " -2509349065/512405011, -367154940, -624, -23818/11897, -552356439944201065/276178219972100476," +
                " -2192744962060949/1096372481030472, -130213/254, -148690709032, -186123743/93052542," +
                " -5025093307498/649827, -501496/2425, -1694402446105/23, ...]",
                "{-2=31320, -3=5903, -5=2709, -7/3=2639, -5/2=2625, -4=2623, -6=1312, -9=1311, -11/5=1275," +
                " -15/7=1271}",
                -2.30035078376369E59,
                38.19239900001273
        );
        rangeDown_Rational_helper(
                4,
                "5/3",
                "[1, 2/3, 5/3, 7/6, 2/3, 4/3, -7/3, -1/3, 2/3, 5/3, 5/3, -25/3, 1/3, -14/15, -22/21, 22/15, -1/3," +
                " 5/3, 7/6, 1, ...]",
                "{5/3=249425, 2/3=210197, 4/3=52787, -1/3=52379, 7/6=52243, -4/3=52158, 32/21=13246, -13/3=13230," +
                " 1=13226, 22/15=13202}",
                -5.564249682144554,
                5.86250299994541
        );
        rangeDown_Rational_helper(
                32,
                "5/3",
                "[-9430910472309767/456009, -2323456697783/32353746800, -3259/3, -138716/735, 38266343/22960218," +
                " -24005/69, 5932530822379917842165918795/3559518493427950705299557928, -2399/3," +
                " -1891592074/1537215033, -1101464809/3, -1861/3, 59413/35691," +
                " 1380891099860502041/828534659916301428, 609095822794705/365457493676824, -387845/762," +
                " -446072127085/3, 51689637/31017514, -5025090924799/649827, -1477813/7275, -5083207338062/69, ...]",
                "{5/3=31320, 2/3=5903, -4/3=2709, 4/3=2639, 7/6=2625, -1/3=2623, -7/3=1312, -16/3=1311, 22/15=1275," +
                " 32/21=1271}",
                -2.30035078376369E59,
                39.967830000046504
        );
        rangeDown_Rational_helper(
                4,
                "-5/3",
                "[-7/3, -8/3, -5/3, -13/6, -8/3, -2, -17/3, -11/3, -8/3, -5/3, -5/3, -35/3, -3, -64/15, -92/21," +
                " -28/15, -11/3, -5/3, -13/6, -7/3, ...]",
                "{-5/3=249425, -8/3=210197, -2=52787, -11/3=52379, -13/6=52243, -14/3=52158, -38/21=13246," +
                " -23/3=13230, -7/3=13226, -28/15=13202}",
                -8.89758301551532,
                6.751185999974823
        );
        rangeDown_Rational_helper(
                32,
                "-5/3",
                "[-9430910473829797/456009, -7293907561349/97061240400, -3269/3, -141166/735, -38267717/22960218," +
                " -24235/69, -5932530822379917842165940965/3559518493427950705299557928, -803," +
                " -7015642184/1537215033, -1101464819/3, -1871/3, -59557/35691," +
                " -1380891099860502719/828534659916301428, -1827287468384125/1096372481030472, -390385/762," +
                " -446072127095/3, -155106229/93052542, -5025093090889/649827, -1502063/7275, -5083207338292/69, ...]",
                "{-5/3=31320, -8/3=5903, -14/3=2709, -2=2639, -13/6=2625, -11/3=2623, -17/3=1312, -26/3=1311," +
                " -28/15=1275, -38/21=1271}",
                -2.30035078376369E59,
                40.232672000039464
        );
        rangeDown_Rational_fail_helper(3, "0");
        rangeDown_Rational_fail_helper(-1, "0");
    }

    private static void range_Rational_Rational_helper(
            int scale,
            @NotNull String a,
            @NotNull String b,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).range(Rational.read(a).get(), Rational.read(b).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void range_Rational_Rational_fail_helper(int scale, @NotNull String a, @NotNull String b) {
        try {
            P.withScale(scale).range(Rational.read(a).get(), Rational.read(b).get());
            fail();
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRange_Rational_Rational() {
        range_Rational_Rational_helper(
                4,
                "0",
                "0",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        range_Rational_Rational_helper(
                32,
                "0",
                "0",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        range_Rational_Rational_helper(
                4,
                "5/3",
                "5/3",
                "[5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3," +
                " 5/3, ...]",
                "{5/3=1000000}",
                1.6666666666766063,
                4.999999999895295
        );
        range_Rational_Rational_helper(
                32,
                "5/3",
                "5/3",
                "[5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3, 5/3," +
                " 5/3, ...]",
                "{5/3=1000000}",
                1.6666666666766063,
                4.999999999895295
        );
        range_Rational_Rational_helper(
                4,
                "0",
                "1",
                "[1/3, 49/85, 1/2, 3/4, 1, 0, 0, 1, 2/3, 0, 3/4, 1/2, 0, 0, 1, 1/3, 9/10, 1, 11/69, 0, ...]",
                "{0=374651, 1=249663, 1/2=94086, 1/3=47193, 2/3=46703, 5/6=11928, 3/4=11697, 1/6=11650, 1/4=11621," +
                " 1/5=5962}",
                0.43764761498431315,
                2.771136999989421
        );
        range_Rational_Rational_helper(
                32,
                "0",
                "1",
                "[737254238953015/3143636824356594, 6793/10321, 59/1372, 2145256597502/2734092316245," +
                " 1577239187/6866927184, 83/320, 4734083/16989432, 4672789/44819282, 6429/13366, 23/24, 0, 1/2, 1," +
                " 6/13, 19/30, 550563/837662, 1/17, 811/8040, 5/18, 13/70, ...]",
                "{0=60249, 1=31400, 1/2=28169, 1/3=14195, 2/3=14135, 1/6=6697, 1/4=6685, 3/4=6615, 5/6=6604," +
                " 2/5=3437}",
                0.4855748611217715,
                29.795897000025235
        );
        range_Rational_Rational_helper(
                4,
                "-1",
                "0",
                "[-2/3, -36/85, -1/2, -1/4, 0, -1, -1, 0, -1/3, -1, -1/4, -1/2, -1, -1, 0, -2/3, -1/10, 0, -58/69," +
                " -1, ...]",
                "{-1=374651, 0=249663, -1/2=94086, -2/3=47193, -1/3=46703, -1/6=11928, -1/4=11697, -5/6=11650," +
                " -3/4=11621, -4/5=5962}",
                -0.562352385009498,
                2.89502099998304
        );
        range_Rational_Rational_helper(
                32,
                "-1",
                "0",
                "[-2406382585403579/3143636824356594, -3528/10321, -1313/1372, -588835718743/2734092316245," +
                " -5289687997/6866927184, -237/320, -12255349/16989432, -40146493/44819282, -6937/13366, -1/24, -1," +
                " -1/2, 0, -7/13, -11/30, -287099/837662, -16/17, -7229/8040, -13/18, -57/70, ...]",
                "{-1=60249, 0=31400, -1/2=28169, -2/3=14195, -1/3=14135, -5/6=6697, -3/4=6685, -1/4=6615, -1/6=6604," +
                " -3/5=3437}",
                -0.5144251388771651,
                29.8250019999991
        );
        range_Rational_Rational_helper(
                4,
                "1/3",
                "1/2",
                "[7/18, 73/170, 5/12, 11/24, 1/2, 1/3, 1/3, 1/2, 4/9, 1/3, 11/24, 5/12, 1/3, 1/3, 1/2, 7/18, 29/60," +
                " 1/2, 149/414, 1/3, ...]",
                "{1/3=374651, 1/2=249663, 5/12=94086, 7/18=47193, 4/9=46703, 17/36=11928, 11/24=11697, 13/36=11650," +
                " 3/8=11621, 11/30=5962}",
                0.40627460249656705,
                5.237116000060525
        );
        range_Rational_Rational_helper(
                32,
                "1/3",
                "1/2",
                "[7024527887666203/18861820946139564, 9145/20642, 2803/8232, 3806720614996/8202276948735," +
                " 15311093555/41201563104, 241/640, 38712947/101936592, 94311353/268915692, 33161/80196, 71/144," +
                " 1/3, 5/12, 1/2, 16/39, 79/180, 2225887/5025972, 35/102, 16891/48240, 41/108, 51/140, ...]",
                "{1/3=60249, 1/2=31400, 5/12=28169, 7/18=14195, 4/9=14135, 13/36=6697, 3/8=6685, 11/24=6615," +
                " 17/36=6604, 2/5=3437}",
                0.41426247685353923,
                33.696076999997224
        );
        range_Rational_Rational_helper(
                4,
                "-1",
                "5/3",
                "[-1/9, 137/255, 1/3, 1, 5/3, -1, -1, 5/3, 7/9, -1, 1, 1/3, -1, -1, 5/3, -1/9, 7/5, 5/3, -119/207," +
                " -1, ...]",
                "{-1=374651, 5/3=249663, 1/3=94086, -1/9=47193, 7/9=46703, 11/9=11928, 1=11697, -5/9=11650," +
                " -1/3=11621, -7/15=5962}",
                0.1670603066320713,
                4.350258999958008
        );
        range_Rational_Rational_helper(
                32,
                "-1",
                "5/3",
                "[-1766438280722831/4715455236534891, 23381/30963, -911/1029, 8959775831281/8202276948735," +
                " -997858507/2575097694, -37/120, -1636954/6371037, -48537767/67228923, 1889/6683, 14/9, -1, 1/3," +
                " 5/3, 3/13, 31/45, 315253/418831, -43/51, -2204/3015, -7/27, -53/105, ...]",
                "{-1=60249, 5/3=31400, 1/3=28169, -1/9=14195, 7/9=14135, -5/9=6697, -1/3=6685, 1=6615, 11/9=6604," +
                " 1/15=3437}",
                0.29486629632591527,
                31.072729000007964
        );
        range_Rational_Rational_fail_helper(3, "0", "1");
        range_Rational_Rational_fail_helper(-1, "0", "1");
        range_Rational_Rational_fail_helper(4, "1", "0");
        range_Rational_Rational_fail_helper(4, "1/2", "1/3");
    }

    private static void intervalHelper(
            @NotNull Iterable<Interval> xs,
            @NotNull String output,
            @NotNull String topSampleCount,
            double bitSizeMean
    ) {
        List<Interval> sample = toList(take(DEFAULT_SAMPLE_SIZE, xs));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfIntegers(toList(map(Interval::bitLength, sample))), bitSizeMean);
    }

    private static void finitelyBoundedIntervals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double bitSizeMean
    ) {
        intervalHelper(P.withScale(meanBitSize).finitelyBoundedIntervals(), output, topSampleCount, bitSizeMean);
        P.reset();
    }

    private static void finitelyBoundedIntervals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).finitelyBoundedIntervals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testFinitelyBoundedIntervals() {
        finitelyBoundedIntervals_helper(
                6,
                "[[5, 221], [-1/2, 0], [0, 5/6], [0, 2], [-3/4, 0], [0, 1/6], [-14/3, 0], [-6, 0], [-1, 0]," +
                " [-16, -1/4], [0, 0], [0, 167/17], [0, 1], [0, 0], [0, 1/3], [-1, 1], [0, 10], [0, 0], [-5, 4/21]," +
                " [-1, 0], ...]",
                "{[0, 0]=224347, [0, 1]=55754, [-1, 0]=55558, [-1, 1]=14214, [0, 1/2]=14146, [1, 1]=14140," +
                " [-1/2, 0]=14088, [0, 3]=14072, [-3, 0]=14048, [-1, -1]=14002}",
                5.139956999987673
        );
        finitelyBoundedIntervals_helper(
                16,
                "[[-5/4, -1], [0, 1/2], [-1, 0], [-59/3, 1493/24932], [0, 3], [-6/1201, 5/19], [-24, -7/29], [0, 1]," +
                " [31/7787, 3/5], [1/21, 1/10], [-49/8, -2/937], [-3453, -10], [-739/31, 1/7], [-1/9, 3217/7]," +
                " [-5/11, 3/2], [-3, -2/13], [-14/3, 1/3], [-15, 1/87], [-42, 2/9], [-46/177, 11969], ...]",
                "{[0, 0]=11462, [-1, 0]=4695, [0, 1]=4595, [1, 1]=1879, [-1, -1]=1857, [0, 2]=1830, [-3, 0]=1828," +
                " [-2, 0]=1823, [-1, 1]=1805, [0, 1/2]=1791}",
                15.568145999994938
        );
        finitelyBoundedIntervals_helper(
                32,
                "[[-243045529/1963, -409/7232], [-47/15, 1/2], [-70/512703, 25056015375/8548], [-4/9, -1/7790]," +
                " [-238/29, 78/155], [-72/31, 1419/29086], [68578/49, 514016/3], [-2591362/23, 23]," +
                " [-1/122, 4266773419/17], [-455, -3656/177], [449/6, 3346], [0, 856/475357657], [-3, 3133/841]," +
                " [733/37, 2144/21], [-53/27, -15/53], [-2719/26, 5929/34], [3/332735, 26/5]," +
                " [-277/11, -1373/46121], [-3/19, 56820544/123], [-192790039594/15, 17/54], ...]",
                "{[0, 0]=1021, [-1, 0]=438, [0, 1]=419, [0, 2]=209, [0, 1/3]=208, [0, 1/2]=206, [-1/2, 0]=201," +
                " [-1, -1]=197, [0, 3]=195, [-1, 1]=190}",
                31.618885000011975
        );
        finitelyBoundedIntervals_fail_helper(5);
        finitelyBoundedIntervals_fail_helper(0);
        finitelyBoundedIntervals_fail_helper(-1);
    }

    private static void intervals_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double bitSizeMean
    ) {
        intervalHelper(P.withScale(meanBitSize).intervals(), output, topSampleCount, bitSizeMean);
        P.reset();
    }

    private static void intervals_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).intervals();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testIntervals() {
        intervals_helper(
                6,
                "[[1, 13], [0, 0], (-Infinity, 0], (-Infinity, Infinity), [-1/2, 0], (-Infinity, Infinity)," +
                " [-3/4, 0], [1/6, Infinity), [0, Infinity), (-Infinity, 1], (-Infinity, -1], [-1, 0]," +
                " (-Infinity, 0], [0, 6], (-Infinity, Infinity), [0, Infinity), (-Infinity, -2], (-Infinity, 0]," +
                " (-Infinity, 0], (-Infinity, Infinity), ...]",
                "{(-Infinity, Infinity)=136618, (-Infinity, 0]=98468, [0, Infinity)=97756, [0, 0]=70368," +
                " (-Infinity, -1]=24761, (-Infinity, 1]=24665, [-1, Infinity)=24632, [1, Infinity)=24487," +
                " [0, 1]=17600, [-1, 0]=17450}",
                3.146318999988329
        );
        intervals_helper(
                16,
                "[(-Infinity, 1/41], [-2/533, Infinity), [-221/3755, 1/18], (-Infinity, 2/13], [-1, Infinity)," +
                " [1493/24932, Infinity), (-Infinity, 1], [-1/6, 0], [0, 3], [-1/89, -1/1201], [3/19, 30/13]," +
                " [-1/29, 5/146], [-26/3, 0], (-Infinity, 1], [7/7787, 14/11], [3/5, 1], (-Infinity, 26]," +
                " [-49/8, 0], [31, Infinity), (-Infinity, -2/9], ...]",
                "{(-Infinity, Infinity)=25200, [0, Infinity)=13341, (-Infinity, 0]=13229, [0, 0]=7053," +
                " (-Infinity, -1]=5441, [-1, Infinity)=5387, (-Infinity, 1]=5376, [1, Infinity)=5369, [-1, 0]=2931," +
                " [0, 1]=2918}",
                12.45336999999764
        );
        intervals_helper(
                32,
                "[[-3/94, 5/4], [-31/15, 1/2], [-38/512703, 25056015375/8548], (-Infinity, -2/67], [-1/9, -1/7790]," +
                " [-15086/29, 410411/24], [1/7, 15017244/161], (-Infinity, -3/458722], [-10397738, -40/31]," +
                " [395/29086, 3217/571], [35810/49, 251872/3], [-1018498/23, 7], [-1/122, 4266773419/17]," +
                " [-584/177, 3346], (-Infinity, 23/475357657], [-3, -1/3], [573/841, 477/37], [-53/27, -3/53]," +
                " [-10/3, 3/25], [-1695/26, 3881/34], ...]",
                "{(-Infinity, Infinity)=6930, (-Infinity, 0]=2390, [0, Infinity)=2350, [1, Infinity)=1025," +
                " (-Infinity, -1]=1022, (-Infinity, 1]=1018, [-1, Infinity)=1006, [0, 0]=764, (-Infinity, 1/2]=496," +
                " (-Infinity, 2]=494}",
                28.10473700001665
        );
        intervals_fail_helper(5);
        intervals_fail_helper(0);
        intervals_fail_helper(-1);
    }

    private static void rationalsIn_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rationalsIn(Interval.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rationalsIn_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rationalsIn(Interval.read(a).get());
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalsIn() {
        rationalsIn_helper(
                4,
                "[0, 0]",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        rationalsIn_helper(
                32,
                "[0, 0]",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                0.0,
                1.000000000007918
        );
        rationalsIn_helper(
                4,
                "[1, 1]",
                "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...]",
                "{1=1000000}",
                1.000000000007918,
                2.000000000015836
        );
        rationalsIn_helper(
                32,
                "[1, 1]",
                "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...]",
                "{1=1000000}",
                1.000000000007918,
                2.000000000015836
        );
        rationalsIn_helper(
                4,
                "(-Infinity, Infinity)",
                "[3, -1/5, 1, -5, 0, 0, 5/6, -53/69, 3/11, -89/4, 0, 0, -19/15, 0, 0, -1, -1/3, -1, -22, 0, ...]",
                "{0=224431, 1=75632, -1=74893, -3=25026, 3=24951, -2=24833, 2=24829, 1/2=18804, -1/2=18754," +
                " 1/3=18690}",
                4459.875622663981,
                3.869968999988822
        );
        rationalsIn_helper(
                32,
                "(-Infinity, Infinity)",
                "[6499102/152003, -5488/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211," +
                " 12/35, -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3," +
                " -1/122038962404, -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, ...]",
                "{0=6058, 1=2808, -1=2781, -2=1355, -3=1351, -1/2=1317, 1/3=1315, -1/3=1300, 3=1285, 1/2=1261}",
                -3.784942556617747E71,
                31.82849000002398
        );
        rationalsIn_helper(
                4,
                "[1, 4]",
                "[2, 232/85, 5/2, 13/4, 4, 1, 1, 4, 3, 1, 13/4, 5/2, 1, 1, 4, 2, 37/10, 4, 34/23, 1, ...]",
                "{1=374651, 4=249663, 5/2=94086, 2=47193, 3=46703, 7/2=11928, 13/4=11697, 3/2=11650, 7/4=11621," +
                " 8/5=5962}",
                2.3129428449434144,
                4.068563999969932
        );
        rationalsIn_helper(
                32,
                "[1, 4]",
                "[1785133180405213/1047878941452198, 30700/10321, 1549/1372, 3056620702917/911364105415," +
                " 3866214915/2288975728, 569/320, 10397227/5663144, 58837649/44819282, 32653/13366, 31/8, 1, 5/2, 4," +
                " 31/13, 29/10, 2489351/837662, 20/17, 3491/2680, 11/6, 109/70, ...]",
                "{1=60249, 4=31400, 5/2=28169, 2=14195, 3=14135, 3/2=6697, 7/4=6685, 13/4=6615, 7/2=6604, 11/5=3437}",
                2.456724583363463,
                31.33094400000747
        );
        rationalsIn_helper(
                4,
                "(-Infinity, 1/2]",
                "[-1/6, -1/2, 1/2, 0, -1/2, 1/6, -7/2, -3/2, -1/2, 1/2, 1/2, -19/2, -5/6, -21/10, -31/14, 3/10," +
                " -3/2, 1/2, 0, -1/6, ...]",
                "{1/2=249425, -1/2=210197, 1/6=52787, -3/2=52379, 0=52243, -5/2=52158, 5/14=13246, -11/2=13230," +
                " -1/6=13226, 3/10=13202}",
                -6.7309163488312524,
                4.3459919999995815
        );
        rationalsIn_helper(
                32,
                "(-Infinity, 1/2]",
                "[-6287273648561185/304006, -7083608207149/97061240400, -2175/2, -93049/490, 1913237/3826703," +
                " -16057/46, 593253082237991784216589293/1186506164475983568433185976, -4805/6," +
                " -2456673075/1024810022, -734309875/2, -1243/2, 11849/23794, 138089109986050125/276178219972100476," +
                " 548186240515231/1096372481030472, -64789/127, -297381418059/2, 23253806/46526271," +
                " -10050183365861/1299654, -990867/4850, -3388804892095/46, ...]",
                "{1/2=31320, -1/2=5903, -5/2=2709, 1/6=2639, 0=2625, -3/2=2623, -7/2=1312, -13/2=1311, 3/10=1275," +
                " 5/14=1271}",
                -2.30035078376369E59,
                37.958985000008944
        );
        rationalsIn_helper(
                4,
                "[1/2, Infinity)",
                "[7/6, 3/2, 1/2, 1, 3/2, 5/6, 9/2, 5/2, 3/2, 1/2, 1/2, 21/2, 11/6, 31/10, 45/14, 7/10, 5/2, 1/2, 1," +
                " 7/6, ...]",
                "{1/2=249425, 3/2=210197, 5/6=52787, 5/2=52379, 1=52243, 7/2=52158, 9/14=13246, 13/2=13230," +
                " 7/6=13226, 7/10=13202}",
                7.73091634876883,
                5.011827999992238
        );
        rationalsIn_helper(
                32,
                "[1/2, Infinity)",
                "[6287273648865191/304006, 7180669447549/97061240400, 2177/2, 93539/490, 1913466/3826703, 16103/46," +
                " 593253082237991784216596683/1186506164475983568433185976, 4811/6, 3481483097/1024810022," +
                " 734309877/2, 1245/2, 11945/23794, 138089109986050351/276178219972100476," +
                " 548186240515241/1096372481030472, 64916/127, 297381418061/2, 23272465/46526271," +
                " 10050184665515/1299654, 995717/4850, 3388804892141/46, ...]",
                "{1/2=31320, 3/2=5903, 7/2=2709, 5/6=2639, 1=2625, 5/2=2623, 9/2=1312, 15/2=1311, 7/10=1275," +
                " 9/14=1271}",
                2.30035078376369E59,
                38.21444000001194
        );
        rationalsIn_fail_helper(3, "[0, 0]");
        rationalsIn_fail_helper(-1, "[0, 0]");
    }

    private static void rationalsNotIn_helper(
            int scale,
            @NotNull String a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        rationalHelper(
                P.withScale(scale).rationalsNotIn(Interval.read(a).get()),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
        P.reset();
    }

    private static void rationalsNotIn_fail_helper(int scale, @NotNull String a) {
        try {
            P.withScale(scale).rationalsNotIn(Interval.read(a).get());
            fail();
        } catch (IllegalStateException | IllegalArgumentException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalsNotIn() {
        rationalsNotIn_helper(
                4,
                "[0, 0]",
                "[3, -1/5, 1, -5, 5/6, -53/69, 3/11, -89/4, -19/15, -1, -1/3, -1, -22, -1/6, 6, -1/3, 2, -1, -1, -1," +
                " ...]",
                "{1=97333, -1=96977, -2=32128, -3=32119, 2=32103, 3=32101, 1/2=24320, -1/3=24086, -1/2=24065," +
                " 1/3=23954}",
                -1514.3998931402477,
                4.699111999987303
        );
        rationalsNotIn_helper(
                32,
                "[0, 0]",
                "[6499102/152003, -5488/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211," +
                " 12/35, -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3," +
                " -1/122038962404, -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, ...]",
                "{1=2829, -1=2795, -3=1364, -2=1363, -1/2=1324, 1/3=1321, -1/3=1310, 3=1293, 1/2=1268, 2=1249}",
                -3.784942556617747E71,
                32.0148380000219
        );
        rationalsNotIn_helper(
                4,
                "[1, 1]",
                "[3, -1/5, -5, 0, 0, 5/6, -53/69, 3/11, -89/4, 0, 0, -19/15, 0, 0, -1, -1/3, -1, -22, 0, -1/6, ...]",
                "{0=242751, -1=81169, 3=27053, -3=26989, -2=26900, 2=26854, 1/2=20361, -1/2=20301, 1/3=20188," +
                " -1/3=20185}",
                3405.7680966854173,
                4.0221769999945876
        );
        rationalsNotIn_helper(
                32,
                "[1, 1]",
                "[6499102/152003, -5488/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211," +
                " 12/35, -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3," +
                " -1/122038962404, -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, ...]",
                "{0=6079, -1=2788, -2=1359, -3=1358, -1/2=1322, 1/3=1316, -1/3=1303, 3=1288, 1/2=1262, 2=1246}",
                -3.784942556617747E71,
                31.911038000025872
        );
        rationalsNotIn_helper(
                4,
                "[1, 4]",
                "[472/477, -11, 1/2, 0, 9/2, -1, 0, 0, -64/5, -6, 1/2, 1/2, 0, -1, 2/3, 11/12, 2/3, 0, -5, 1/2, ...]",
                "{0=223597, 1/2=55949, -2=55869, 2/3=55831, 5=55568, -1=55502, 5/6=14135, 13/3=14108, -5=14098," +
                " -4=14077}",
                -69.41248621922566,
                4.310511999997506
        );
        rationalsNotIn_helper(
                32,
                "[1, 4]",
                "[-891837010519343/152003, -7035077586949/97061240400, -319, -46402/245, 208/229, -13/10," +
                " 1186506164475983568433185737/1186506164475983568433185976, -865/3, 1484539019/1484539043," +
                " 3693/3694, 11873/11897, 276178219972100459/276178219972100476, -251947550898343/161," +
                " 125683/129705, 123688/123689, 1419683/2069510, 1191960875/1191961124," +
                " -2531314675790/1694402446059, -52/3, -809035873/6664274, ...]",
                "{0=5822, -2=2754, 1/2=2750, 2/3=2657, -1=2629, 5/6=1323, 6/7=1299, 3/4=1286, 1/3=1281, -3=1263}",
                -4.8445650251622075E53,
                38.611619000014095
        );
        rationalsNotIn_helper(
                4,
                "(-Infinity, 1/2]",
                "[7/6, 3/2, 1, 3/2, 5/6, 9/2, 5/2, 3/2, 21/2, 11/6, 31/10, 45/14, 7/10, 5/2, 1, 7/6, 4, 4/7, 3/2," +
                " 7/12, ...]",
                "{3/2=279506, 5/6=70136, 5/2=69870, 1=69744, 7/2=69442, 7/6=17636, 7/10=17626, 3/4=17608," +
                " 13/2=17601, 9/2=17533}",
                9.925816351081805,
                5.681415999961638
        );
        rationalsNotIn_helper(
                32,
                "(-Infinity, 1/2]",
                "[6287273648865191/304006, 7180669447549/97061240400, 2177/2, 93539/490, 1913466/3826703, 16103/46," +
                " 593253082237991784216596683/1186506164475983568433185976, 4811/6, 3481483097/1024810022," +
                " 734309877/2, 1245/2, 11945/23794, 138089109986050351/276178219972100476," +
                " 548186240515241/1096372481030472, 64916/127, 297381418061/2, 23272465/46526271," +
                " 10050184665515/1299654, 995717/4850, 3388804892141/46, ...]",
                "{3/2=6074, 7/2=2791, 5/6=2722, 5/2=2710, 1=2710, 15/2=1356, 9/2=1355, 9/14=1316, 7/10=1311," +
                " 11/2=1302}",
                2.30035078376369E59,
                39.36069900002264
        );
        rationalsNotIn_helper(
                4,
                "[1/2, Infinity)",
                "[-1/6, -1/2, 0, -1/2, 1/6, -7/2, -3/2, -1/2, -19/2, -5/6, -21/10, -31/14, 3/10, -3/2, 0, -1/6, -3," +
                " 3/7, -1/2, 5/12, ...]",
                "{-1/2=279506, 1/6=70136, -3/2=69870, 0=69744, -5/2=69442, -1/6=17636, 3/10=17626, 1/4=17608," +
                " -11/2=17601, -7/2=17533}",
                -8.92581635109024,
                4.794851000002666
        );
        rationalsNotIn_helper(
                32,
                "[1/2, Infinity)",
                "[-6287273648561185/304006, -7083608207149/97061240400, -2175/2, -93049/490, 1913237/3826703," +
                " -16057/46, 593253082237991784216589293/1186506164475983568433185976, -4805/6," +
                " -2456673075/1024810022, -734309875/2, -1243/2, 11849/23794, 138089109986050125/276178219972100476," +
                " 548186240515231/1096372481030472, -64789/127, -297381418059/2, 23253806/46526271," +
                " -10050183365861/1299654, -990867/4850, -3388804892095/46, ...]",
                "{-1/2=6074, -5/2=2791, 1/6=2722, -3/2=2710, 0=2710, -13/2=1356, -7/2=1355, 5/14=1316, 3/10=1311," +
                " -9/2=1302}",
                -2.30035078376369E59,
                39.096911000018515
        );
        rationalsNotIn_fail_helper(3, "[0, 0]");
        rationalsNotIn_fail_helper(-1, "[0, 0]");
        rationalsNotIn_fail_helper(4, "(-Infinity, Infinity)");
    }

    private static void rationalVectors_helper(
            @NotNull Iterable<RationalVector> input,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoordinateBitSize
    ) {
        List<RationalVector> sample = toList(take(DEFAULT_SAMPLE_SIZE, input));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfIntegers(toList(map(RationalVector::dimension, sample))), meanDimension);
        aeq(meanOfIntegers(toList(concatMap(v -> map(Rational::bitLength, v), sample))), meanCoordinateBitSize);
        P.reset();
    }

    private static void rationalVectors_int_helper(
            int scale,
            int dimension,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoordinateBitSize
    ) {
        rationalVectors_helper(
                P.withScale(scale).rationalVectors(dimension),
                output,
                topSampleCount,
                meanDimension,
                meanCoordinateBitSize
        );
    }

    private static void rationalVectors_int_fail_helper(int scale, int dimension) {
        try {
            P.withScale(scale).rationalVectors(dimension);
            fail();
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalVectors_int() {
        rationalVectors_int_helper(
                3,
                0,
                "[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], ...]",
                "{[]=1000000}",
                0.0,
                0.0
        );
        rationalVectors_int_helper(
                5,
                3,
                "[[1/36, -1, -29/4], [-1, 5/2, -53/47], [1/89, -2, -5/6], [-4, -22, -2/683], [0, -1/50, 0]," +
                " [-4, -7/2, 1/19], [-1/2, 0, -1/6], [-1/367, 17/10, 0], [12757/4452, 2, -1/16], [-1/4, -1, -6268]," +
                " [3, -718/59937, 1], [-1/38, -2/25, 1], [-5/6, 2, 14], [17/24, 1/7, -1], [0, 1, 15/619]," +
                " [1, 2, -1/7], [-1/7, -29/19562, 0], [14/3, 0, 10], [1/4, 1/6, -9/4], [8, 16, -1/6], ...]",
                "{[0, 0, 0]=4772, [0, 0, 1]=1645, [0, 1, 0]=1621, [1, 0, 0]=1612, [-1, 0, 0]=1603, [0, 0, -1]=1597," +
                " [0, -1, 0]=1591, [3, 0, 0]=583, [1, 1, 0]=575, [0, 1, 1]=570}",
                2.9999999999775233,
                4.807125333432253
        );
        rationalVectors_int_helper(
                10,
                8,
                "[[21/13, 2304798/125, -2, 1/25, -117/219224, -67/5785, -70/8797, -10]," +
                " [2/3, 62, -4551, 2/227, -239/978, 1/47084144, 0, -2/35]," +
                " [-8/5, -1/6268, -504064/13, -238/5, -8/249, -15/13, 0, 0]," +
                " [0, 3/238, 122224/59, 19, -7/3839, -1130/15659, 479, 1/12]," +
                " [2/47, 438, 11, -98, 1/6, 1/926, -97/41, 1/15], [-30, -1/5, 139/9, -70/167, 3, 2/23, 23/7, 1/37]," +
                " [2260, -1/5, -49/5, 23/3, -7, -7, 49465/2, 9/13]," +
                " [1, 0, 1/344, 3954017/6454, -3, 13/31, -26/1537, -15]," +
                " [1/3, -841, -1/8, 13/53, 5/4, -21, 3/1760, 0], [13/5, 6312/23, 1/3, -1/7, -34/15, -1, 20, 1/9]," +
                " [5395/2, 3, -149/7, -125/308, 1/69, -3618, -5656/31, 1/11]," +
                " [1/59, 33, -9/76, 1, -1, 246/48401, 3/112, 111]," +
                " [-1/4, 19/11, 237/832, 1/4, 14, 3/5, -58/111, -2/4079803]," +
                " [5, -12, -5/567, -1/3, 21, 280/11, -20672/9, 1/519]," +
                " [-15/1706, -1/22, -2/31, 1/3, -43124/2505, 3/2, -1, -3/2]," +
                " [-4, 2/11, 3/3361, -3/11075, 0, -1/2, 53/9, 1/78]," +
                " [-383, -1/40, 1/2, 0, -30725/11, -1/46542, -2588/93967625, -1]," +
                " [-6299/2, -1083, 5/7, -3, -5/14, -13/3473, -729/2, 0]," +
                " [1/454, -78, 186, 1/63, -40, 37, -9/2, -893924/13]," +
                " [13, -1, 17, 79/3, 7/131, -3239437/3, 71/2, 0], ...]",
                "{[21/13, 2304798/125, -2, 1/25, -117/219224, -67/5785, -70/8797, -10]=1," +
                " [2/3, 62, -4551, 2/227, -239/978, 1/47084144, 0, -2/35]=1," +
                " [-8/5, -1/6268, -504064/13, -238/5, -8/249, -15/13, 0, 0]=1," +
                " [0, 3/238, 122224/59, 19, -7/3839, -1130/15659, 479, 1/12]=1," +
                " [2/47, 438, 11, -98, 1/6, 1/926, -97/41, 1/15]=1," +
                " [-30, -1/5, 139/9, -70/167, 3, 2/23, 23/7, 1/37]=1," +
                " [2260, -1/5, -49/5, 23/3, -7, -7, 49465/2, 9/13]=1," +
                " [1, 0, 1/344, 3954017/6454, -3, 13/31, -26/1537, -15]=1," +
                " [1/3, -841, -1/8, 13/53, 5/4, -21, 3/1760, 0]=1, [13/5, 6312/23, 1/3, -1/7, -34/15, -1, 20, 1/9]=1}",
                8.000000000063345,
                9.833448374912013
        );
        rationalVectors_int_fail_helper(3, -1);
        rationalVectors_int_fail_helper(2, 0);
    }

    private static void rationalVectors_helper(
            int scale,
            int secondaryScale,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoordinateBitSize
    ) {
        rationalVectors_helper(
                P.withScale(scale).withSecondaryScale(secondaryScale).rationalVectors(),
                output,
                topSampleCount,
                meanDimension,
                meanCoordinateBitSize
        );
    }

    private static void rationalVectors_fail_helper(int scale, int secondaryScale) {
        try {
            P.withScale(scale).withSecondaryScale(secondaryScale).rationalVectors();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalVectors() {
        rationalVectors_helper(
                3,
                1,
                "[[3/221, 1, 1/2], [], [3, -2/3], [], [], [3], [], [0], [], [0], [], [], [], [], [], [], [], [0]," +
                " [0, -3/4], [], ...]",
                "{[]=500592, [0]=89734, [1]=22304, [-1]=22152, [0, 0]=15992, [3]=5725, [2]=5665, [1/2]=5635," +
                " [-1/3]=5629, [-3]=5622}",
                0.9992619999977276,
                2.7824344366226037
        );
        rationalVectors_helper(
                5,
                3,
                "[[10/3, -20, -1/10, -29/4, -1, 5/2], [-89/2, -1/427, -5/6, -4, -22, -2/683, 0], [0, -4, -7/2]," +
                " [19, 2], [0, -1/6, -1/367, 17/10, 0]," +
                " [-4452, 1, -1/4, -1, -6268, 3, -718/59937, 1, -1/38, -2/25, 1, -5/6, 2, 14, 17/24, 1/7, -1, 0, 1," +
                " 15/619, 1], [], [2, -1/7, -1/7, -29/19562, 0], [0, 10, 1/4, 1/6, -9/4], [], [-1/119, 8]," +
                " [0, -1/6, 11/2, -24/47, -2/11], [-7/2, 1/10, 3], [-7/41]," +
                " [1/3, 0, 0, 0, -17, 1/3, 0, 0, -3/11, 1/2, -1, -22/3, -3623/3], [1/2, -2/5], [1], [7/87], [-3/13]," +
                " [-1/2, 2/5, 468, -26], ...]",
                "{[]=250130, [0]=31725, [1]=10514, [-1]=10460, [0, 0]=4066, [1/3]=3614, [-2]=3585, [-1/2]=3511," +
                " [3]=3510, [-3]=3479}",
                3.0012729999915444,
                4.8070228865365285
        );
        rationalVectors_helper(
                32,
                8,
                "[[-15747517/2734092316245, -28331/46647, -232/15, 1/2, 276254993974227357/8548, -1/211, 12/35," +
                " -22652/243969555, 148267/24, 4379/132063031896244604, 3/533422527609160, 3, -1/122038962404," +
                " -33/712, -65857659355/672, -2268840, 16722136057826907622552/7, 15," +
                " -1706054384/1080390895815402467, -9/17, -11207, -3, -156/5, 2269/945835525, -5/1016, 7/31," +
                " -4688/65165, -1818/329, 3/726476, -60543402068/171, 253/62474849347023913473]," +
                " [-1928/233, 5604689743/6127, 235/5749], [124, -3737/84262208]," +
                " [2/217270739949325, -333/631, -2631947713/11153542, -5/207, 2304/827, -146860746/326157911," +
                " -361027568105/8283961]," +
                " [-151456133/1102, 3/221919869658758635, -365558/52611, -1/219, -1018454567/1766," +
                " 177327876612602193/138109844, 0], [9831/9545, -77060316718/843]," +
                " [-110263446, -5976420267/2755, -41956/3409, 4/6681, 358741282/10368272926801]," +
                " [767343046307022877, -5/591, -22/5], [-89801/53077, -4/127, -6]," +
                " [1/4, 23465/4, 205/218, -213070534709022875/702, 2/3470639612785, 17/860, -197069913331771/6," +
                " 197/6665, 86543021/35, -112/75533, -36406879723/227065385, 7/1459746, 1/43, -45/12438862, -2/635]," +
                " [47/983125734144, 36/457, -13165/11, -6720, -3098148526549/2439, -28085047/21652, 3/19315," +
                " 340862/3809, 10601/128827517, 158/38989, 447082221779799, 38262936027245/7717, -73/144," +
                " 44090397799/24, -3717923047/12, 20273/5, -3/53]," +
                " [-828/69322987, -2561, -1673935675203/34, -36327313, 183900620/3, -1351/51, -10107826575/4693298," +
                " 8/135785, -653/723856176, 44597161200/56163343, 1/604, 571230169274/157," +
                " -272537553430931180164/27, -18, -8/58163, 616306/3228761, -6/34712945, 1/26007795," +
                " 19623/20795898263], [179/517959818, -25/11, 299041/1336]," +
                " [-65/196, 6158349839/555, 39327858286/51545, -8147/3495, -6768885/26293454], []," +
                " [18511/6, 1969/1130164703346515194624, 3681/2, 14/575, -83/26, 774921559/42, -491148," +
                " 1004789521/199143, -14/1468977, 1769/11, -5/276, 2/183519, -3183901/51, -1/10540979," +
                " -22735273909316/3, 31597/654745433, -25/3]," +
                " [-61/78640740, 85/48312, 16841264489/5, -3/21707687219147, 36/53, -27/16342]," +
                " [1260/32194717, -1154/57, -1634/1010689533077, -4756437963, 247985/604881319716, -7/2, 2290/9," +
                " -1/81, 6, 97/9408237], [945606/236815, 3], [], ...]",
                "{[]=110958, [0]=590, [-1]=268, [1]=258, [-1/3]=146, [1/2]=144, [3]=142, [-2]=134, [-3]=125," +
                " [-1/2]=123}",
                7.994579000016383,
                31.793640290456956
        );
        rationalVectors_fail_helper(2, 1);
        rationalVectors_fail_helper(3, 0);
    }

    private static void rationalVectorsAtLeast_helper(
            int scale,
            int secondaryScale,
            int minDimension,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoordinateBitSize
    ) {
        rationalVectors_helper(
                P.withScale(scale).withSecondaryScale(secondaryScale).rationalVectorsAtLeast(minDimension),
                output,
                topSampleCount,
                meanDimension,
                meanCoordinateBitSize
        );
    }

    private static void rationalVectorsAtLeast_fail_helper(int scale, int secondaryScale, int minDimension) {
        try {
            P.withScale(scale).withSecondaryScale(secondaryScale).rationalVectorsAtLeast(minDimension);
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalVectorsAtLeast() {
        rationalVectorsAtLeast_helper(
                3,
                1,
                0,
                "[[3/221, 1, 1/2], [], [3, -2/3], [], [], [3], [], [0], [], [0], [], [], [], [], [], [], [], [0]," +
                " [0, -3/4], [], ...]",
                "{[]=500592, [0]=89734, [1]=22304, [-1]=22152, [0, 0]=15992, [3]=5725, [2]=5665, [1/2]=5635," +
                " [-1/3]=5629, [-3]=5622}",
                0.9992619999977276,
                2.7824344366226037
        );
        rationalVectorsAtLeast_helper(
                5,
                3,
                0,
                "[[10/3, -20, -1/10, -29/4, -1, 5/2], [-89/2, -1/427, -5/6, -4, -22, -2/683, 0], [0, -4, -7/2]," +
                " [19, 2], [0, -1/6, -1/367, 17/10, 0]," +
                " [-4452, 1, -1/4, -1, -6268, 3, -718/59937, 1, -1/38, -2/25, 1, -5/6, 2, 14, 17/24, 1/7, -1, 0, 1," +
                " 15/619, 1], [], [2, -1/7, -1/7, -29/19562, 0], [0, 10, 1/4, 1/6, -9/4], [], [-1/119, 8]," +
                " [0, -1/6, 11/2, -24/47, -2/11], [-7/2, 1/10, 3], [-7/41]," +
                " [1/3, 0, 0, 0, -17, 1/3, 0, 0, -3/11, 1/2, -1, -22/3, -3623/3], [1/2, -2/5], [1], [7/87], [-3/13]," +
                " [-1/2, 2/5, 468, -26], ...]",
                "{[]=250130, [0]=31725, [1]=10514, [-1]=10460, [0, 0]=4066, [1/3]=3614, [-2]=3585, [-1/2]=3511," +
                " [3]=3510, [-3]=3479}",
                3.0012729999915444,
                4.8070228865365285
        );
        rationalVectorsAtLeast_helper(
                5,
                3,
                1,
                "[[10/3, -20, -1/10, -29/4, -1], [-2/53, 47/3, -89/2, -1/427], [5/9, -4, -22, -2/683], [1/2]," +
                " [0, -4], [-5/7], [3/19, -1/2, 0], [-1/367, 17/10], [-2404], [1], [-1/4], [5], [0]," +
                " [-3/718, 1, -1/38], [-1/5, 1, -5/6], [-1/14, 17/24, 1/7], [-5/4], [6, 0, 0, 1, 15/619]," +
                " [-1/35, 2], [-1, -1/7], ...]",
                "{[0]=56309, [1]=18833, [-1]=18812, [0, 0]=6471, [2]=6373, [-1/2]=6343, [1/3]=6337, [-2]=6275," +
                " [1/2]=6238, [3]=6225}",
                2.9984189999898554,
                4.808294971497336
        );
        rationalVectorsAtLeast_helper(
                5,
                3,
                2,
                "[[1/13, 1/36, -1, -29/4, -1], [3/2, -53/47], [-89/2, -1/427, -5/6, -4, -22, -2/683], [1/2, 1/2]," +
                " [-18, 1], [2/3, 19, 2], [5/2, -24], [-1/367, 17/10], [-2404, 1], [-1/4, -1]," +
                " [-1148, 3, -718/59937, 1, -1/38], [-1/25, 1], [-5/6, 2], [6, 17/24], [-1, 0], [0, 1]," +
                " [3/619, 1, 2, -1/7], [-1/3, -29/19562, 0], [0, 10, 1/4], [-9/4, 8, 16], ...]",
                "{[0, 0]=14361, [1, 0]=4898, [-1, 0]=4846, [0, -1]=4780, [0, 1]=4654, [0, 2]=1642, [-3, 0]=1621," +
                " [0, -2]=1613, [0, 1/2]=1609, [-1/2, 0]=1603}",
                3.0014039999687,
                4.806596179622499
        );
        rationalVectorsAtLeast_helper(
                10,
                8,
                0,
                "[[-489/2, -1/2, 25/53, -2/171, -70/8797, -10, 2/3, 62, -4551, 2/227, -239/978, 1/47084144, 0," +
                " -2/35, -8/5, -1/6268, -504064/13, -238/5, -8/249, -15/13, 0, 0, 0, 3/238, 122224/59, 19, -7/3839," +
                " -1130/15659, 479, 1/12, 2/47], [438, 11], [-98, 1/6, 1/926]," +
                " [-58/97, 1/15, -30, -1/5, 139/9, -70/167, 3, 2/23, 23/7, 1/37, 2260, -1/5]," +
                " [-49/5, 23/3, -7, -7, 49465/2, 9/13, 1, 0, 1/344, 3954017/6454, -3, 13/31, -26/1537, -15, 1/3," +
                " -841, -1/8, 13/53, 5/4, -21, 3/1760], [], [21/5]," +
                " [26, 3, 15/34, -1, 20, 1/9, 5395/2, 3, -149/7, -125/308, 1/69, -3618]," +
                " [47, -19, -29926, -59/17, 2, 3763/9], [2, -1, 246/48401, 3/112, 111, -1/4], []," +
                " [-140502/19, 11/237, -1344/5, -25/118, 3, -3/4, -58759/58, -399/631, -2/4079803, 5]," +
                " [-20/41, -394/13, -1/3, 21, 280/11], [-187/834]," +
                " [1/519, -15/1706, -1/22, -2/31, 1/3, -43124/2505, 3/2, -1, -3/2, -4, 2/11, 3/3361, -3/11075, 0]," +
                " [-2, -4, 2/21], [-219/55, 1/78, -383], [1/2], []," +
                " [-1/1029, -11/28, 6, -2588/93967625, -1, -6299/2, -1083, 5/7, -3, -5/14, -13/3473, -729/2], ...]",
                "{[]=111082, [0]=5072, [-1]=2073, [1]=2024, [1/2]=924, [3]=924, [-3]=914, [2]=886, [-2]=865," +
                " [-1/3]=835}",
                8.013159000016772,
                9.830493816441328
        );
        rationalVectorsAtLeast_helper(
                10,
                8,
                3,
                "[[85/76574, -233/2, -1/2, 25/53, -2/171, -70/8797, -10, 2/3]," +
                " [1/967, 2, 9/2, -92/15, -239/978, 1/47084144, 0, -2/35, -8/5]," +
                " [-97348/41, 16010/10161, -238/5, -8/249]," +
                " [-56/23, 0, 0, 0, 3/238, 122224/59, 19, -7/3839, -1130/15659], [1/18, 479, 1/12, 2/47, 438]," +
                " [-7, -10/3, 2462/21649, -26/97, 1/15, -30, -1/5]," +
                " [-5/14, -11815/27, 3, 2/23, 23/7, 1/37, 2260, -1/5, -49/5, 23/3, -7]," +
                " [-115/11969, 29, -1, 3954017/6454, -3, 13/31], [-19/9, -26/1537, -15], [-841, -1/8, 13/53, 5/4]," +
                " [2/21, 3, -1760, 13/5, 6312/23, 1/3, -1/7, -34/15], [-1/58, 1498/115, -1/6, 1/9]," +
                " [-8/3, 3/67, -3/2, -125/308, 1/69, -3618, -5656/31, 1/11, 1/59, 33, -9/76, 1, -1, 246/48401," +
                " 3/112, 111], [4843/54, 5/3, 19/11]," +
                " [-2368/5, -25/118, 3, -3/4, -58759/58, -399/631, -2/4079803, 5, -12, -5/567, -1/3]," +
                " [3/13, 1/152, -7], [-20672/9, 1/519, -15/1706, -1/22, -2/31, 1/3, -43124/2505, 3/2, -1, -3/2]," +
                " [0, 2/11, 3/3361, -3/11075, 0, -1/2]," +
                " [174, 146/383, 1/2, 0, -30725/11, -1/46542, -2588/93967625, -1, -6299/2]," +
                " [2/571, 0, 5/7, -3, -5/14, -13/3473, -729/2, 0, 1/454, -78], ...]",
                "{[0, 0, 0]=28, [0, -1, 0]=11, [0, 0, -1]=10, [1, 0, 0]=9, [0, 0, 1/2]=8, [1, -1, 0]=8," +
                " [-1, 0, 0]=7, [0, 0, 1/3]=7, [0, 0, 1]=7, [-1, 1, 0]=7}",
                8.010402000000056,
                9.831849886724278
        );
        rationalVectorsAtLeast_helper(
                10,
                8,
                7,
                "[[1/13, 2304798/125, -2, 1/25, -117/219224, -67/5785, -70/8797, -10, 2/3, 62]," +
                " [-17, 2/227, -239/978, 1/47084144, 0, -2/35, -8/5, -1/6268, -504064/13, -238/5, -8/249, -15/13, 0," +
                " 0], [1/3, 238/9949, 229/11, -1/3, -1130/15659, 479, 1/12]," +
                " [2/47, 438, 11, -98, 1/6, 1/926, -97/41, 1/15]," +
                " [-1/3, -1/5, 139/9, -70/167, 3, 2/23, 23/7, 1/37, 2260, -1/5, -49/5, 23/3, -7, -7]," +
                " [-46/51, 49465/2, 9/13, 1, 0, 1/344, 3954017/6454, -3]," +
                " [37/33, 13/31, -26/1537, -15, 1/3, -841, -1/8], [13/53, 5/4, -21, 3/1760, 0, 13/5, 6312/23, 1/3]," +
                " [-34/15, -1, 20, 1/9, 5395/2, 3, -149/7, -125/308]," +
                " [1/69, -3618, -5656/31, 1/11, 1/59, 33, -9/76], [-1, 246/48401, 3/112, 111, -1/4, 19/11, 237/832]," +
                " [3/25, 1/4, 14, 3/5, -58/111, -2/4079803, 5]," +
                " [-1, -5/567, -1/3, 21, 280/11, -20672/9, 1/519, -15/1706, -1/22]," +
                " [-31, -1, 3332/3, -43124/2505, 3/2, -1, -3/2, -4, 2/11, 3/3361]," +
                " [-1/11075, 0, -1/2, 53/9, 1/78, -383, -1/40, 1/2, 0]," +
                " [-1029/11, -1/46542, -2588/93967625, -1, -6299/2, -1083, 5/7, -3, -5/14, -13/3473, -729/2, 0," +
                " 1/454], [-46, 186, 1/63, -40, 37, -9/2, -893924/13]," +
                " [1, -1, 17, 79/3, 7/131, -3239437/3, 71/2, 0, -2, -203/177, 2/3]," +
                " [-209/10, -157/3, -1, 1/11, -246, 3/79, 1/6829], [-1/6, -4, 6, -24, 4, 3/38, 11/4], ...]",
                "{[1/13, 2304798/125, -2, 1/25, -117/219224, -67/5785, -70/8797, -10, 2/3, 62]=1," +
                " [-17, 2/227, -239/978, 1/47084144, 0, -2/35, -8/5, -1/6268, -504064/13, -238/5, -8/249, -15/13, 0," +
                " 0]=1, [1/3, 238/9949, 229/11, -1/3, -1130/15659, 479, 1/12]=1," +
                " [2/47, 438, 11, -98, 1/6, 1/926, -97/41, 1/15]=1," +
                " [-1/3, -1/5, 139/9, -70/167, 3, 2/23, 23/7, 1/37, 2260, -1/5, -49/5, 23/3, -7, -7]=1," +
                " [-46/51, 49465/2, 9/13, 1, 0, 1/344, 3954017/6454, -3]=1," +
                " [37/33, 13/31, -26/1537, -15, 1/3, -841, -1/8]=1," +
                " [13/53, 5/4, -21, 3/1760, 0, 13/5, 6312/23, 1/3]=1," +
                " [-34/15, -1, 20, 1/9, 5395/2, 3, -149/7, -125/308]=1, [1/69, -3618, -5656/31, 1/11, 1/59, 33," +
                " -9/76]=1}",
                8.001091000060933,
                9.833612191283711
        );
        rationalVectorsAtLeast_fail_helper(3, 1, 1);
        rationalVectorsAtLeast_fail_helper(3, 1, 2);
        rationalVectorsAtLeast_fail_helper(2, 1, 0);
    }

    private static void reducedRationalVectors_int_helper(
            int scale,
            int dimension,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoordinateBitSize
    ) {
        rationalVectors_helper(
                P.withScale(scale).reducedRationalVectors(dimension),
                output,
                topSampleCount,
                meanDimension,
                meanCoordinateBitSize
        );
    }

    private static void reducedRationalVectors_int_fail_helper(int scale, int dimension) {
        try {
            P.withScale(scale).reducedRationalVectors(dimension);
            fail();
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testReducedRationalVectors_int() {
        reducedRationalVectors_int_helper(
                1,
                0,
                "[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], ...]",
                "{[]=1000000}",
                0.0,
                0.0
        );
        reducedRationalVectors_int_helper(
                2,
                1,
                "[[1], [0], [0], [1], [0], [0], [1], [0], [0], [1], [1], [1], [0], [0], [0], [0], [1], [1], [0]," +
                " [0], ...]",
                "{[0]=750027, [1]=249973}",
                1.000000000007918,
                1.2499729999900737
        );
        reducedRationalVectors_int_helper(
                5,
                3,
                "[[1, 1, 1256222/21], [1, 9, -117], [1, 1/9, -92/9], [1, -1/2, -1], [1, -40320/1303, -13/7818]," +
                " [1, -1/5, 62/5], [1, 17/633, -8/211], [1, 1, 111], [1, 91/122224, 11/122224], [1, 223/114, 0]," +
                " [1, 12, -152], [1, 47/2, -1/2], [1, 0, -4/7], [1, -13/51455, -97/102910], [1, 0, 15/41]," +
                " [1, -498, 3], [0, 1, -15/2], [1, 7/15, 0], [0, 1, -730/29], [1, -17/766, 9/766], ...]",
                "{[0, 0, 0]=11640, [0, 0, 1]=4833, [1, 0, 0]=4814, [0, 1, 0]=4750, [1, 1, 0]=2075, [1, -1, 0]=2057," +
                " [1, 0, -1]=2053, [0, 1, 1]=2021, [0, 1, -1]=2011, [1, 0, 1]=1978}",
                2.9999999999775233,
                6.870228666794007
        );
        reducedRationalVectors_int_helper(
                10,
                8,
                "[[1, 9/136, 1/612, -29/153, -1/408, 1/612, -1/1224, -239/1224]," +
                " [1, -2404/5896747328932606365, 0, 6/655194147659178485, -16/5896747328932606365," +
                " -1/310355122575400335, -4/5896747328932606365, -5510881/1965582442977535455]," +
                " [1, -454955/4146519, -311/4146519, -227147/4146519, 35021765/2764346, -2/4146519, 83/2764346," +
                " 5/8293038]," +
                " [1, 3/368648822968, 51089054789/368648822968, 11/368648822968, 0, -7/368648822968," +
                " -144651/184324411484, -1283/368648822968], [1, -1150/9, 1/18, 2/9, -49/18, -29074003/9, 47/18," +
                " -5/3]," +
                " [1, -506/87, -2/87, -111061034/87, 0, -739/87, 101342/87, 345112274/87]," +
                " [0, 1, -54/398291, 1922340940521/796582, -9/3186328, 5/3186328, -3015/3186328, 0]," +
                " [1, 1105224/3133, 122886/241, -1/241, -248/3133, 3/3133, -7/3133, 7182/3133]," +
                " [1, 1/6, -38587, -9/2, -1/3, 25/3, 132381/2, 56/3]," +
                " [1, 27/7, -192, -956783/7, -198077/7, 207/7, 0, 44117477702/7]," +
                " [1, -51/12544, -140539237/6272, -1161315/6272, -174785977915/12544, -1543/12544, -54655/6272," +
                " -1/12544], [1, 36587/22, 32359/22, -65/11, -7764/11, -117129/22, 1, 0]," +
                " [1, -1026377047819/81, -1/486, -95/486, -155/486, -1/486, -146275/486, 0]," +
                " [1, -14/5, -12/5, -6/5, -21, 6/5, -329/5, 5994968441128/5]," +
                " [0, 1, -86/203, -28575162030/29, -79595301742/203, 13/203, 451/203, -23971/203]," +
                " [1, 0, 2/209, 281/209, -6288/209, 772/209, 1377/209, -158207289/209]," +
                " [1, -11637/252307688, 1/252307688, -1/504615376, -61/504615376, 21/126153844, -3/252307688," +
                " 1/504615376], [1, 717/2, -12, -74, 37841/2, -1423414505/2, -3076, -3/2]," +
                " [1, 15/1402, 3/1402, 254284349/2804, -37/701, 7/1402, 3/2804, 4633/701]," +
                " [1, -7/5, 79211053/5, 449/4, -53/10, 1/20, 21493072257233/20, 5767973249/20], ...]",
                "{[1, 9/136, 1/612, -29/153, -1/408, 1/612, -1/1224, -239/1224]=1," +
                " [1, -2404/5896747328932606365, 0, 6/655194147659178485, -16/5896747328932606365," +
                " -1/310355122575400335, -4/5896747328932606365, -5510881/1965582442977535455]=1," +
                " [1, -454955/4146519, -311/4146519, -227147/4146519, 35021765/2764346, -2/4146519, 83/2764346," +
                " 5/8293038]=1," +
                " [1, 3/368648822968, 51089054789/368648822968, 11/368648822968, 0, -7/368648822968," +
                " -144651/184324411484, -1283/368648822968]=1, [1, -1150/9, 1/18, 2/9, -49/18, -29074003/9, 47/18," +
                " -5/3]=1," +
                " [1, -506/87, -2/87, -111061034/87, 0, -739/87, 101342/87, 345112274/87]=1," +
                " [0, 1, -54/398291, 1922340940521/796582, -9/3186328, 5/3186328, -3015/3186328, 0]=1," +
                " [1, 1105224/3133, 122886/241, -1/241, -248/3133, 3/3133, -7/3133, 7182/3133]=1," +
                " [1, 1/6, -38587, -9/2, -1/3, 25/3, 132381/2, 56/3]=1, [1, 27/7, -192, -956783/7, -198077/7, 207/7," +
                " 0, 44117477702/7]=1}",
                8.000000000063345,
                16.692675999563708
        );
        reducedRationalVectors_int_fail_helper(1, -1);
        reducedRationalVectors_int_fail_helper(0, 0);
    }

    private static void reducedRationalVectors_helper(
            int scale,
            int secondaryScale,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoordinateBitSize
    ) {
        rationalVectors_helper(
                P.withScale(scale).withSecondaryScale(secondaryScale).reducedRationalVectors(),
                output,
                topSampleCount,
                meanDimension,
                meanCoordinateBitSize
        );
    }

    private static void reducedRationalVectors_fail_helper(int scale, int secondaryScale) {
        try {
            P.withScale(scale).withSecondaryScale(secondaryScale).reducedRationalVectors();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testReducedRationalVectors() {
        reducedRationalVectors_helper(
                1,
                1,
                "[[1, 85/3, 0], [0], [], [0], [0], [1], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], ...]",
                "{[]=646910, [0]=161250, [0, 0]=40554, [1]=40456, [1, 0]=10142, [0, 0, 0]=10071, [0, 1]=10042," +
                " [0, 0, 1]=2582, [1, 1]=2546, [1, 0, 0]=2540}",
                0.6515059999979717,
                1.6404990898138534
        );
        reducedRationalVectors_helper(
                5,
                3,
                "[[1, 1256222/85, -233/85, -1/85, 0, 1/85], [1, 0, -8, 2], [1, 0, -4551/94], [1, -23, -7/4, 1/4]," +
                " [1, -224, 1, -4, 633, 17], [1], [0]," +
                " [1, 91/38, 11/38, 0, -7/38, 16127/38, -309/19, -15659/38, -1/38, 3, 223/38, 0]," +
                " [0, 1, -1/47, -46/47], [], [1, 7/2, -7, 0, 0, -1/2, 2, 0], [1, -5/267, -38/267, -11815/267]," +
                " [1, 1/2, -15/2], [], [1, 0, -37/15], [], [0], [], [], [0, 1], ...]",
                "{[]=470607, [0]=58940, [1]=24540, [0, 0]=7449, [1, 0]=3085, [0, 1]=3084, [1, 1]=1300, [1, -1]=1284," +
                " [0, 0, 0]=944, [1, -2]=569}",
                2.5163809999931646,
                7.688697379443966
        );
        reducedRationalVectors_helper(
                32,
                8,
                "[[1, -20981157/112685255093845, -56292/16097893584835, -120894/22537051018769, 26/16097893584835," +
                " -3788/112685255093845, 1637/112685255093845, 201836/112685255093845, -232/112685255093845," +
                " -6/22537051018769, -8534813782261489769073/16097893584835, -293956/112685255093845," +
                " -37861498017861727418/22537051018769, 5791/22537051018769, 669634458943144/22537051018769," +
                " 11/112685255093845, -2910742/112685255093845, -4967/22537051018769, 10/22537051018769," +
                " -508/112685255093845, -1466398006247/112685255093845, -46/112685255093845, -13562/112685255093845," +
                " -695976/112685255093845, 688562/16097893584835, 5542398/112685255093845, -234/112685255093845," +
                " 1906977267390725094387280/22537051018769, -363877104/112685255093845, -91712856/112685255093845," +
                " 3/112685255093845], [1, 28088/31177, -280884356308748050741099869955642846/31177]," +
                " [1, 5129/249, 0, -870085049018158987528554667/747, -440769353/747]," +
                " [1, 354213973/1771, -177017/1771, -26700086386/1771, -12261695942506/1771, -5226619389982/1771," +
                " -26164044723935471006011785430908281959257296841800/1771]," +
                " [1, 2238317906063783/391, -429/391, 40/391, -24614379/23, -147/391, 85257/391, 937/391," +
                " -56022/391]," +
                " [1, 77/18049656405900152210, 96241583/9024828202950076105, 549943/36099312811800304420," +
                " 1/36099312811800304420, -15115243678996539/36099312811800304420, 8641/36099312811800304420]," +
                " [1, 488/10437, -7577458850986978217/10437, -1264/10437, -16410468210809/1491, 259624/497," +
                " -594016125101088808832060264942027504116335596926564/10437, 75119070626516808/3479, 681190/10437," +
                " 1683229699/10437, 2663972/10437, -1512733478/1491, 117525398/10437," +
                " 872051284356696732231572275/10437, 7189772234/10437, -488344/10437, 725290/3479," +
                " 609281197727896401432736269590/10437, -2/10437, 8329801121680278377567650011013546620/3479," +
                " 55/3479, -2371/1491]," +
                " [1, 18/182099, -10/182099, 4882/182099, -3850444/182099," +
                " 634839268453353265487425588455314257/182099, 0, 324901632/182099], []," +
                " [1, -936/1696870787, 3/1696870787, 3028852536/1696870787, -2/1696870787, -316/1696870787," +
                " -2081/1696870787, -65824/1696870787, 31941758203/1696870787, -1798563486/1696870787," +
                " -686163800713560015/1696870787, -36327313/1696870787, 3604983285930/1696870787, -3/1696870787]," +
                " [1, 9682071/5, 480733578/5, -7072171/5, -92794838/5, 266501333814584625267172/5," +
                " 1769496824093704/5, -1/5, 894753/5, -21558614/5, 891405023649/5, -7878220384814/5, 102/5, 1668/5," +
                " -188, 53278803552732/5]," +
                " [1, 3910533309/31715, -88601367501441/31715, -17/31715, -27357495316208181536/6343," +
                " -151749080509887783/31715, 2258590018/31715, -9/31715, 123313/31715, 130602/31715," +
                " 127574955676719714878/31715, 874863/31715, -12878245112759/6343, -28/31715, 222300496832713/6343]," +
                " [1, -82225/1142, 1/2284, 276679131525/2284, -1217648118681/2284, 0, 126941/2284, 3367094955/2284," +
                " -15992035/2284, 8342133675/2284, -53917/2284, -31/2284, 19/2284, 199/1142, 377/1142," +
                " -91819053/571, -517466029689/2284, -1335249976973/1142, -8304458835/2284]," +
                " [1, 137359716886/123397233917, -7/246794467834, -551926226/123397233917, -447/123397233917," +
                " -29342551484/123397233917, 128137/246794467834, -426357100/123397233917, -50814301/246794467834," +
                " -3411892935022680178222611/246794467834, 1883041170577/246794467834, 103/246794467834," +
                " 253999061/123397233917]," +
                " [1, -1818879152193024859175861313217/10, -19/5, -358742414013/10, -201996658779576257904273017/10," +
                " -2401150362079/10, 1714090686103/10, 1755031779/10]," +
                " [1, 5/36040063567761689113515657603159," +
                " -33512750433853002423052858379/36040063567761689113515657603159," +
                " -4397/36040063567761689113515657603159, -358200/4004451507529076568168406400351," +
                " -23/36040063567761689113515657603159, 14/36040063567761689113515657603159," +
                " 258731/36040063567761689113515657603159, -1/36040063567761689113515657603159," +
                " 5580710311396322088020/36040063567761689113515657603159]," +
                " [1, 1158729049124093/71687617974830126667362242022040869961072]," +
                " [1, 49168/4813895, 9891/4813895, 93497/4813895, 826809212/4813895, 8095246076/962779," +
                " 132349/4813895, 3/4813895]," +
                " [1, -26/3595, -14897072894669/7190, 2229100293382556809498174488822267/7190, -1948860002391/7190," +
                " 2206331/3595, -27/7190, 50648/719, -18619725585032/719, -2593552/3595," +
                " -97373748543303886659020906/3595, 117/3595, 2130213834129027837/3595, -98248/3595," +
                " -1414120186086285753/7190, -123441841/7190, -544481/1438, -311435027250611510375387183111/7190," +
                " 260010/719, 9259220024110/719, -1795198244309/7190, -165868189/7190, 5520663138/3595, -1/3595," +
                " 27730733/3595, 981456528/3595, 97783895616969/7190, -31/7190, -99657/7190]," +
                " [1, -492435319384353042220/7, 21491/7, -8/7, -1504/7, 695/7, 828538420282164027294/7, 10/7, 23/7," +
                " 14794958775771960096768523454396488/7, 504729897831/7, 57402707133/7, -834137689685106/7," +
                " -4934668368816606725285750326/7, 54430077583015014883/7, 567260189/7," +
                " -2585192056432476043973583191, 154904596135599213/7, -795216/7, 1191950632705689/7," +
                " -77242986265689401/7, 1831515498/7, -4030862160261852/7, -48/7, -328381074425630002650/7, 1/7," +
                " -34786/7, -97782/7, -240657/7, 15887403613/7, 3/7," +
                " 3896715263304259601547967726364084469918797170192517201146822923199/7, 0, 207/7, -934435/7, 0," +
                " -253210880, -18650453184623817188103/7, -2097903802423269689025/7], ...]",
                "{[]=230958, [0]=6296, [1]=2883, [0, 0]=157, [0, 1]=103, [1, 0]=64, [1, 1]=45, [1, -1]=38," +
                " [1, -3]=31, [1, -2]=23}",
                8.044995000003032,
                56.723622948818225
        );
        reducedRationalVectors_fail_helper(0, 1);
        reducedRationalVectors_fail_helper(1, 0);
    }

    private static void reducedRationalVectorsAtLeast_helper(
            int scale,
            int secondaryScale,
            int minDimension,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoordinateBitSize
    ) {
        rationalVectors_helper(
                P.withScale(scale).withSecondaryScale(secondaryScale).reducedRationalVectorsAtLeast(minDimension),
                output,
                topSampleCount,
                meanDimension,
                meanCoordinateBitSize
        );
    }

    private static void reducedRationalVectorsAtLeast_fail_helper(int scale, int secondaryScale, int minDimension) {
        try {
            P.withScale(scale).withSecondaryScale(secondaryScale).reducedRationalVectorsAtLeast(minDimension);
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testReducedRationalVectorsAtLeast() {
        reducedRationalVectorsAtLeast_helper(
                1,
                1,
                0,
                "[[1, 85/3, 0], [0], [], [0], [0], [1], [], [], [], [], [0], [], [], [], [], [], [], [], [], [], ...]",
                "{[]=646910, [0]=161250, [0, 0]=40554, [1]=40456, [1, 0]=10142, [0, 0, 0]=10071, [0, 1]=10042," +
                " [0, 0, 1]=2582, [1, 1]=2546, [1, 0, 0]=2540}",
                0.6515059999979717,
                1.6404990898138534
        );
        reducedRationalVectorsAtLeast_helper(
                5,
                3,
                0,
                "[[1, 1256222/85, -233/85, -1/85, 0, 1/85], [1, 0, -8, 2], [1, 0, -4551/94], [1, -23, -7/4, 1/4]," +
                " [1, -224, 1, -4, 633, 17], [1], [0]," +
                " [1, 91/38, 11/38, 0, -7/38, 16127/38, -309/19, -15659/38, -1/38, 3, 223/38, 0]," +
                " [0, 1, -1/47, -46/47], [], [1, 7/2, -7, 0, 0, -1/2, 2, 0], [1, -5/267, -38/267, -11815/267]," +
                " [1, 1/2, -15/2], [], [1, 0, -37/15], [], [0], [], [], [0, 1], ...]",
                "{[]=470607, [0]=58940, [1]=24540, [0, 0]=7449, [1, 0]=3085, [0, 1]=3084, [1, 1]=1300, [1, -1]=1284," +
                " [0, 0, 0]=944, [1, -2]=569}",
                2.5163809999931646,
                7.688697379443966
        );
        reducedRationalVectorsAtLeast_helper(
                5,
                3,
                1,
                "[[1, 1256222/85, -233/85, -1/85, 0], [0], [0, 1, -1/2, 31], [1, 1]," +
                " [1, 91/38, 11/38, 0, -7/38, 16127/38, -309/19, -15659/38, -1/38, 3], [0, 1, -1/47, -46/47]," +
                " [1, -6, 1, 2462, 102910], [0], [1, -5/267], [0], [0], [1, -730/29], [0, 0], [0]," +
                " [1, -2/115001, 9/115001, 13/115001, 0, -1/115001, 0], [1, 371373/376, 23417/940, -3/1880]," +
                " [1, 0, -11/79, 5/79], [0], [0, 0, 1, 1/2, -11], [1, 13/16], ...]",
                "{[0]=161152, [1]=67072, [0, 0]=17734, [0, 1]=7523, [1, 0]=7470, [1, 1]=3127, [1, -1]=3097," +
                " [0, 0, 0]=1975, [1, 3]=1370, [1, -1/3]=1324}",
                3.6060739999871925,
                7.173386070062897
        );
        reducedRationalVectorsAtLeast_helper(
                5,
                3,
                2,
                "[[1, 21, 1256222, -233, -1], [0, 1], [1, -117/5], [1, 1/6, 1/3], [1, -46, -394, -122, 5, -1]," +
                " [1, -112/15, 1/30], [1, -8, -5, -13/3, 5/3], [1, 0, -1, 16127/7], [1, 0, -4/3], [0, 1, 1, -15]," +
                " [1, -730/29], [1, 23/3, -1/3], [1, 46834/152929, -3/152929, -1/152929]," +
                " [1, 33/5, 1, 31/5, 0, -11/5], [1, -26/3, 1537/3], [1, 1/2], [1, 8/3], [1, 12/5]," +
                " [1, 15/14504, -5/7252, 3/7252, 0, 3/14504], [1, 3347/25], ...]",
                "{[0, 0]=37658, [0, 1]=16039, [1, 0]=15641, [1, 1]=6640, [1, -1]=6610, [0, 0, 0]=3091," +
                " [1, 1/2]=2786, [1, 2]=2775, [1, -3]=2768, [1, 1/3]=2768}",
                3.2424949999676405,
                7.015494549601162
        );
        reducedRationalVectorsAtLeast_helper(
                10,
                8,
                0,
                "[[1, -2/3064121, 3346/3064121, -1/3064121, 0, 3928/3064121, 152929/3064121, -8080881/3064121," +
                " 13297953072/3064121, -41349439/3064121, -1/3064121, -3/3064121], [], [1, 3133/7]," +
                " [0, 1, -1/122886, -124/798759, 1/532506, -7/1597518, 399/88751, -368/798759, 1/1597518, 5/1597518," +
                " -434063/1597518, 1/798759, 10025/1597518, -5/798759, -85/266253, -419/1597518]," +
                " [1, -789/13, 524/13, 25689/13, -3421/13, -3640006/13, -27355, -177305492008, 31/13, -1/13, -7/13," +
                " 0, 1524767947173/13, -11/13, -330228993066/13, 7/13, 17/13, 6/13, 1/13]," +
                " [1, -202206016023/5, -82699/5, -1, 973/5, -3/5, -51/5, 398077/5, 372/5], [1, 12126258480, -11617]," +
                " [1, -158207289/5473, -7/5473, 23/5473, -3/5473, -3117942350/5473, 995620/5473, 1/5473, -3/5473]," +
                " [1, -3879/173581048, 1/520743144, -1/1041486288], [1, -2/69, 1/207], [], []," +
                " [1, 0, -184109803/457, -2733/10054, 527/10054, 3/5027, 26/5027, -39/10054]," +
                " [1, 1/2, 15/4, 2985/4, 1/2, 717/4, -6, -37, 37841/4, -1423414505/4, -1538, -3/4, 701, 15/2, 3/2]," +
                " [1, 0, 0, -9/2, -1/12, 0, 1/12, 0, 0, 77150647/3, -1/12, 5/12, -163963/12, 0]," +
                " [1, -151684/99, 246/11, -4/33, 128/99]," +
                " [1, 586/7889853413, 3/15779706826, -243/15779706826, -12944/7889853413, 307/15779706826," +
                " 31/7889853413, -23/7889853413, 233/15779706826]," +
                " [1, 260/2629, -1443175/15774, -251/15774, 7/5258, -1525/7887, 1/15774, -7/2629, 0," +
                " 1255391308/7887, -643/15774, -4/2629, 59/15774, 128423/15774], [1, 1/7, 46/7]," +
                " [1, 23/212171250400, -843/424342500800, 1/212171250400, -1/26521406300, -1123/212171250400," +
                " 508279/84868500160], ...]",
                "{[]=227395, [0]=18415, [1]=8415, [0, 0]=1471, [0, 1]=729, [1, 0]=708, [1, 1]=324, [1, -1]=305," +
                " [1, -3]=154, [1, 2]=146}",
                7.934091000004385,
                17.246808487906456
        );
        reducedRationalVectorsAtLeast_helper(
                10,
                8,
                3,
                "[[1, -593/590028540, 11/29501427, -39/196676180, -645698713/590028540, -1156691/147507135," +
                " -31/147507135, -16591/147507135]," +
                " [1, 3/7871570104, 51089054789/7871570104, 11/7871570104, 0, -7/7871570104, -144651/3935785052," +
                " -1283/7871570104], [1, 152929/344, -8080881/344, 1662244134/43, -41349439/344]," +
                " [1, -231522/7, -27/7, -2/7, 50/7, 397143/7, 16], [1, 6272/17, -3/2, -140539237/17, -1161315/17]," +
                " [1, -1543/414322270, -10931/41432227, -1/414322270, 11/207161135, 36587/414322270," +
                " 32359/414322270, -13/41432227, -7764/207161135, -117129/414322270, 11/207161135]," +
                " [1, 8/11, -2312/33]," +
                " [1, 1/34, -202206016023/34, -82699/34, -5/34, 973/34, -3/34]," +
                " [1, 372/1970941, -4/1970941, 29306127664/1970941, -11617/1970941, 2119739845/1970941, -1/1970941," +
                " -142246/1970941, 18553/1970941], [1, -3/71, -3117942350/71, 995620/71, 1/71, -3/71]," +
                " [1, -3879/173581048, 1/520743144, -1/1041486288, -61/1041486288, 7/86790524, -1/173581048," +
                " 1/1041486288, -7/1041486288], [1, 2985/7, 2/7], [0, 1, -112, -3111], [1, -1/308602588," +
                " 5/308602588]," +
                " [1, 0, 5102/8827923952273863, -8/2942641317424621, 718/8827923952273863, 16/8827923952273863," +
                " 66986289128/8827923952273863, 1708/8827923952273863, 0], [1, -77343596, 249/2]," +
                " [1, 5, 2657104, -2471048]," +
                " [1, 1322424107679/4024470779, 43/4024470779, 3930/4024470779, 21920/4024470779," +
                " -205195/4024470779, 901/4024470779, -10/4024470779, 319661334/4024470779, -1066/4024470779]," +
                " [1, -8/7177, 49130/7177, -1920/7177, 109/7177]," +
                " [1, 0, -44/21, -1342/105, -184/105, 246706/35, 215539/105, 2/105, -61/105, 0, 4/105," +
                " -1053840368744/105, 34978808/105, 251521461162, -7/15, -710206652679/7, 0, -34/15, 18/35], ...]",
                "{[0, 0, 0]=261, [0, 1, 0]=120, [0, 0, 1]=114, [1, 0, 0]=105, [1, 0, -1]=66, [0, 1, 1]=60," +
                " [0, 1, -1]=56, [1, -1, 0]=51, [1, 0, 1]=51, [1, 1, 0]=42}",
                8.239842999997473,
                16.818875068721916
        );
        reducedRationalVectorsAtLeast_helper(
                10,
                8,
                7,
                "[[1, 1/8, -1/4, 1/8, -3/8, 7/4, 153, 81/8], [1, 0, -1, -289302/7, -1283/7, 18/7, -2300/7, 1/7]," +
                " [1, -1447/35149091, 8138/105447273, -17/210894546, 755185/105447273, 21931365/35149091," +
                " -394953281/210894546], [1, 5, 0, 3186328/3, -144, 2563121254028, -3]," +
                " [1, -3015, 0, -20040, 3064121, -2, 3346, -1]," +
                " [1, 152929/5976, -2693627/1992, 554081378/249, -41349439/5976, -1/5976, -1/1992]," +
                " [1, 2/3, 1/9, -77174/3, -3, -2/9, 50/9]," +
                " [1, 112/69463, -23/69463, 114/69463, 629/69463, 3/69463, 60/69463, 0]," +
                " [1, 16011301/395, 7/790, 27/790, -672/395, -956783/790, -198077/790, 207/790, 0, 22058738851/395]," +
                " [1, -51/12544, -140539237/6272, -1161315/6272, -174785977915/12544, -1543/12544, -54655/6272]," +
                " [0, 1, 36587/54, 32359/54, -65/27, -2588/9, -39043/18], [1, 0, 0, -20/7, -530/7, 65/14, 12/7]," +
                " [1, -14/5, -12/5, -6/5, -21, 6/5, -329/5]," +
                " [1, 0, 203/160856798945, -86/160856798945, -40005226842/32171359789, -79595301742/160856798945," +
                " 13/160856798945, 451/160856798945, -23971/160856798945, 209/160856798945, 0, 2/160856798945]," +
                " [1, -2096/51, 772/153, 9, -52735763/51, -7/153, 23/153], [0, 1, 15/4, 2985/4, 1/2, 717/4, -6]," +
                " [1, -148/254284349, 14/254284349, 3/254284349, 18532/254284349, -2/254284349, 860/254284349]," +
                " [1, 0, -467/6310, -46769008/3155, -13/6310, 1/3155, 2/631, -14/3155]," +
                " [1, 2245/182626484, -53/91313242, 1/182626484, 21493072257233/182626484, 5767973249/182626484," +
                " 1/182626484, -3/182626484, 0]," +
                " [1, -210/11, 1622/803, -6593/1606, 6/803, 6/803, -104045/803, 402824061598125/1606], ...]",
                "{[1, 1/8, -1/4, 1/8, -3/8, 7/4, 153, 81/8]=1, [1, 0, -1, -289302/7, -1283/7, 18/7, -2300/7, 1/7]=1," +
                " [1, -1447/35149091, 8138/105447273, -17/210894546, 755185/105447273, 21931365/35149091," +
                " -394953281/210894546]=1, [1, 5, 0, 3186328/3, -144, 2563121254028, -3]=1," +
                " [1, -3015, 0, -20040, 3064121, -2, 3346, -1]=1," +
                " [1, 152929/5976, -2693627/1992, 554081378/249, -41349439/5976, -1/5976, -1/1992]=1," +
                " [1, 2/3, 1/9, -77174/3, -3, -2/9, 50/9]=1," +
                " [1, 112/69463, -23/69463, 114/69463, 629/69463, 3/69463, 60/69463, 0]=1," +
                " [1, 16011301/395, 7/790, 27/790, -672/395, -956783/790, -198077/790, 207/790, 0," +
                " 22058738851/395]=1," +
                " [1, -51/12544, -140539237/6272, -1161315/6272, -174785977915/12544, -1543/12544, -54655/6272]=1}",
                8.00514600006095,
                16.693559867603597
        );
        reducedRationalVectorsAtLeast_fail_helper(1, 1, 1);
        reducedRationalVectorsAtLeast_fail_helper(1, 1, 2);
        reducedRationalVectorsAtLeast_fail_helper(0, 1, 0);
    }

    private static void rationalMatrices_helper(
            @NotNull Iterable<RationalMatrix> input,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanElementCount,
            double meanCoordinateBitSize
    ) {
        List<RationalMatrix> sample = toList(take(DEFAULT_SAMPLE_SIZE / 10, input));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfIntegers(toList(map(m -> m.height() * m.width(), sample))), meanElementCount);
        aeq(
                meanOfIntegers(toList(concatMap(m -> concatMap(v -> map(Rational::bitLength, v), m.rows()), sample))),
                meanCoordinateBitSize
        );
        P.reset();
    }

    private static void rationalMatrices_int_int_helper(
            int scale,
            int height,
            int width,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanElementCount,
            double meanCoordinateBitSize
    ) {
        rationalMatrices_helper(
                P.withScale(scale).rationalMatrices(height, width),
                output,
                topSampleCount,
                meanElementCount,
                meanCoordinateBitSize
        );
    }

    private static void rationalMatrices_int_int_fail_helper(int scale, int height, int width) {
        try {
            P.withScale(scale).rationalMatrices(height, width);
            fail();
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalMatrices_int_int() {
        rationalMatrices_int_int_helper(
                3,
                0,
                0,
                "[[]#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0," +
                " []#0, []#0, []#0, []#0, ...]",
                "{[]#0=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                5,
                0,
                0,
                "[[]#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0," +
                " []#0, []#0, []#0, []#0, ...]",
                "{[]#0=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                10,
                0,
                0,
                "[[]#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0, []#0," +
                " []#0, []#0, []#0, []#0, ...]",
                "{[]#0=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                3,
                0,
                3,
                "[[]#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3," +
                " []#3, []#3, []#3, []#3, ...]",
                "{[]#3=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                5,
                0,
                3,
                "[[]#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3," +
                " []#3, []#3, []#3, []#3, ...]",
                "{[]#3=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                10,
                0,
                3,
                "[[]#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3, []#3," +
                " []#3, []#3, []#3, []#3, ...]",
                "{[]#3=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                3,
                3,
                0,
                "[[[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]," +
                " [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]," +
                " [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], ...]",
                "{[[], [], []]=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                5,
                3,
                0,
                "[[[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]," +
                " [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]," +
                " [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], ...]",
                "{[[], [], []]=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                10,
                3,
                0,
                "[[[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]," +
                " [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []]," +
                " [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], [[], [], []], ...]",
                "{[[], [], []]=100000}",
                0.0,
                0.0
        );
        rationalMatrices_int_int_helper(
                3,
                1,
                1,
                "[[[5]], [[221]], [[1]], [[-2/7]], [[1]], [[-2/3]], [[1]], [[0]], [[-1/2]], [[0]], [[0]], [[5/6]]," +
                " [[0]], [[2]], [[-3/4]], [[0]], [[0]], [[1/6]], [[-1/15]], [[-1]], ...]",
                "{[[0]]=36064, [[1]]=9116, [[-1]]=8847, [[2]]=2249, [[1/2]]=2249, [[-3]]=2231, [[1/3]]=2210," +
                " [[-1/2]]=2198, [[3]]=2187, [[-2]]=2186}",
                0.9999999999980838,
                2.7791000000017902
        );
        rationalMatrices_int_int_helper(
                5,
                1,
                1,
                "[[[1/36]], [[-1]], [[-29/4]], [[-1]], [[5/2]], [[-53/47]], [[1/89]], [[-2]], [[-5/6]], [[-4]]," +
                " [[-22]], [[-2/683]], [[0]], [[-1/50]], [[0]], [[-4]], [[-7/2]], [[1/19]], [[-1/2]], [[0]], ...]",
                "{[[0]]=16723, [[1]]=5651, [[-1]]=5622, [[1/3]]=1918, [[3]]=1891, [[-3]]=1884, [[2]]=1879," +
                " [[-2]]=1864, [[1/2]]=1845, [[-1/2]]=1825}",
                0.9999999999980838,
                4.8117800000005735
        );
        rationalMatrices_int_int_helper(
                10,
                1,
                1,
                "[[[21/13]], [[2304798/125]], [[-2]], [[1/25]], [[-117/219224]], [[-67/5785]], [[-70/8797]]," +
                " [[-10]], [[2/3]], [[62]], [[-4551]], [[2/227]], [[-239/978]], [[1/47084144]], [[0]], [[-2/35]]," +
                " [[-8/5]], [[-1/6268]], [[-504064/13]], [[-238/5]], ...]",
                "{[[0]]=5084, [[1]]=2166, [[-1]]=2165, [[2]]=913, [[-1/2]]=897, [[3]]=889, [[-3]]=884, [[1/2]]=883," +
                " [[-2]]=856, [[1/3]]=855}",
                0.9999999999980838,
                9.869249999999408
        );
        rationalMatrices_int_int_helper(
                3,
                2,
                2,
                "[[[5, 221], [1, -2/7]], [[1, -2/3], [1, 0]], [[-1/2, 0], [0, 5/6]], [[0, 2], [-3/4, 0]]," +
                " [[0, 1/6], [-1/15, -1]], [[-14/3, 0], [0, -1]], [[0, -1], [-6, 0]], [[-1, 0], [-16, -1/4]]," +
                " [[0, 0], [1, -1]], [[0, 167/17], [0, -27/8]], [[8/3, -6], [0, 1]], [[0, 0], [0, 1/3]]," +
                " [[-1, 1], [0, 10]], [[0, 0], [-5, 4/21]], [[-2/7, -1], [-1, 0]], [[3, 0], [3/14, 0]]," +
                " [[25, 0], [3/10, 0]], [[-1/3, -5/19], [-1/6, 0]], [[-1/2, -2], [1/3, 0]], [[0, 0], [-5, 0]], ...]",
                "{[[0, 0], [0, 0]]=1651, [[-1, 0], [0, 0]]=428, [[0, 0], [-1, 0]]=424, [[0, 0], [0, 1]]=424," +
                " [[0, 0], [0, -1]]=412, [[0, -1], [0, 0]]=408, [[1, 0], [0, 0]]=401, [[0, 0], [1, 0]]=400," +
                " [[0, 1], [0, 0]]=383, [[0, 1], [1, 0]]=128}",
                3.999999999992335,
                2.7808624999918714
        );
        rationalMatrices_int_int_helper(
                5,
                2,
                2,
                "[[[1/36, -1], [-29/4, -1]], [[5/2, -53/47], [1/89, -2]], [[-5/6, -4], [-22, -2/683]]," +
                " [[0, -1/50], [0, -4]], [[-7/2, 1/19], [-1/2, 0]], [[-1/6, -1/367], [17/10, 0]]," +
                " [[12757/4452, 2], [-1/16, -1/4]], [[-1, -6268], [3, -718/59937]], [[1, -1/38], [-2/25, 1]]," +
                " [[-5/6, 2], [14, 17/24]], [[1/7, -1], [0, 1]], [[15/619, 1], [2, -1/7]]," +
                " [[-1/7, -29/19562], [0, 14/3]], [[0, 10], [1/4, 1/6]], [[-9/4, 8], [16, -1/6]]," +
                " [[11/2, -24/47], [-2/11, -2/5]], [[-7/2, 1/10], [3, -7/41]], [[-197/15, 0], [0, 0]]," +
                " [[-17, 1/3], [0, 0]], [[-3/11, 1/2], [-1, -22/3]], ...]",
                "{[[0, 0], [0, 0]]=83, [[0, 1], [0, 0]]=41, [[1, 0], [0, 0]]=33, [[0, 0], [0, 1]]=31," +
                " [[0, 0], [-1, 0]]=31, [[-1, 0], [0, 0]]=30, [[0, -1], [0, 0]]=30, [[0, 0], [1, 0]]=30," +
                " [[0, 0], [0, -1]]=26, [[0, 0], [0, 2]]=17}",
                3.999999999992335,
                4.8148274999920595
        );
        rationalMatrices_int_int_helper(
                10,
                2,
                2,
                "[[[21/13, 2304798/125], [-2, 1/25]], [[-117/219224, -67/5785], [-70/8797, -10]]," +
                " [[2/3, 62], [-4551, 2/227]], [[-239/978, 1/47084144], [0, -2/35]]," +
                " [[-8/5, -1/6268], [-504064/13, -238/5]], [[-8/249, -15/13], [0, 0]]," +
                " [[0, 3/238], [122224/59, 19]], [[-7/3839, -1130/15659], [479, 1/12]], [[2/47, 438], [11, -98]]," +
                " [[1/6, 1/926], [-97/41, 1/15]], [[-30, -1/5], [139/9, -70/167]], [[3, 2/23], [23/7, 1/37]]," +
                " [[2260, -1/5], [-49/5, 23/3]], [[-7, -7], [49465/2, 9/13]], [[1, 0], [1/344, 3954017/6454]]," +
                " [[-3, 13/31], [-26/1537, -15]], [[1/3, -841], [-1/8, 13/53]], [[5/4, -21], [3/1760, 0]]," +
                " [[13/5, 6312/23], [1/3, -1/7]], [[-34/15, -1], [20, 1/9]], ...]",
                "{[[0, 1], [0, 1]]=2, [[0, 0], [0, 2]]=2, [[-1, 0], [0, 0]]=2, [[21/13, 2304798/125], [-2, 1/25]]=1," +
                " [[-117/219224, -67/5785], [-70/8797, -10]]=1, [[2/3, 62], [-4551, 2/227]]=1," +
                " [[-239/978, 1/47084144], [0, -2/35]]=1, [[-8/5, -1/6268], [-504064/13, -238/5]]=1," +
                " [[-8/249, -15/13], [0, 0]]=1, [[0, 3/238], [122224/59, 19]]=1}",
                3.999999999992335,
                9.847875000001702
        );
        rationalMatrices_int_int_helper(
                3,
                3,
                4,
                "[[[5, 221, 1, -2/7], [1, -2/3, 1, 0], [-1/2, 0, 0, 5/6]]," +
                " [[0, 2, -3/4, 0], [0, 1/6, -1/15, -1], [-14/3, 0, 0, -1]]," +
                " [[0, -1, -6, 0], [-1, 0, -16, -1/4], [0, 0, 1, -1]]," +
                " [[0, 167/17, 0, -27/8], [8/3, -6, 0, 1], [0, 0, 0, 1/3]]," +
                " [[-1, 1, 0, 10], [0, 0, -5, 4/21], [-2/7, -1, -1, 0]]," +
                " [[3, 0, 3/14, 0], [25, 0, 3/10, 0], [-1/3, -5/19, -1/6, 0]]," +
                " [[-1/2, -2, 1/3, 0], [0, 0, -5, 0], [-1/2, 0, 0, 0]]," +
                " [[3, -1/5, 0, 0], [68, 1, -1/3, 0], [0, -3, 3/2, -5]]," +
                " [[0, -5, 0, 0], [0, -4, 0, 0], [0, 0, 1/3, 0]]," +
                " [[-1, -1/2, 20, 0], [1, 0, 1, 0], [1/2, -1/2, -2, 0]]," +
                " [[3, 0, -4, -1], [3, 0, -1, 0], [1/6, 0, 1, 0]]," +
                " [[0, 0, -13/4, 1], [1, -1, -1/2, 0], [1/10, 3, -7/283, 0]]," +
                " [[0, 0, -1, 0], [-3/11, 3, 2/5, 3], [0, 3, -2, 12]]," +
                " [[0, 1/2, -1, 0], [-1, 1/3, 0, -1/9], [0, 0, 1, 3/5]]," +
                " [[-1/56, 0, 0, 2/15], [1/3, -2, 1, -1/3], [1, -1/2, -1/4, 1]]," +
                " [[1, 0, 0, -3], [0, 2, 0, 0], [-1, 1/2, -1, 0]]," +
                " [[0, -7/2, 1/3, 0], [-1, 2, 1/7, -1/8], [-59/3, -1/9, 1/21, -1]]," +
                " [[-1, -1, 0, 0], [-1/3, 0, -5, 0], [0, -1/17, -1, -8/3]]," +
                " [[-1/4, 1, 0, 16], [-1, 1/3, 1, 0], [0, -1/2, 1/7, 1]]," +
                " [[-1, 1, 0, 1/3], [7, -1, -1, 1], [1, 2/3, -3, 0]], ...]",
                "{[[5, 221, 1, -2/7], [1, -2/3, 1, 0], [-1/2, 0, 0, 5/6]]=1," +
                " [[0, 2, -3/4, 0], [0, 1/6, -1/15, -1], [-14/3, 0, 0, -1]]=1," +
                " [[0, -1, -6, 0], [-1, 0, -16, -1/4], [0, 0, 1, -1]]=1," +
                " [[0, 167/17, 0, -27/8], [8/3, -6, 0, 1], [0, 0, 0, 1/3]]=1," +
                " [[-1, 1, 0, 10], [0, 0, -5, 4/21], [-2/7, -1, -1, 0]]=1," +
                " [[3, 0, 3/14, 0], [25, 0, 3/10, 0], [-1/3, -5/19, -1/6, 0]]=1," +
                " [[-1/2, -2, 1/3, 0], [0, 0, -5, 0], [-1/2, 0, 0, 0]]=1," +
                " [[3, -1/5, 0, 0], [68, 1, -1/3, 0], [0, -3, 3/2, -5]]=1," +
                " [[0, -5, 0, 0], [0, -4, 0, 0], [0, 0, 1/3, 0]]=1," +
                " [[-1, -1/2, 20, 0], [1, 0, 1, 0], [1/2, -1/2, -2, 0]]=1}",
                12.000000000020316,
                2.7812433333100226
        );
        rationalMatrices_int_int_helper(
                5,
                3,
                4,
                "[[[1/36, -1, -29/4, -1], [5/2, -53/47, 1/89, -2], [-5/6, -4, -22, -2/683]]," +
                " [[0, -1/50, 0, -4], [-7/2, 1/19, -1/2, 0], [-1/6, -1/367, 17/10, 0]]," +
                " [[12757/4452, 2, -1/16, -1/4], [-1, -6268, 3, -718/59937], [1, -1/38, -2/25, 1]]," +
                " [[-5/6, 2, 14, 17/24], [1/7, -1, 0, 1], [15/619, 1, 2, -1/7]]," +
                " [[-1/7, -29/19562, 0, 14/3], [0, 10, 1/4, 1/6], [-9/4, 8, 16, -1/6]]," +
                " [[11/2, -24/47, -2/11, -2/5], [-7/2, 1/10, 3, -7/41], [-197/15, 0, 0, 0]]," +
                " [[-17, 1/3, 0, 0], [-3/11, 1/2, -1, -22/3], [-3623/3, 1/3, -1/21, -2/5]]," +
                " [[1/6, 1, 1/3, 87], [-1/13, -1/2, 2/5, 468], [-26, 45/7, 1/6, 1/1790]]," +
                " [[-5/17, 23/3, 0, 0], [1/2, -1/115, 3, -1/7], [0, 1/48, 2/7, -7/9]]," +
                " [[6, -1/7, 257, 0], [8, 0, -1/4, -8/65], [-3, -1/8, 13/53, 5/3]]," +
                " [[-1, -53/3, 1/44, 1/2], [0, 5, -1/2, -3/4], [1/3, -15/13, 1/2, -7/10]]," +
                " [[-1/22, 3, 0, -28/5], [11, -154, 1, 7/3], [13/15, -3/2, 0, 1/1733]]," +
                " [[3/29, -1/2, 0, 5/7], [-1/3, -9/2, 25, 0], [-1, 8/3, -4, -2]]," +
                " [[2/3763, 1, 1/3, -4/3], [-1/14, 0, -1/3, 5], [9, 15, 0, 29]]," +
                " [[1, -3, -631/3, -18], [5/3, 0, 19/99, -2/67], [-1/2, -111, 0, -41/7]]," +
                " [[1/40, -55/4, -1/12, 18/7], [-399, 7/2, -2, -1/5], [23/14, -20, 1/7, -1/3]]," +
                " [[-5/632, 2, 2/199, 0], [-1, 1/7, 0, 11], [-3, 3, 7/8, 31/2]]," +
                " [[23/402, -824/27, -31/2, -7/3], [-3, -1/14, -1/7, 0], [-11, 13/7, -30, -13/25]]," +
                " [[3/2, -1/3, 1, -1/4], [0, -1/7, 2/11, 31/9], [14, -1/7, -83/4, -141]]," +
                " [[0, 1, -1/4, -1], [-115/174, 1/59, -1, 3], [1/7, 6, 0, -3/2]], ...]",
                "{[[1/36, -1, -29/4, -1], [5/2, -53/47, 1/89, -2], [-5/6, -4, -22, -2/683]]=1," +
                " [[0, -1/50, 0, -4], [-7/2, 1/19, -1/2, 0], [-1/6, -1/367, 17/10, 0]]=1," +
                " [[12757/4452, 2, -1/16, -1/4], [-1, -6268, 3, -718/59937], [1, -1/38, -2/25, 1]]=1," +
                " [[-5/6, 2, 14, 17/24], [1/7, -1, 0, 1], [15/619, 1, 2, -1/7]]=1," +
                " [[-1/7, -29/19562, 0, 14/3], [0, 10, 1/4, 1/6], [-9/4, 8, 16, -1/6]]=1," +
                " [[11/2, -24/47, -2/11, -2/5], [-7/2, 1/10, 3, -7/41], [-197/15, 0, 0, 0]]=1," +
                " [[-17, 1/3, 0, 0], [-3/11, 1/2, -1, -22/3], [-3623/3, 1/3, -1/21, -2/5]]=1," +
                " [[1/6, 1, 1/3, 87], [-1/13, -1/2, 2/5, 468], [-26, 45/7, 1/6, 1/1790]]=1," +
                " [[-5/17, 23/3, 0, 0], [1/2, -1/115, 3, -1/7], [0, 1/48, 2/7, -7/9]]=1," +
                " [[6, -1/7, 257, 0], [8, 0, -1/4, -8/65], [-3, -1/8, 13/53, 5/3]]=1}",
                12.000000000020316,
                4.808581666635954
        );
        rationalMatrices_int_int_helper(
                10,
                3,
                4,
                "[[[21/13, 2304798/125, -2, 1/25], [-117/219224, -67/5785, -70/8797, -10], [2/3, 62, -4551, 2/227]]," +
                " [[-239/978, 1/47084144, 0, -2/35], [-8/5, -1/6268, -504064/13, -238/5], [-8/249, -15/13, 0, 0]]," +
                " [[0, 3/238, 122224/59, 19], [-7/3839, -1130/15659, 479, 1/12], [2/47, 438, 11, -98]]," +
                " [[1/6, 1/926, -97/41, 1/15], [-30, -1/5, 139/9, -70/167], [3, 2/23, 23/7, 1/37]]," +
                " [[2260, -1/5, -49/5, 23/3], [-7, -7, 49465/2, 9/13], [1, 0, 1/344, 3954017/6454]]," +
                " [[-3, 13/31, -26/1537, -15], [1/3, -841, -1/8, 13/53], [5/4, -21, 3/1760, 0]]," +
                " [[13/5, 6312/23, 1/3, -1/7], [-34/15, -1, 20, 1/9], [5395/2, 3, -149/7, -125/308]]," +
                " [[1/69, -3618, -5656/31, 1/11], [1/59, 33, -9/76, 1], [-1, 246/48401, 3/112, 111]]," +
                " [[-1/4, 19/11, 237/832, 1/4], [14, 3/5, -58/111, -2/4079803], [5, -12, -5/567, -1/3]]," +
                " [[21, 280/11, -20672/9, 1/519], [-15/1706, -1/22, -2/31, 1/3], [-43124/2505, 3/2, -1, -3/2]]," +
                " [[-4, 2/11, 3/3361, -3/11075], [0, -1/2, 53/9, 1/78], [-383, -1/40, 1/2, 0]]," +
                " [[-30725/11, -1/46542, -2588/93967625, -1], [-6299/2, -1083, 5/7, -3]," +
                " [-5/14, -13/3473, -729/2, 0]]," +
                " [[1/454, -78, 186, 1/63], [-40, 37, -9/2, -893924/13], [13, -1, 17, 79/3]]," +
                " [[7/131, -3239437/3, 71/2, 0], [-2, -203/177, 2/3, -209/10], [-157/3, -1, 1/11, -246]]," +
                " [[3/79, 1/6829, -1/6, -4], [6, -24, 4, 3/38], [11/4, 30413/72, -9/37841, -2/483]]," +
                " [[-24/7, 244/5, -2/63, -1], [3/46, 40, 0, -1], [-1, -1/2, 1, 0]]," +
                " [[-3/80, -740186/147, -5/6, 1], [-1/18, 1/5, -5/8, 1/26], [2, -33/134, 2906/83, -1/5]]," +
                " [[-1/11, -273454834/17, 37/4, -1/83490], [-23/117, 4/10689, 36/11, -31532]," +
                " [-1/4, 1/45, -379/102162, -13/191]]," +
                " [[-1/54, -2, 1, -61/221], [-28, -4/9, 1064, 1/36], [-1610/3, -159, 2/60847, 11/6]]," +
                " [[-49194, -12/52567, 1, 119/2], [1/11, 721/26, 5/14, 4052], [1/4, 5/371, -1384595/76, 14/3]], ...]",
                "{[[21/13, 2304798/125, -2, 1/25], [-117/219224, -67/5785, -70/8797, -10]," +
                " [2/3, 62, -4551, 2/227]]=1," +
                " [[-239/978, 1/47084144, 0, -2/35], [-8/5, -1/6268, -504064/13, -238/5], [-8/249, -15/13, 0, 0]]=1," +
                " [[0, 3/238, 122224/59, 19], [-7/3839, -1130/15659, 479, 1/12], [2/47, 438, 11, -98]]=1," +
                " [[1/6, 1/926, -97/41, 1/15], [-30, -1/5, 139/9, -70/167], [3, 2/23, 23/7, 1/37]]=1," +
                " [[2260, -1/5, -49/5, 23/3], [-7, -7, 49465/2, 9/13], [1, 0, 1/344, 3954017/6454]]=1," +
                " [[-3, 13/31, -26/1537, -15], [1/3, -841, -1/8, 13/53], [5/4, -21, 3/1760, 0]]=1," +
                " [[13/5, 6312/23, 1/3, -1/7], [-34/15, -1, 20, 1/9], [5395/2, 3, -149/7, -125/308]]=1," +
                " [[1/69, -3618, -5656/31, 1/11], [1/59, 33, -9/76, 1], [-1, 246/48401, 3/112, 111]]=1," +
                " [[-1/4, 19/11, 237/832, 1/4], [14, 3/5, -58/111, -2/4079803], [5, -12, -5/567, -1/3]]=1," +
                " [[21, 280/11, -20672/9, 1/519], [-15/1706, -1/22, -2/31, 1/3], [-43124/2505, 3/2, -1, -3/2]]=1}",
                12.000000000020316,
                9.83849583331666
        );
        rationalMatrices_int_int_fail_helper(2, 0, 0);
        rationalMatrices_int_int_fail_helper(2, 0, 1);
        rationalMatrices_int_int_fail_helper(2, 1, 0);
        rationalMatrices_int_int_fail_helper(2, 1, 1);
        rationalMatrices_int_int_fail_helper(3, -1, 0);
        rationalMatrices_int_int_fail_helper(3, -1, 1);
        rationalMatrices_int_int_fail_helper(3, 0, -1);
        rationalMatrices_int_int_fail_helper(3, 1, -1);
        rationalMatrices_int_int_fail_helper(3, -1, -1);
    }

    private static void rationalMatrices_helper(
            int scale,
            int secondaryScale,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanElementCount,
            double meanCoordinateBitSize
    ) {
        rationalMatrices_helper(
                P.withScale(scale).withSecondaryScale(secondaryScale).rationalMatrices(),
                output,
                topSampleCount,
                meanElementCount,
                meanCoordinateBitSize
        );
    }

    private static void rationalMatrices_fail_helper(int scale, int secondaryScale) {
        try {
            P.withScale(scale).withSecondaryScale(secondaryScale).rationalMatrices();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalMatrices() {
        rationalMatrices_helper(
                3,
                2,
                "[[[477, 1, -2/7], [1, -2/3, 1]], [[-1/2]], []#0, [[0]]," +
                " [[2, -3/4, 0, 0, 1/6], [-1/15, -1, -14/3, 0, 0]], [[]], [[0, 0], [-1, -6], [0, -1]], [[]]," +
                " [[0, -1/4, 0, 0, 1, -1, 0]], [[167/17], [0]], [[0, 1], [-1, -1], [1/38, 0], [1/3, -1]], []#2," +
                " [[-1, -1]], [[21/2, -2/7]], [[]], []#1, [[-1], [0]], [[0, 0, 25]], [[3/10]]," +
                " [[1/9, -1/3], [-5/19, -1/6], [0, -1/2]], ...]",
                "{[[0]]=6725, []#0=6237, []#1=4195, [[]]=3155, []#2=2836, []#3=1915, [[-1]]=1681, [[], []]=1580," +
                " [[1]]=1571, [[0], [0]]=1226}",
                3.0089700000010176,
                2.781300577932931
        );
        rationalMatrices_helper(
                5,
                3,
                "[[[10/3, -20, -1/10], [-29/4, -1, 5/2]], [[-3/47]], [[-25/2, -1/427, -5/6, -4]]," +
                " [[-1, -2/683], [0, -1/50]], [[]], [[0]], []#1, [[1/3, 19]], [[0]], [[-2/367]], [[1/50]]," +
                " [[1/2760, -6/17]], [[1, 12757/4452]], [[]], [[-1/4]]," +
                " [[-1/14460, 0, 3], [-718/59937, 1, -1/38], [-2/25, 1, -5/6]], [[-1/14]]," +
                " [[1/17, -8], [-3/13, -1]], [[0, 1]], [[1, 2]], ...]",
                "{[]#0=4502, [[0]]=3558, []#1=3040, []#2=1992, []#3=1404, [[]]=1371, [[-1]]=1202, [[1]]=1163," +
                " []#4=949, [[], []]=688}",
                3.362760000001472,
                4.8159131189959234
        );
        rationalMatrices_helper(
                10,
                8,
                "[[[6499102/125, -2, 1/25, -117/219224, -67/5785, -70/8797], [-10, 2/3, 62, -4551, 2/227, -239/978]," +
                " [1/47084144, 0, -2/35, -8/5, -1/6268, -504064/13]]," +
                " [[-238/5, -8/249, -15/13, 0], [0, 0, 3/238, 122224/59], [19, -7/3839, -1130/15659, 479]," +
                " [1/12, 2/47, 438, 11]], [[-7], [-10/3], [2462/21649]], [[-234/41, 1/15, -30]], [[4, -5/39]]," +
                " [[-206/167, 3, 2/23]], []#6, [[2260, -1/5, -49/5, 23/3, -7], [-7, 49465/2, 9/13, 1, 0]]," +
                " [[79602, -3/5, 97/3, 47, -11/9, -26/1537, -15, 1/3]," +
                " [-841, -1/8, 13/53, 5/4, -21, 3/1760, 0, 13/5]], [[424/23]], [[26], [3]], [[-34/15], [-1]]," +
                " [[1498/115, -1/6, 1/9, 5395/2]]," +
                " [[-149/7, -125/308, 1/69, -3618, -5656/31, 1/11], [1/59, 33, -9/76, 1, -1, 246/48401]," +
                " [3/112, 111, -1/4, 19/11, 237/832, 1/4]]," +
                " [[3/5, -58/111, -2/4079803], [5, -12, -5/567], [-1/3, 21, 280/11], [-20672/9, 1/519, -15/1706]," +
                " [-1/22, -2/31, 1/3], [-43124/2505, 3/2, -1]], [[-3/2, -4], [2/11, 3/3361], [-3/11075, 0]]," +
                " [[-2, -4, 2/21, 174], [146/383, 1/2, 0, -30725/11]], [[-1/46542]]," +
                " [[-253/249, -2588/93967625], [-1, -6299/2]], [[-1083]], ...]",
                "{[]#0=2046, []#1=1585, []#2=1160, []#3=840, []#4=653, [[0]]=546, []#5=481, []#6=398, [[]]=295," +
                " []#7=271}",
                8.16995000000032,
                9.840558387733228
        );
        rationalMatrices_fail_helper(2, 2);
        rationalMatrices_fail_helper(3, 1);
    }

    private static void polynomials_helper(
            @NotNull Iterable<Polynomial> input,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDegree,
            double meanCoefficientBitSize
    ) {
        List<Polynomial> sample = toList(take(DEFAULT_SAMPLE_SIZE, input));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfIntegers(toList(map(Polynomial::degree, sample))), meanDegree);
        aeq(meanOfIntegers(toList(concatMap(p -> map(BigInteger::bitLength, p), sample))), meanCoefficientBitSize);
        P.reset();
    }

    private static void polynomials_int_helper(
            int scale,
            int degree,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoefficientBitSize
    ) {
        polynomials_helper(
                P.withScale(scale).polynomials(degree),
                output,
                topSampleCount,
                meanDimension,
                meanCoefficientBitSize
        );
    }

    private static void polynomials_int_fail_helper(int scale, int degree) {
        try {
            P.withScale(scale).polynomials(degree);
            fail();
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testPolynomials_int() {
        polynomials_int_helper(
                1,
                -1,
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=1000000}",
                -1.000000000007918,
                0.0
        );
        polynomials_int_helper(
                5,
                3,
                "[-233*x^3+1256222*x^2+21*x+21, 9*x^3+x^2-1, -x^3-6*x^2-1661016*x-117, -28*x^3-576*x^2-39244*x-67," +
                " 30*x^3-46*x^2-16989*x-38, -x^3+2*x^2-8*x, x^3-4551*x^2+62, -92*x^3+x^2+9*x, -70*x^3-x^2+x-7," +
                " 4*x^3-181301872*x^2+x-3026, -19*x^3-2*x^2-x+2, -64580*x^3+5*x-4, -13*x^3-241920*x^2+7818*x+41," +
                " 5*x^3-122*x^2-394*x-238, x^3-224*x^2+62*x-1, -24*x^3+17*x^2+633*x-4, -2708*x^3+5*x^2-13*x-15," +
                " x^3+x^2-x-1, 11*x^3+91*x^2+122224*x+111, -618*x^3+16127*x^2-7*x, ...]",
                "{x^3=403, -x^3=382, 2*x^3=194, x^3-x=184, x^3-x^2=178, -x^3+x^2=178, -x^3-x^2=172, -x^3-x=166," +
                " 3*x^3=165, x^3+x^2=164}",
                2.9999999999775233,
                5.125149750005694
        );
        polynomials_int_helper(
                10,
                8,
                "[-437219*x^8-66364*x^7-124*x^6-4626764*x^5-645698713*x^4-117*x^3+220*x^2-337*x-47968091191," +
                " 81*x^8+1224*x^7+14*x^6-3*x^5+x^4-2*x^3+x^2+56*x+566," +
                " -454294*x^8-622*x^7-909910*x^6+8293038*x^5-16532643*x^4-4*x^3-19*x^2-16*x+54," +
                " -58148006*x^8-49*x^7+4*x^6+x^5-2300*x^4+18*x^3-1283*x^2-289302*x-7," +
                " 101342*x^8-739*x^7-111061034*x^5-2*x^4-506*x^3+87*x^2-30*x+47," +
                " 15*x^8+3*x^7-394953281*x^6+131588190*x^5+1510370*x^4-17*x^3+16276*x^2-8682*x+345112274," +
                " -20040*x^8-3015*x^6+5*x^5-9*x^4+7689363762084*x^3-432*x^2+3186328*x," +
                " 13297953072*x^8-8080881*x^7+152929*x^6+3928*x^5-x^3+3346*x^2-2*x+3064121," +
                " 1597518*x^8+1105224*x^7+3133*x^6+x^5-3*x^4-3*x^2-x-41349439," +
                " -434063*x^8+5*x^7+x^6-736*x^5+7182*x^4-7*x^3+3*x^2-248*x-13," +
                " -21118*x^8-6*x^7-39554*x^6-12*x^5-419*x^4-510*x^3-10*x^2+10025*x+2," +
                " -355615*x^8-3640006*x^7-3421*x^6+25689*x^5+524*x^4-789*x^3+3*x^2+663885*x+9," +
                " 7*x^8-330228993066*x^7-11*x^6+1524767947173*x^5-7*x^3-x^2+31*x-2304971396104," +
                " 112*x^8+397143*x^7+50*x^6-2*x^5-27*x^4-231522*x^3+x^2+6*x+17," +
                " 7*x^8+32022602*x^7+4886*x^6+60*x^4+3*x^3+629*x^2+114*x-23," +
                " -375*x^8-589*x^7+44117477702*x^6+207*x^4-198077*x^3-956783*x^2-1344*x+27," +
                " 36*x^8-632*x^7-4663*x^6-51*x^5-2743875*x^4-435*x^3+19882*x^2-13369365953*x+2," +
                " -2322630*x^8-281078474*x^7-51*x^6+12544*x^5+34*x^4+7*x^3-127*x^2-5*x-1684," +
                " -15528*x^8-130*x^7+32359*x^6+36587*x^5+22*x^4-x^3-109310*x^2-1543*x-174785977915," +
                " -2312*x^8+24*x^7+65*x^6-1060*x^5-40*x^4+22*x-117129, ...]",
                "{-437219*x^8-66364*x^7-124*x^6-4626764*x^5-645698713*x^4-117*x^3+220*x^2-337*x-47968091191=1," +
                " 81*x^8+1224*x^7+14*x^6-3*x^5+x^4-2*x^3+x^2+56*x+566=1," +
                " -454294*x^8-622*x^7-909910*x^6+8293038*x^5-16532643*x^4-4*x^3-19*x^2-16*x+54=1," +
                " -58148006*x^8-49*x^7+4*x^6+x^5-2300*x^4+18*x^3-1283*x^2-289302*x-7=1," +
                " 101342*x^8-739*x^7-111061034*x^5-2*x^4-506*x^3+87*x^2-30*x+47=1," +
                " 15*x^8+3*x^7-394953281*x^6+131588190*x^5+1510370*x^4-17*x^3+16276*x^2-8682*x+345112274=1," +
                " -20040*x^8-3015*x^6+5*x^5-9*x^4+7689363762084*x^3-432*x^2+3186328*x=1," +
                " 13297953072*x^8-8080881*x^7+152929*x^6+3928*x^5-x^3+3346*x^2-2*x+3064121=1," +
                " 1597518*x^8+1105224*x^7+3133*x^6+x^5-3*x^4-3*x^2-x-41349439=1," +
                " -434063*x^8+5*x^7+x^6-736*x^5+7182*x^4-7*x^3+3*x^2-248*x-13=1}",
                8.000000000063345,
                10.031244555547099
        );
        polynomials_int_fail_helper(0, -1);
        polynomials_int_fail_helper(1, -2);
    }

    private static void polynomials_helper(
            int scale,
            int secondaryScale,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDegree,
            double meanCoefficientBitSize
    ) {
        polynomials_helper(
                P.withScale(scale).withSecondaryScale(secondaryScale).polynomials(),
                output,
                topSampleCount,
                meanDegree,
                meanCoefficientBitSize
        );
    }

    private static void polynomials_fail_helper(int scale, int secondaryScale) {
        try {
            P.withScale(scale).withSecondaryScale(secondaryScale).polynomials();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testPolynomials() {
        polynomials_helper(
                1,
                1,
                "[0, 1, 0, x-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, x, 0, -2*x^5-x^4+x^3-x^2+19*x-5, ...]",
                "{0=666743, 1=41642, -1=41585, 3=10615, -x=10437, -2=10427, -3=10377, 2=10365, x=10340, 2*x=2716}",
                -0.33297599999650446,
                1.2495277531222848
        );
        polynomials_helper(
                5,
                3,
                "[x^5-x^3-233*x^2+1256222*x+85, -67*x^4-x^3-6*x^2-1661016*x-240," +
                " -46*x^5-16989*x^4-38*x^3-28*x^2-576*x-3737, 6, 4, 2*x^3-8*x^2+1, -4551*x^2+94, -1," +
                " x^3-7*x^2-92*x+4, -239, 4*x^3-181301872*x^2+x-210," +
                " -x^19+5*x^18-122*x^17-394*x^16-238*x^15-13*x^14-241920*x^13+7818*x^12+41*x^11-64580*x^10+5*x^8-4*" +
                "x^7-19*x^6-2*x^5-x^4+2*x^3-4452, 17*x^5+633*x^4-4*x^3+x^2-224*x+1, -2708*x^4+5*x^3-13*x^2-15*x, -1," +
                " 1, 47, -152*x+52, -7350*x^2-2*x, -46*x^3-x^2+47*x, ...]",
                "{0=284676, 1=15035, -1=14890, 3=6242, -3=6197, -2=6158, 2=6086, -6=2636, -4=2622, -5=2608}",
                1.8584690000024553,
                5.1256966579379375
        );
        polynomials_helper(
                10,
                8,
                "[-16532643*x^30-4*x^29-19*x^28-16*x^27+54*x^26-2404*x^24+5896747328932606365*x^23-239*x^22-x^21+" +
                "2*x^20-3*x^19-232*x^18+2*x^17+81*x^16+1224*x^15+14*x^14-3*x^13+x^12-2*x^11+x^10+56*x^9+566*x^8" +
                "-437219*x^7-66364*x^6-124*x^5-4626764*x^4-645698713*x^3-117*x^2+220*x-2129," +
                " 4*x^18+x^17-2300*x^16+18*x^15-1283*x^14-289302*x^13-7*x^12+11*x^10+51089054789*x^9+3*x^8+" +
                "368648822968*x^7+5*x^6+249*x^5-4*x^4+105065295*x^3-454294*x^2-622*x-1434198," +
                " 87*x^3-30*x^2+47*x-125256870, -8682*x^6+345112274*x^5+101342*x^4-739*x^3-111061034*x-8," +
                " -9*x^10+7689363762084*x^9-432*x^8+3186328*x^7+15*x^5+3*x^4-394953281*x^3+131588190*x^2+1510370*x-" +
                "49," +
                " -3*x^11-x^10-41349439*x^9+13297953072*x^8-8080881*x^7+152929*x^6+3928*x^5-x^3+3346*x^2-2*x+" +
                "3064121, 0, 3133*x+7," +
                " -419*x^15-510*x^14-10*x^13+10025*x^12+2*x^11-434063*x^10+5*x^9+x^8-736*x^7+7182*x^6-7*x^5+3*x^4-" +
                "248*x^3-13*x^2+1597518*x, 9*x^3-21118*x^2-6*x-72322," +
                " x^18+6*x^17+17*x^16+7*x^15-330228993066*x^14-11*x^13+1524767947173*x^12-7*x^10-x^9+31*x^8-" +
                "2304971396104*x^7-355615*x^6-3640006*x^5-3421*x^4+25689*x^3+524*x^2-789*x+13," +
                " 27*x^14+7*x^13+32022602*x^12+4886*x^11+60*x^9+3*x^8+629*x^7+114*x^6-23*x^5+112*x^4+397143*x^3+" +
                "50*x^2-2*x-43, -13369365953*x^8+2*x^7-375*x^6-589*x^5+44117477702*x^4+207*x^2-198077*x-1481071," +
                " -281078474*x^13-51*x^12+12544*x^11+34*x^10+7*x^9-127*x^8-5*x^7-1684*x^6+36*x^5-632*x^4-4663*x^3-" +
                "51*x^2-2743875*x-435," +
                " -2312*x^17+24*x^16+65*x^15-1060*x^14-40*x^13+22*x^10-117129*x^9-15528*x^8-130*x^7+32359*x^6+" +
                "36587*x^5+22*x^4-x^3-109310*x^2-1543*x-764745235361," +
                " 372*x^8+398077*x^7-51*x^6-3*x^5+973*x^4-5*x^3-82699*x^2-202206016023*x+5," +
                " -11617*x^2+12126258480*x+1," +
                " 203*x^21+5994968441128*x^19-329*x^18+6*x^17-105*x^16-6*x^15-12*x^14-14*x^13+5*x^12-146275*x^10-" +
                "x^9-155*x^8-95*x^7-x^6-6158262286914*x^5+486*x^4-11821607*x^3+18553*x^2-142246*x-1," +
                " -23971*x^4+451*x^3+13*x^2-79595301742*x-337465087682, -6288*x^3+281*x^2+x-1, ...]",
                "{0=121087, -1=4518, 1=4510, 3=2035, -2=2022, 2=2016, -3=2006, -7=968, -6=937, 5=937}",
                6.900087000000637,
                10.035968210988367
        );
        polynomials_fail_helper(0, 1);
        polynomials_fail_helper(1, 0);
    }

    private static void rationalPolynomials_helper(
            @NotNull Iterable<RationalPolynomial> input,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDegree,
            double meanCoefficientBitSize
    ) {
        List<RationalPolynomial> sample = toList(take(DEFAULT_SAMPLE_SIZE / 10, input));
        aeqitLimit(TINY_LIMIT, sample, output);
        aeq(topSampleCount(DEFAULT_TOP_COUNT, sample), topSampleCount);
        aeq(meanOfIntegers(toList(map(RationalPolynomial::degree, sample))), meanDegree);
        aeq(meanOfIntegers(toList(concatMap(p -> map(Rational::bitLength, p), sample))), meanCoefficientBitSize);
        P.reset();
    }

    private static void rationalPolynomials_int_helper(
            int scale,
            int degree,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDimension,
            double meanCoefficientBitSize
    ) {
        rationalPolynomials_helper(
                P.withScale(scale).rationalPolynomials(degree),
                output,
                topSampleCount,
                meanDimension,
                meanCoefficientBitSize
        );
    }

    private static void rationalPolynomials_int_fail_helper(int scale, int degree) {
        try {
            P.withScale(scale).rationalPolynomials(degree);
            fail();
        } catch (IllegalArgumentException | IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalPolynomials_int() {
        rationalPolynomials_int_helper(
                3,
                -1,
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]",
                "{0=100000}",
                -0.9999999999980838,
                0.0
        );
        rationalPolynomials_int_helper(
                5,
                3,
                "[-x^3-29/4*x^2-x+1/36, -2*x^3+1/89*x^2-53/47*x+5/2, -2/683*x^3-22*x^2-4*x-5/6, -4*x^3-1/50*x," +
                " -1/4*x^3-1/16*x^2+2*x+12757/4452, -718/59937*x^3+3*x^2-6268*x-1, x^3-2/25*x^2-1/38*x+1," +
                " 17/24*x^3+14*x^2+2*x-5/6, x^3-x+1/7, -1/7*x^3+2*x^2+x+15/619, 14/3*x^3-29/19562*x-1/7," +
                " 1/6*x^3+1/4*x^2+10*x, -1/6*x^3+16*x^2+8*x-9/4, -2/5*x^3-2/11*x^2-24/47*x+11/2," +
                " -7/41*x^3+3*x^2+1/10*x-7/2, -22/3*x^3-x^2+1/2*x-3/11, -2/5*x^3-1/21*x^2+1/3*x-3623/3," +
                " 87*x^3+1/3*x^2+x+1/6, 468*x^3+2/5*x^2-1/2*x-1/13, 1/1790*x^3+1/6*x^2+45/7*x-26, ...]",
                "{x^3=35, -x^3=33, 2*x^3=18, 3*x^3=17, x^3-1=14, -x^3+x=14, x^3-x=14, x^3+1=13, -1/2*x^3=13," +
                " 1/2*x^3=13}",
                3.000000000005079,
                5.000859999992796
        );
        rationalPolynomials_int_helper(
                10,
                8,
                "[2/3*x^8-10*x^7-70/8797*x^6-67/5785*x^5-117/219224*x^4+1/25*x^3-2*x^2+2304798/125*x+21/13," +
                " -1/6268*x^8-8/5*x^7-2/35*x^6+1/47084144*x^4-239/978*x^3+2/227*x^2-4551*x+62," +
                " 122224/59*x^8+3/238*x^7-15/13*x^3-8/249*x^2-238/5*x-504064/13," +
                " -98*x^8+11*x^7+438*x^6+2/47*x^5+1/12*x^4+479*x^3-1130/15659*x^2-7/3839*x+19," +
                " 3*x^8-70/167*x^7+139/9*x^6-1/5*x^5-30*x^4+1/15*x^3-97/41*x^2+1/926*x+1/6," +
                " -7*x^8-7*x^7+23/3*x^6-49/5*x^5-1/5*x^4+2260*x^3+1/37*x^2+23/7*x+2/23," +
                " -26/1537*x^8+13/31*x^7-3*x^6+3954017/6454*x^5+1/344*x^4+x^2+9/13*x+49465/2," +
                " 5395/2*x^8+1/9*x^7+20*x^6-x^5-34/15*x^4-1/7*x^3+1/3*x^2+6312/23*x+13/5," +
                " 33*x^8+1/59*x^7+1/11*x^6-5656/31*x^5-3618*x^4+1/69*x^3-125/308*x^2-149/7*x+3," +
                " 237/832*x^8+19/11*x^7-1/4*x^6+111*x^5+3/112*x^4+246/48401*x^3-x^2+x-9/76," +
                " -1/3*x^8-5/567*x^7-12*x^6+5*x^5-2/4079803*x^4-58/111*x^3+3/5*x^2+14*x+1/4," +
                " -43124/2505*x^8+1/3*x^7-2/31*x^6-1/22*x^5-15/1706*x^4+1/519*x^3-20672/9*x^2+280/11*x+21," +
                " -1/2*x^8-3/11075*x^6+3/3361*x^5+2/11*x^4-4*x^3-3/2*x^2-x+3/2," +
                " -2588/93967625*x^8-1/46542*x^7-30725/11*x^6+1/2*x^4-1/40*x^3-383*x^2+1/78*x+53/9," +
                " 13*x^8-893924/13*x^7-9/2*x^6+37*x^5-40*x^4+1/63*x^3+186*x^2-78*x+1/454," +
                " -203/177*x^8-2*x^7+71/2*x^5-3239437/3*x^4+7/131*x^3+79/3*x^2+17*x-1," +
                " -1/6*x^8+1/6829*x^7+3/79*x^6-246*x^5+1/11*x^4-x^3-157/3*x^2-209/10*x+2/3," +
                " -2/483*x^8-9/37841*x^7+30413/72*x^6+11/4*x^5+3/38*x^4+4*x^3-24*x^2+6*x-4," +
                " -x^8-x^7+40*x^5+3/46*x^4-x^3-2/63*x^2+244/5*x-24/7," +
                " 1/5*x^8-1/18*x^7+x^6-5/6*x^5-740186/147*x^4-3/80*x^3+x-1/2, ...]",
                "{2/3*x^8-10*x^7-70/8797*x^6-67/5785*x^5-117/219224*x^4+1/25*x^3-2*x^2+2304798/125*x+21/13=1," +
                " -1/6268*x^8-8/5*x^7-2/35*x^6+1/47084144*x^4-239/978*x^3+2/227*x^2-4551*x+62=1," +
                " 122224/59*x^8+3/238*x^7-15/13*x^3-8/249*x^2-238/5*x-504064/13=1," +
                " -98*x^8+11*x^7+438*x^6+2/47*x^5+1/12*x^4+479*x^3-1130/15659*x^2-7/3839*x+19=1," +
                " 3*x^8-70/167*x^7+139/9*x^6-1/5*x^5-30*x^4+1/15*x^3-97/41*x^2+1/926*x+1/6=1," +
                " -7*x^8-7*x^7+23/3*x^6-49/5*x^5-1/5*x^4+2260*x^3+1/37*x^2+23/7*x+2/23=1," +
                " -26/1537*x^8+13/31*x^7-3*x^6+3954017/6454*x^5+1/344*x^4+x^2+9/13*x+49465/2=1," +
                " 5395/2*x^8+1/9*x^7+20*x^6-x^5-34/15*x^4-1/7*x^3+1/3*x^2+6312/23*x+13/5=1," +
                " 33*x^8+1/59*x^7+1/11*x^6-5656/31*x^5-3618*x^4+1/69*x^3-125/308*x^2-149/7*x+3=1," +
                " 237/832*x^8+19/11*x^7-1/4*x^6+111*x^5+3/112*x^4+246/48401*x^3-x^2+x-9/76=1}",
                7.99999999998467,
                9.892031111041902
        );
        rationalPolynomials_int_fail_helper(2, -1);
        rationalPolynomials_int_fail_helper(1, -2);
    }

    private static void rationalPolynomials_helper(
            int scale,
            int secondaryScale,
            @NotNull String output,
            @NotNull String topSampleCount,
            double meanDegree,
            double meanCoefficientBitSize
    ) {
        rationalPolynomials_helper(
                P.withScale(scale).withSecondaryScale(secondaryScale).rationalPolynomials(),
                output,
                topSampleCount,
                meanDegree,
                meanCoefficientBitSize
        );
    }

    private static void rationalPolynomials_fail_helper(int scale, int secondaryScale) {
        try {
            P.withScale(scale).withSecondaryScale(secondaryScale).rationalPolynomials();
            fail();
        } catch (IllegalStateException ignored) {}
        finally {
            P.reset();
        }
    }

    @Test
    public void testRationalPolynomials() {
        rationalPolynomials_helper(
                3,
                1,
                "[1/2*x^2+x+3/221, 0, -2/3*x+3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3/4*x, 0, 0, 0, 0, ...]",
                "{0=60965, -1=2775, 1=2768, -3=738, 3=729, 1/3=714, 1/2=697, -1/3=686, 2=677, -1/2=661}",
                -0.22369000000018416,
                3.272416946837637
        );
        rationalPolynomials_helper(
                5,
                3,
                "[5/2*x^5-x^4-29/4*x^3-1/10*x^2-20*x+10/3, -7/2*x^2-4*x, 2*x+19," +
                " x^20+15/619*x^19+x^18-x^16+1/7*x^15+17/24*x^14+14*x^13+2*x^12-5/6*x^11+x^10-2/25*x^9-1/38*x^8+x^7" +
                "-718/59937*x^6+3*x^5-6268*x^4-x^3-1/4*x^2+x-4452, 0, -9/4*x^4+1/6*x^3+1/4*x^2+10*x, 0, 8*x-1/119," +
                " -2/11*x^4-24/47*x^3+11/2*x^2-1/6*x, 3*x^2+1/10*x-7/2, -7/41," +
                " -3623/3*x^12-22/3*x^11-x^10+1/2*x^9-3/11*x^8+1/3*x^5-17*x^4+1/3, -2/5*x+1/2, 1, 7/87, -3/13," +
                " -26*x^3+468*x^2+2/5*x-1/2, 0, 0, 109/7, ...]",
                "{0=28636, 1=1210, -1=1150, 3=431, -1/2=423, 2=396, -2=391, 1/3=384, -3=381, 1/2=372}",
                1.863679999999461,
                5.007410045814251
        );
        rationalPolynomials_helper(
                10,
                8,
                "[2/47*x^30+1/12*x^29+479*x^28-1130/15659*x^27-7/3839*x^26+19*x^25+122224/59*x^24+3/238*x^23-" +
                "15/13*x^19-8/249*x^18-238/5*x^17-504064/13*x^16-1/6268*x^15-8/5*x^14-2/35*x^13+1/47084144*x^11-" +
                "239/978*x^10+2/227*x^9-4551*x^8+62*x^7+2/3*x^6-10*x^5-70/8797*x^4-2/171*x^3+25/53*x^2-1/2*x-489/2," +
                " 11*x+438, 1/926*x^2+1/6*x-98," +
                " -1/5*x^11+2260*x^10+1/37*x^9+23/7*x^8+2/23*x^7+3*x^6-70/167*x^5+139/9*x^4-1/5*x^3-30*x^2+1/15*x-" +
                "58/97," +
                " 3/1760*x^20-21*x^19+5/4*x^18+13/53*x^17-1/8*x^16-841*x^15+1/3*x^14-15*x^13-26/1537*x^12+" +
                "13/31*x^11-3*x^10+3954017/6454*x^9+1/344*x^8+x^6+9/13*x^5+49465/2*x^4-7*x^3-7*x^2+23/3*x-49/5, 0," +
                " 21/5," +
                " -3618*x^11+1/69*x^10-125/308*x^9-149/7*x^8+3*x^7+5395/2*x^6+1/9*x^5+20*x^4-x^3+15/34*x^2+3*x+26," +
                " 3763/9*x^5+2*x^4-59/17*x^3-29926*x^2-19*x+47, -1/4*x^5+111*x^4+3/112*x^3+246/48401*x^2-x+2, 0," +
                " 5*x^9-2/4079803*x^8-399/631*x^7-58759/58*x^6-3/4*x^5+3*x^4-25/118*x^3-1344/5*x^2+11/237*x-" +
                "140502/19, 280/11*x^4+21*x^3-1/3*x^2-394/13*x-20/41, -187/834, 2/21*x^2-4*x-2," +
                " -383*x^2+1/78*x-219/55, 1/2, 0," +
                " -729/2*x^11-13/3473*x^10-5/14*x^9-3*x^8+5/7*x^7-1083*x^6-6299/2*x^5-x^4-2588/93967625*x^3+6*x^2-1" +
                "1/28*x-1/1029," +
                " 4*x^28-24*x^27+6*x^26-4*x^25-1/6*x^24+1/6829*x^23+3/79*x^22-246*x^21+1/11*x^20-x^19-157/3*x^18-" +
                "209/10*x^17+2/3*x^16-203/177*x^15-2*x^14+71/2*x^12-3239437/3*x^11+7/131*x^10+79/3*x^9+17*x^8-3*x^7+" +
                "2/15779*x^6+1/5*x^5-2/101*x^4-1/2*x^3+63/8*x^2+2*x-1/186, ...]",
                "{0=11712, 1=234, -1=203, 3=102, 1/2=101, 2=97, -3=94, -1/3=93, -2=92, -1/2=80}",
                6.94774000000149,
                9.88837958966099
        );
        rationalPolynomials_fail_helper(2, 1);
        rationalPolynomials_fail_helper(1, 0);
    }

    private static double meanOfIntegers(@NotNull List<Integer> xs) {
        int size = xs.size();
        return sumDouble(map(i -> (double) i / size, xs));
    }

    private static double meanOfRationals(@NotNull List<Rational> xs) {
        int size = xs.size();
        return sumDouble(map(r -> r.doubleValue() / size, xs));
    }
}
